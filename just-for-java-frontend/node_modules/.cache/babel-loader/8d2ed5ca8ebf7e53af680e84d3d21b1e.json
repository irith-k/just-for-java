{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Arithmetic.js\";\nimport React from 'react';\n\nclass Arithmetic extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 23\n      }\n    }, \"variables page\"), \" how to create \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 80\n      }\n    }, \"integers\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 100\n      }\n    }, \"doubles\"), \". on this page, we are going to use these two variable types in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 178\n      }\n    }, \"arithmetic operations\"), \". oooh, fancy right? not really. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 239\n      }\n    }, \"arithmetic\"), \" is just a cool-sounding word for the study of numbers and operations on them, such as addition, subtraction, multiplication, and division. here are the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 409\n      }\n    }, \"five operations\"), \" and their corresponding \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 456\n      }\n    }, \"operator symbols\"), \" that java provides:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 10\n      }\n    }, \"addition\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 41\n      }\n    }, \"+\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 10\n      }\n    }, \"subtraction\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 44\n      }\n    }, \"-\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 10\n      }\n    }, \"multiplication\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 47\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 10\n      }\n    }, \"division\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }\n    }, \"modulus\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 40\n      }\n    }, \"%\"))), \"you can apply any of the arithmetic operations listed above between:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 10\n      }\n    }, \"two integers\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between two integers, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 92\n      }\n    }, \"integer\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 10\n      }\n    }, \"two doubles\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between two doubles, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 91\n      }\n    }, \"double\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 10\n      }\n    }, \"an integer and a double\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between an integer and a double, no matter the order, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 124\n      }\n    }, \"double\")))), \"note how the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }\n    }, \"type of the result\"), \" after the operation changes depending on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 85\n      }\n    }, \"what types the operation is in between\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }\n    }), \"one last nuance... \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }\n    }, \"order of operations\"), \". in the order of operations in java, anything in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 100\n      }\n    }, \"()\"), \" happens first, then \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 130\n      }\n    }, \"*\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 140\n      }\n    }, \"/\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 154\n      }\n    }, \"%\"), \" happen from left to right, and finally \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 202\n      }\n    }, \"+\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 215\n      }\n    }, \"-\"), \" happen from left to right. here is a visual representation of the order of operations:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }\n    }, \"()\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, \"* / %\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }\n    }, \"+ -\")), \"awesome! now let's discuss each arithmetic operation in greater detail!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \"+ addition +\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, \"addition\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 38\n      }\n    }, \"+\"), \" in java. here are some examples of addition between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 6\n      }\n    }, \"1 + 1 = 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }\n    }, \"3.5 + 5.73 = 9.23\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }\n    }, \"7 + 1.0 = 8.0\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }\n    }, \"9.9 + 2 = 11.9\")), \"here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 34\n      }\n    }, \"standard notation\"), \" of adding another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 86\n      }\n    }, \"i\"), \" to a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 109\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 121\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 169\n      }\n    }, \"sum\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 184\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 8\n      }\n    }, \"sum\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }, \"sum\"), \" + \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 34\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, \"//add the tip to the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }), \"double price = 13.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }), \"double tip = 2.50;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }), \"price = price + tip;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, \"shorthand notation\"), \" for addition uses \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 53\n      }\n    }, \"+=\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 93\n      }\n    }, \"shorthand notation\"), \" of adding another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 146\n      }\n    }, \"i\"), \" to a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 169\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 181\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 229\n      }\n    }, \"sum\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 244\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 8\n      }\n    }, \"sum\"), \" += \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 22\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, \"//add the tip to the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }), \"double price = 13.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }), \"double tip = 2.50;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }), \"price += tip;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }), \"if you want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }\n    }, \"increment\"), \" a variable, there is actually a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 69\n      }\n    }, \"shorthand of the shorthand notation\"), \" that we can use that automatically adds 1 to a variable using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 174\n      }\n    }, \"++\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 214\n      }\n    }, \"shorthand of the shorthand notation\"), \" of incrementing, or adding 1 to, a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 301\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 313\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 361\n      }\n    }, \"sum\"), \" has already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 8\n      }\n    }, \"sum\"), \"++;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 10\n      }\n    }), \"now let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }\n    }), \"num = num + 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }\n    }), \"num += 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }), \"num++;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"- subtraction -\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }, \"subtraction\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 41\n      }\n    }, \"-\"), \" in java. here are some examples of subtraction between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 6\n      }\n    }, \"1 - 4 = -3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }, \"8.4 - 3.1 = 5.3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 6\n      }\n    }, \"22 - 0.001 = 21.999\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 6\n      }\n    }, \"7.7 - 7 = 0.7\")), \"here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 34\n      }\n    }, \"standard notation\"), \" of subtracting another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 91\n      }\n    }, \"i\"), \" from a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 116\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 135\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 183\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 205\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 8\n      }\n    }, \"difference\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 28\n      }\n    }, \"difference\"), \" - \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 48\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }, \"//subtract the discount from the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }), \"double price = 22.84;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }\n    }), \"double discount = 5.00;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }\n    }), \"price = price - discount;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, \"shorthand notation\"), \" for subtraction uses \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 56\n      }\n    }, \"-=\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 96\n      }\n    }, \"shorthand notation\"), \" of subtracting another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 154\n      }\n    }, \"i\"), \" from a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 179\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 198\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 246\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 268\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 8\n      }\n    }, \"difference\"), \" -= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }\n    }, \"//subtract the discount from the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }), \"double price = 22.84;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }), \"double discount = 5.00;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }\n    }), \"price -= discount;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }), \"if you want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 20\n      }\n    }, \"decrement\"), \" a variable, there is actually a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 69\n      }\n    }, \"shorthand of the shorthand notation\"), \" that we can use that automatically subtracts 1 from a variable using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 181\n      }\n    }, \"--\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 221\n      }\n    }, \"shorthand of the shorthand notation\"), \" of decrementing, or subtracting 1 from, a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 315\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 334\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 382\n      }\n    }, \"difference\"), \" has already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 8\n      }\n    }, \"difference\"), \"++;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 10\n      }\n    }), \"now let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }), \"num = num - 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 5\n      }\n    }), \"num -= 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }\n    }), \"num--;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 5\n      }\n    }, \"* multiplication *\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }\n    }, \"multiplication\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 44\n      }\n    }, \"*\"), \" in java. here are some examples of multiplication between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 6\n      }\n    }, \"3 * 3 = 9\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 6\n      }\n    }, \"1.5 * 0.7 = 1.05\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 6\n      }\n    }, \"2 * 4.4 = 8.8\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 6\n      }\n    }, \"9.1 * 6 = 54.6\")), \"here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 34\n      }\n    }, \"standard notation\"), \" of multiplying a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 85\n      }\n    }, \"product\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 120\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 130\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 178\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 200\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 8\n      }\n    }, \"product\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }\n    }, \"product\"), \" * \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 42\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }\n    }, \"//multiply the price per cookie by the number of cookies to get the total\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }\n    }), \"double price = 4.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }\n    }), \"int cookies = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 5\n      }\n    }), \"price = price * cookies;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 5\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"shorthand notation\"), \" for multiplication uses \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 59\n      }\n    }, \"*=\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 99\n      }\n    }, \"shorthand notation\"), \" of multiplying a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 151\n      }\n    }, \"product\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 186\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 196\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 244\n      }\n    }, \"product\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 263\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 8\n      }\n    }, \"product\"), \" *= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 26\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 5\n      }\n    }, \"//multiply the price per cookie by the number of cookies to get the total\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 5\n      }\n    }), \"double price = 4.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }\n    }), \"int cookies = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 5\n      }\n    }), \"price *= cookies;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }\n    }, \"/ division /\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }\n    }, \"division\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 38\n      }\n    }, \"/\"), \" in java. division in java is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 76\n      }\n    }, \"slightly different\"), \" from division in real life because, as we saw earlier, the result of an arithmetic operation between two integers is an integer itself. this means that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 254\n      }\n    }, \"dividing two integers will result in an integer\"), \". you most probably are thinking, \\\"okay. what's so bad about that?\\\" well, for example, what would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 406\n      }\n    }, \"3 / 2\"), \" be equal to? in real life, we would say that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 464\n      }\n    }, \"3 / 2 = 1.5\"), \", but 1.5 is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 497\n      }\n    }, \"double\"), \", and we need it to be an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 536\n      }\n    }, \"int\"), \". therefore, in java, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 568\n      }\n    }, \"3 / 2 = 1\"), \" because 1.5 gets \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 602\n      }\n    }, \"rounded down\"), \" to 1. the quotient when you divide by two integers \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 673\n      }\n    }, \"always get rounded down to the nearest integer\"), \". you can also think about it as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 759\n      }\n    }, \"the decimal portion of the quotient gets truncated\"), \". on the other hand, if you're performing division between two doubles or an integer and a double, as we said earlier the result should be a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 957\n      }\n    }, \"double\"), \", so the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 979\n      }\n    }, \"decimal portion remains\"), \" in the quotient. here are some examples of division between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 6\n      }\n    }, \"9 / 4 = 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 6\n      }\n    }, \"9.0 / 4.0 = 2.25\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 6\n      }\n    }, \"9.0 / 4 = 2.25\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 6\n      }\n    }, \"9 / 4.0 = 2.25\")), \"here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 34\n      }\n    }, \"standard notation\"), \" of dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 82\n      }\n    }, \"quotient\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 118\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 128\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 176\n      }\n    }, \"quotient\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 196\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 8\n      }\n    }, \"quotient\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 26\n      }\n    }, \"quotient\"), \" / \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 44\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 5\n      }\n    }, \"//divide the total price by the number of people to split the price\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }\n    }), \"double price = 84.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 5\n      }\n    }), \"int people = 10;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }\n    }), \"price = price / people;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 5\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, \"shorthand notation\"), \" for division uses \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 53\n      }\n    }, \"/=\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 93\n      }\n    }, \"shorthand notation\"), \" of dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 142\n      }\n    }, \"quotient\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 178\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 188\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 236\n      }\n    }, \"quotient\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 256\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 8\n      }\n    }, \"quotient\"), \" /= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 27\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 5\n      }\n    }, \"//divide the total price by the number of people to split the price\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 5\n      }\n    }), \"double price = 84.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }\n    }), \"int people = 10;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }\n    }), \"price /= people;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 5\n      }\n    }, \"% modulus %\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }\n    }, \"modulus\"), \" is a funky word which means \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 48\n      }\n    }, \"the remainder after you divide two numbers\"), \" and is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 119\n      }\n    }, \"%\"), \". modulus is most commonly used \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 159\n      }\n    }, \"between integers\"), \", since integer division as we just learned rounds down to the nearest integer, leaving a remainder behind. let's revisit the example we had when discussing integer division: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 357\n      }\n    }, \"3 / 2\"), \". we already know that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 392\n      }\n    }, \"3 / 2 = 1\"), \", but what about \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 425\n      }\n    }, \"3 % 2\"), \"? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 440\n      }\n    }, \"btw:\"), \" 3 % 2 is pronounced \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 489\n      }\n    }, \"\\\"three mod two\\\"\"), \".) if you guessed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 529\n      }\n    }, \"1\"), \", you're correct! \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 555\n      }\n    }, \"3 % 2 = 1\"), \" because 3 / 2 is 1 \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 591\n      }\n    }, \"with a remainder of 1\"), \". here are some more examples using modulus between integers:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 6\n      }\n    }, \"22 % 4 = 2 because 22 / 4 is 5 with a remainder of 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 6\n      }\n    }, \"3 % 5 = 3 because 3 / 5 is 0 with a remainder of 3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 6\n      }\n    }, \"14 % 7 = 0 because 14 / 7 is 2 with a remainder of 0\")), \"here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 34\n      }\n    }, \"standard notation\"), \" of getting the remainder after dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 110\n      }\n    }, \"remainder\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 147\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 157\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 205\n      }\n    }, \"remainder\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 226\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 8\n      }\n    }, \"remainder\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 27\n      }\n    }, \"remainder\"), \" % \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 46\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 5\n      }\n    }, \"//get the leftover apples after dividing apples between friends\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 5\n      }\n    }), \"int apples = 8;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 5\n      }\n    }), \"int friends = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 5\n      }\n    }), \"apples = apples % friends;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 5\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }\n    }, \"shorthand notation\"), \" for modulus uses \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 52\n      }\n    }, \"%=\"), \". here is the blueprint of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 92\n      }\n    }, \"shorthand notation\"), \" of getting the remainder after dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 169\n      }\n    }, \"remainder\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 206\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 216\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 264\n      }\n    }, \"remainder\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 285\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 8\n      }\n    }, \"remainder\"), \" %= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 28\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 5\n      }\n    }, \"//get the leftover apples after dividing apples between friends\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 5\n      }\n    }), \"int apples = 8;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 5\n      }\n    }), \"int friends = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 5\n      }\n    }), \"apples %= friends;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 5\n      }\n    }), \"modulus is often used to figure out if a certain integer is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 65\n      }\n    }, \"divisible\"), \" by another integer. you might be wondering, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 126\n      }\n    }, \"\\\"how can modulus be used in divisibility?\\\"\"), \" great question! let's dive into it!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 5\n      }\n    }), \"as we stated earlier, modulus represents the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 50\n      }\n    }, \"remainder after dividing two integers\"), \"; in other words, modulus is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 127\n      }\n    }, \"leftover\"), \". now for divisibility: if a number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 178\n      }\n    }, \"x\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 190\n      }\n    }, \"divisible\"), \" by a number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 219\n      }\n    }, \"y\"), \", that means that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 245\n      }\n    }, \"x\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 253\n      }\n    }, \"/\"), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 261\n      }\n    }, \"y\"), \" is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 276\n      }\n    }, \"integer\"), \". in other words, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 312\n      }\n    }, \"remainder\"), \" when you divide \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 345\n      }\n    }, \"x\"), \" by \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 357\n      }\n    }, \"y\"), \" should be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 385\n      }\n    }, \"0\"), \". have you connected the dots? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 424\n      }\n    }, \"a number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 436\n      }\n    }, \"x\"), \" is divisible by another number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 476\n      }\n    }, \"y\"), \" when x % y = 0.\"), \" now let's translate this into lines of code:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 5\n      }\n    }, \"//if an integer % 2 = 0, then the integer is even; otherwise, the integer is odd\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 5\n      }\n    }), \"int x = 8;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 5\n      }\n    }), \"int y = 2;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 5\n      }\n    }), \"System.out.println(x % y);\"), \"because 8 is an even number, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 34\n      }\n    }, \"0\"), \" should be printed to the console. let's take a look:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 5\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), \"make variables for the price of everything you buy at a shop. add up every price. multiply by tax. print out total price. also temp conversion\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 6\n      }\n    }, \"slope:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 41\n      }\n    }), \"throwback to math class... the slope of a line connecting two points (x1, y1) and (x2, y2) is (y2-y1)/(x2-x1). your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 122\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 144\n      }\n    }, \"arithmetic\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 165\n      }\n    }, \"calculate the slope given the two points (x1, y1) and (x2, y2)\"), \". this will require three steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 266\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 7\n      }\n    }, \"store the two points (x1, y1) and (x2, y2) in variables\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 8\n      }\n    }, \"to store a point in our program, we will create two variables: one for the x-coordinate and one for the y-coordinate\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 8\n      }\n    }, \"that means that, in total, there should be four variables: x1, y1, x2, and y2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 8\n      }\n    }, \"each of these variables will be a double, since they can store a decimal\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 7\n      }\n    }, \"calculate the slope of the line connecting (x1, y1) and (x2, y2)\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 8\n      }\n    }, \"here's the formula: slope = (y2-y1)/(x2-x1)\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 8\n      }\n    }, \"store the slope in a double variable\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 7\n      }\n    }, \"print out the slope variable\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", if you forgot what printing is or how to print a variable, you can revisit the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 135\n      }\n    }, \"printing page\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 176\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 181\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 6\n      }\n    }, \"slope:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 41\n      }\n    }), \"throwback to math class... the slope of a line connecting two points (x1, y1) and (x2, y2) is (y2-y1)/(x2-x1). your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 122\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 144\n      }\n    }, \"arithmetic\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 165\n      }\n    }, \"calculate the slope given the two points (x1, y1) and (x2, y2)\"), \". this will require three steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 266\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 7\n      }\n    }, \"store the two points (x1, y1) and (x2, y2) in variables\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 8\n      }\n    }, \"to store a point in our program, we will create two variables: one for the x-coordinate and one for the y-coordinate\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 8\n      }\n    }, \"that means that, in total, there should be four variables: x1, y1, x2, and y2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 8\n      }\n    }, \"each of these variables will be a double, since they can store a decimal\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 7\n      }\n    }, \"calculate the slope of the line connecting (x1, y1) and (x2, y2)\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 8\n      }\n    }, \"here's the formula: slope = (y2-y1)/(x2-x1)\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 8\n      }\n    }, \"store the slope in a double variable\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 7\n      }\n    }, \"print out the slope variable\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", if you forgot what printing is or how to print a variable, you can revisit the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 135\n      }\n    }, \"printing page\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 176\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 181\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 6\n      }\n    }, \"temperature convertor:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 57\n      }\n    }), \"how can we convert between Celsius and Fahrenheit? your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 62\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 84\n      }\n    }, \"arithmetic\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 105\n      }\n    }, \"convert a temperature from \\xB0C to \\xB0F\"), \" and to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 155\n      }\n    }, \"convert a temperature from \\xB0F to \\xB0C\"), \". this will require four steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 228\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 7\n      }\n    }, \"create a double variable to store a temperature in Celsius\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 7\n      }\n    }, \"print out what the temperature is in Fahrenheit, using next-line printing\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 8\n      }\n    }, \"inside the print statement, you will need to convert the temperature variable from Celsius to Fahrenheit\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 8\n      }\n    }, \"here's the handy dandy formula: \\xB0F = \\xB0C * 9/5 + 32\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 7\n      }\n    }, \"create a double variable to store a temperature in Fahrenheit\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 7\n      }\n    }, \"print out what the temperature is in Celsius, using next-line printing\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 8\n      }\n    }, \"inside the print statement, you will need to convert the temperature variable from Fahrenheit to Celsius\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 8\n      }\n    }, \"here's the handy dandy formula: \\xB0C = (\\xB0F - 32) * 5/9\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 41\n      }\n    }, \"steps 2 and 4\"), \", if you forgot what next-line printing means, you can revisit the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 128\n      }\n    }, \"printing page\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 41\n      }\n    }, \"steps 2 and 4\"), \", whatever arithmetic you do can go inside the print statement, and the arithmetic will get performed first, and then the result will get printed out\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 210\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 215\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 5\n      }\n    }, \":) recap :)\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 5\n      }\n    }, \"gr8!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 10\n      }\n    }), \"here are the five arithmetic operations we learned about on this page along with their operators:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 10\n      }\n    }, \"addition\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 41\n      }\n    }, \"+\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 10\n      }\n    }, \"subtraction\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 44\n      }\n    }, \"-\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 10\n      }\n    }, \"multiplication\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 47\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 10\n      }\n    }, \"division\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 10\n      }\n    }, \"modulus\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 40\n      }\n    }, \"%\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 10\n      }\n    }), \"here is the blueprint for how the resulting variable type changes based on whether you are performing an operation between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 128\n      }\n    }, \"two integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 149\n      }\n    }, \"two doubles\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 172\n      }\n    }, \"an integer and a double\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 5\n      }\n    }, \"<integer>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 28\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 52\n      }\n    }, \"<integer>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 77\n      }\n    }, \"<integer>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 5\n      }\n    }, \"<double>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 27\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 51\n      }\n    }, \"<double>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 75\n      }\n    }, \"<double>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 5\n      }\n    }, \"<integer>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 28\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 52\n      }\n    }, \"<double>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 76\n      }\n    }, \"<double>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 5\n      }\n    }, \"<double>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 27\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 51\n      }\n    }, \"<integer>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 76\n      }\n    }, \"<double>\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 10\n      }\n    }), \"here is the blueprint for both the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 40\n      }\n    }, \"standard notation\"), \" and the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 73\n      }\n    }, \"shorthand notation\"), \" for performing an arithmetic operation on between \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 149\n      }\n    }, \"variable_1\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 171\n      }\n    }, \"variable_2\"), \", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 196\n      }\n    }, \"variable_1\"), \" stores the result of the operation and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 253\n      }\n    }, \"operator\"), \" can be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 276\n      }\n    }, \"+\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 286\n      }\n    }, \"-\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 296\n      }\n    }, \"*\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 306\n      }\n    }, \"/\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 319\n      }\n    }, \"%\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 8\n      }\n    }, \"<variable_1>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 36\n      }\n    }, \"<variable_1>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 62\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 86\n      }\n    }, \"<variable_2>\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 8\n      }\n    }, \"<variable_1>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 34\n      }\n    }, \"<operator>\"), \"= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 59\n      }\n    }, \"<variable_2>\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 10\n      }\n    }), \"and finally, if you want to increment or decrement a variable, you can use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 80\n      }\n    }, \"++\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 94\n      }\n    }, \"--\"), \", respectively.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Arithmetic;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Arithmetic.js"],"names":["React","Arithmetic","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Arithmetic extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\twe learned on the <b className=\"pageName\">variables page</b> how to create <b>integers</b> and <b>doubles</b>. on this page, we are going to use these two variable types in <b>arithmetic operations</b>. oooh, fancy right? not really. <b>arithmetic</b> is just a cool-sounding word for the study of numbers and operations on them, such as addition, subtraction, multiplication, and division. here are the <b>five operations</b> and their corresponding <b>operator symbols</b> that java provides:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>addition</b>, denoted using <b>+</b></li>\n\t\t\t\t\t<li><b>subtraction</b>, denoted using <b>-</b></li>\n\t\t\t\t\t<li><b>multiplication</b>, denoted using <b>*</b></li>\n\t\t\t\t\t<li><b>division</b>, denoted using <b>/</b></li>\n\t\t\t\t\t<li><b>modulus</b>, denoted using <b>%</b></li>\n\t\t\t\t</ul>\n\t\t\t\tyou can apply any of the arithmetic operations listed above between:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>two integers</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between two integers, then the resulting value is an <b>integer</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>two doubles</b></li>  \n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between two doubles, then the resulting value is an <b>double</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>an integer and a double</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between an integer and a double, no matter the order, then the resulting value is an <b>double</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</ul>\n\t\t\t\tnote how the <b>type of the result</b> after the operation changes depending on <b>what types the operation is in between</b>.\n\t\t\t\t<br/><br/>\n\t\t\t\tone last nuance... <b>order of operations</b>. in the order of operations in java, anything in <b>()</b> happens first, then <b>*</b>, <b>/</b>, and <b>%</b> happen from left to right, and finally <b>+</b> and <b>-</b> happen from left to right. here is a visual representation of the order of operations:\n\t\t\t\t<ol>\n\t\t\t\t\t<li>()</li>\n\t\t\t\t\t<li>* / %</li>\n\t\t\t\t\t<li>+ -</li>\n\t\t\t\t</ol>\n\t\t\t\tawesome! now let's discuss each arithmetic operation in greater detail!\n\t\t\t\t<h3>+ addition +</h3>\n\t\t\t\t<b>addition</b> is denoted using <b>+</b> in java. here are some examples of addition between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>1 + 1 = 2</li>\n\t\t\t\t\t<li>3.5 + 5.73 = 9.23</li>\n\t\t\t\t\t<li>7 + 1.0 = 8.0</li>\n\t\t\t\t\t<li>9.9 + 2 = 11.9</li>\n\t\t\t\t</ul>\n\t\t\t\there is the blueprint of the <b>standard notation</b> of adding another variable <i>i</i> to a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i> = <i>sum</i> + <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//add the tip to the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 13.99;\n\t\t\t\t<br/>\n\t\t\t\tdouble tip = 2.50;\n\t\t\t\t<br/>\n\t\t\t\tprice = price + tip;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthe <b>shorthand notation</b> for addition uses <b>+=</b>. here is the blueprint of the <b>shorthand notation</b> of adding another variable <i>i</i> to a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i> += <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//add the tip to the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 13.99;\n\t\t\t\t<br/>\n\t\t\t\tdouble tip = 2.50;\n\t\t\t\t<br/>\n\t\t\t\tprice += tip;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tif you want to <b>increment</b> a variable, there is actually a <b>shorthand of the shorthand notation</b> that we can use that automatically adds 1 to a variable using <b>++</b>. here is the blueprint of the <b>shorthand of the shorthand notation</b> of incrementing, or adding 1 to, a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> has already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i>++;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the standard notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum = num + 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum += 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the shorthand of the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum++;\n\t\t\t\t</div>\n\t\t\t\t<h3>- subtraction -</h3>\n\t\t\t\t<b>subtraction</b> is denoted using <b>-</b> in java. here are some examples of subtraction between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>1 - 4 = -3</li>\n\t\t\t\t\t<li>8.4 - 3.1 = 5.3</li>\n\t\t\t\t\t<li>22 - 0.001 = 21.999</li>\n\t\t\t\t\t<li>7.7 - 7 = 0.7</li>\n\t\t\t\t</ul>\n\t\t\t\there is the blueprint of the <b>standard notation</b> of subtracting another variable <i>i</i> from a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i> = <i>difference</i> - <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//subtract the discount from the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 22.84;\n\t\t\t\t<br/>\n\t\t\t\tdouble discount = 5.00;\n\t\t\t\t<br/>\n\t\t\t\tprice = price - discount;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthe <b>shorthand notation</b> for subtraction uses <b>-=</b>. here is the blueprint of the <b>shorthand notation</b> of subtracting another variable <i>i</i> from a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i> -= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//subtract the discount from the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 22.84;\n\t\t\t\t<br/>\n\t\t\t\tdouble discount = 5.00;\n\t\t\t\t<br/>\n\t\t\t\tprice -= discount;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tif you want to <b>decrement</b> a variable, there is actually a <b>shorthand of the shorthand notation</b> that we can use that automatically subtracts 1 from a variable using <b>--</b>. here is the blueprint of the <b>shorthand of the shorthand notation</b> of decrementing, or subtracting 1 from, a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> has already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i>++;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the standard notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum = num - 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum -= 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the shorthand of the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum--;\n\t\t\t\t</div>\n\t\t\t\t<h3>* multiplication *</h3>\n\t\t\t\t<b>multiplication</b> is denoted using <b>*</b> in java. here are some examples of multiplication between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>3 * 3 = 9</li>\n\t\t\t\t\t<li>1.5 * 0.7 = 1.05</li>\n\t\t\t\t\t<li>2 * 4.4 = 8.8</li>\n\t\t\t\t\t<li>9.1 * 6 = 54.6</li>\n\t\t\t\t</ul>\n\t\t\t\there is the blueprint of the <b>standard notation</b> of multiplying a variable <i>product</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>product</i> = <i>product</i> * <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//multiply the price per cookie by the number of cookies to get the total</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 4.99;\n\t\t\t\t<br/>\n\t\t\t\tint cookies = 5;\n\t\t\t\t<br/>\n\t\t\t\tprice = price * cookies;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthe <b>shorthand notation</b> for multiplication uses <b>*=</b>. here is the blueprint of the <b>shorthand notation</b> of multiplying a variable <i>product</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>product</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>product</i> *= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//multiply the price per cookie by the number of cookies to get the total</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 4.99;\n\t\t\t\t<br/>\n\t\t\t\tint cookies = 5;\n\t\t\t\t<br/>\n\t\t\t\tprice *= cookies;\n\t\t\t\t</div>\n\t\t\t\t<h3>/ division /</h3>\n\t\t\t\t<b>division</b> is denoted using <b>/</b> in java. division in java is <b>slightly different</b> from division in real life because, as we saw earlier, the result of an arithmetic operation between two integers is an integer itself. this means that <b>dividing two integers will result in an integer</b>. you most probably are thinking, \"okay. what's so bad about that?\" well, for example, what would <b>3 / 2</b> be equal to? in real life, we would say that <b>3 / 2 = 1.5</b>, but 1.5 is a <b>double</b>, and we need it to be an <b>int</b>. therefore, in java, <b>3 / 2 = 1</b> because 1.5 gets <b>rounded down</b> to 1. the quotient when you divide by two integers <b>always get rounded down to the nearest integer</b>. you can also think about it as <b>the decimal portion of the quotient gets truncated</b>. on the other hand, if you're performing division between two doubles or an integer and a double, as we said earlier the result should be a <b>double</b>, so the <b>decimal portion remains</b> in the quotient. here are some examples of division between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>9 / 4 = 2</li>\n\t\t\t\t\t<li>9.0 / 4.0 = 2.25</li>\n\t\t\t\t\t<li>9.0 / 4 = 2.25</li>\n\t\t\t\t\t<li>9 / 4.0 = 2.25</li>\n\t\t\t\t</ul>\n\t\t\t\there is the blueprint of the <b>standard notation</b> of dividing a variable <i>quotient</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>quotient</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>quotient</i> = <i>quotient</i> / <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//divide the total price by the number of people to split the price</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 84.99;\n\t\t\t\t<br/>\n\t\t\t\tint people = 10;\n\t\t\t\t<br/>\n\t\t\t\tprice = price / people;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthe <b>shorthand notation</b> for division uses <b>/=</b>. here is the blueprint of the <b>shorthand notation</b> of dividing a variable <i>quotient</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>quotient</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>quotient</i> /= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//divide the total price by the number of people to split the price</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 84.99;\n\t\t\t\t<br/>\n\t\t\t\tint people = 10;\n\t\t\t\t<br/>\n\t\t\t\tprice /= people;\n\t\t\t\t</div>\n\t\t\t\t<h3>% modulus %</h3>\n\t\t\t\t<b>modulus</b> is a funky word which means <b>the remainder after you divide two numbers</b> and is denoted using <b>%</b>. modulus is most commonly used <b>between integers</b>, since integer division as we just learned rounds down to the nearest integer, leaving a remainder behind. let's revisit the example we had when discussing integer division: <b>3 / 2</b>. we already know that <b>3 / 2 = 1</b>, but what about <b>3 % 2</b>? (<b className=\"note\">btw:</b> 3 % 2 is pronounced <b>\"three mod two\"</b>.) if you guessed <b>1</b>, you're correct! <b>3 % 2 = 1</b> because 3 / 2 is 1 <b>with a remainder of 1</b>. here are some more examples using modulus between integers:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>22 % 4 = 2 because 22 / 4 is 5 with a remainder of 2</li>\n\t\t\t\t\t<li>3 % 5 = 3 because 3 / 5 is 0 with a remainder of 3</li>\n\t\t\t\t\t<li>14 % 7 = 0 because 14 / 7 is 2 with a remainder of 0</li>\n\t\t\t\t</ul>\n\t\t\t\there is the blueprint of the <b>standard notation</b> of getting the remainder after dividing a variable <i>remainder</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>remainder</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>remainder</i> = <i>remainder</i> % <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//get the leftover apples after dividing apples between friends</div>\n\t\t\t\t<br/>\n\t\t\t\tint apples = 8;\n\t\t\t\t<br/>\n\t\t\t\tint friends = 5;\n\t\t\t\t<br/>\n\t\t\t\tapples = apples % friends;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthe <b>shorthand notation</b> for modulus uses <b>%=</b>. here is the blueprint of the <b>shorthand notation</b> of getting the remainder after dividing a variable <i>remainder</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>remainder</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>remainder</i> %= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//get the leftover apples after dividing apples between friends</div>\n\t\t\t\t<br/>\n\t\t\t\tint apples = 8;\n\t\t\t\t<br/>\n\t\t\t\tint friends = 5;\n\t\t\t\t<br/>\n\t\t\t\tapples %= friends;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tmodulus is often used to figure out if a certain integer is <b>divisible</b> by another integer. you might be wondering, <b>\"how can modulus be used in divisibility?\"</b> great question! let's dive into it!\n\t\t\t\t<br/>\n\t\t\t\tas we stated earlier, modulus represents the <b>remainder after dividing two integers</b>; in other words, modulus is the <b>leftover</b>. now for divisibility: if a number <i>x</i> is <b>divisible</b> by a number <i>y</i>, that means that <i>x</i><b>/</b><i>y</i> is an <b>integer</b>. in other words, the <b>remainder</b> when you divide <i>x</i> by <i>y</i> should be equal to <b>0</b>. have you connected the dots? <b>a number <i>x</i> is divisible by another number <i>y</i> when x % y = 0.</b> now let's translate this into lines of code:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//if an integer % 2 = 0, then the integer is even; otherwise, the integer is odd</div>\n\t\t\t\t<br/>\n\t\t\t\tint x = 8;\n\t\t\t\t<br/>\n\t\t\t\tint y = 2;\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(x % y);\n\t\t\t\t</div>\n\t\t\t\tbecause 8 is an even number, <b>0</b> should be printed to the console. let's take a look:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t0\n\t\t\t\t</div>\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\tmake variables for the price of everything you buy at a shop. add up every price. multiply by tax. print out total price.\n\t\t\t\talso temp conversion\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">slope:</b><br/><br/>\n\t\t\t\t\tthrowback to math class... the slope of a line connecting two points (x1, y1) and (x2, y2) is (y2-y1)/(x2-x1). your <b>goal</b> is to use <b>arithmetic</b> to <b>calculate the slope given the two points (x1, y1) and (x2, y2)</b>. this will require three steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>store the two points (x1, y1) and (x2, y2) in variables</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>to store a point in our program, we will create two variables: one for the x-coordinate and one for the y-coordinate</li>\n\t\t\t\t\t\t\t<li>that means that, in total, there should be four variables: x1, y1, x2, and y2</li>\n\t\t\t\t\t\t\t<li>each of these variables will be a double, since they can store a decimal</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>calculate the slope of the line connecting (x1, y1) and (x2, y2)</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>here's the formula: slope = (y2-y1)/(x2-x1)</li>\n\t\t\t\t\t\t\t<li>store the slope in a double variable</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>print out the slope variable</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, if you forgot what printing is or how to print a variable, you can revisit the <b className=\"pageName\">printing page</b><br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">slope:</b><br/><br/>\n\t\t\t\t\tthrowback to math class... the slope of a line connecting two points (x1, y1) and (x2, y2) is (y2-y1)/(x2-x1). your <b>goal</b> is to use <b>arithmetic</b> to <b>calculate the slope given the two points (x1, y1) and (x2, y2)</b>. this will require three steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>store the two points (x1, y1) and (x2, y2) in variables</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>to store a point in our program, we will create two variables: one for the x-coordinate and one for the y-coordinate</li>\n\t\t\t\t\t\t\t<li>that means that, in total, there should be four variables: x1, y1, x2, and y2</li>\n\t\t\t\t\t\t\t<li>each of these variables will be a double, since they can store a decimal</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>calculate the slope of the line connecting (x1, y1) and (x2, y2)</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>here's the formula: slope = (y2-y1)/(x2-x1)</li>\n\t\t\t\t\t\t\t<li>store the slope in a double variable</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>print out the slope variable</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, if you forgot what printing is or how to print a variable, you can revisit the <b className=\"pageName\">printing page</b><br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">temperature convertor:</b><br/><br/>\n\t\t\t\t\thow can we convert between Celsius and Fahrenheit? your <b>goal</b> is to use <b>arithmetic</b> to <b>convert a temperature from °C to °F</b> and to <b>convert a temperature from °F to °C</b>. this will require four steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a double variable to store a temperature in Celsius</li>\n\t\t\t\t\t\t<li>print out what the temperature is in Fahrenheit, using next-line printing</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>inside the print statement, you will need to convert the temperature variable from Celsius to Fahrenheit</li>\n\t\t\t\t\t\t\t<li>here's the handy dandy formula: °F = °C * 9/5 + 32</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>create a double variable to store a temperature in Fahrenheit</li>\n\t\t\t\t\t\t<li>print out what the temperature is in Celsius, using next-line printing</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>inside the print statement, you will need to convert the temperature variable from Fahrenheit to Celsius</li>\n\t\t\t\t\t\t\t<li>here's the handy dandy formula: °C = (°F - 32) * 5/9</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>steps 2 and 4</b>, if you forgot what next-line printing means, you can revisit the <b className=\"pageName\">printing page</b><br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>steps 2 and 4</b>, whatever arithmetic you do can go inside the print statement, and the arithmetic will get performed first, and then the result will get printed out<br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/arithmetic-slope-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<h3>:) recap :)</h3>\n\t\t\t\t<b>gr8!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\there are the five arithmetic operations we learned about on this page along with their operators:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>addition</b>, denoted using <b>+</b></li>\n\t\t\t\t\t<li><b>subtraction</b>, denoted using <b>-</b></li>\n\t\t\t\t\t<li><b>multiplication</b>, denoted using <b>*</b></li>\n\t\t\t\t\t<li><b>division</b>, denoted using <b>/</b></li>\n\t\t\t\t\t<li><b>modulus</b>, denoted using <b>%</b></li>\n\t\t\t\t</ul>\n\t\t\t\t<br/><br/>\n\t\t\t\there is the blueprint for how the resulting variable type changes based on whether you are performing an operation between <b>two integers</b>, <b>two doubles</b>, or <b>an integer and a double</b>:\n\t\t\t\t<br/>\n\t\t\t\t<b>\n\t\t\t\t<i>&lt;integer&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;integer&gt;</i> = <i>&lt;integer&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;double&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;double&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;integer&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;double&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;double&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;integer&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t</b>\n\t\t\t\t<br/><br/>\n\t\t\t\there is the blueprint for both the <b>standard notation</b> and the <b>shorthand notation</b> for performing an arithmetic operation on between <i>variable_1</i> and <i>variable_2</i>, where <i>variable_1</i> stores the result of the operation and <i>operator</i> can be <b>+</b>, <b>-</b>, <b>*</b>, <b>/</b>, or <b>%</b>:\n\t\t\t\t<br/>\n\t\t\t\t<b><i>&lt;variable_1&gt;</i> = <i>&lt;variable_1&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;variable_2&gt;</i>;</b>\n\t\t\t\t<br/>\n\t\t\t\t<b><i>&lt;variable_1&gt;</i> <i>&lt;operator&gt;</i>= <i>&lt;variable_2&gt;</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tand finally, if you want to increment or decrement a variable, you can use <b>++</b> and <b>--</b>, respectively.\n\t\t\t\t<br/><br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Arithmetic;"]},"metadata":{},"sourceType":"module"}