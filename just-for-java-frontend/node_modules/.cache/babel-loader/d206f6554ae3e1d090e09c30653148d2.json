{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Strings.js\";\nimport React from 'react';\n\nclass Strings extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 4\n      }\n    }, \"As we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 26\n      }\n    }, \"variables page\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 70\n      }\n    }, \"Strings\"), \" are used to store text and are denoted using double quotation marks. Strings are different from the other variable types that we have learned about so far \\u2013 integers, doubles, characters, booleans. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 284\n      }\n    }, \"btw:\"), \" the difference you may have noticed is that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 357\n      }\n    }, \"String\"), \" has a capital first letter whereas \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 406\n      }\n    }, \"int\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 418\n      }\n    }, \"double\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 433\n      }\n    }, \"char\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 450\n      }\n    }, \"boolean\"), \" are all lowercase.) Strings are special, and that's why we've dedicated a whole page to them!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    }, \"hello world\"), \"primitive types\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }\n    }, \"h e l l o w o r l d\"), \"let's redefine what a String is: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 38\n      }\n    }, \"a String is just a bunch of characters\"), \". this means that we can extract specific characters in a String.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }), \"we can access characters in a String through their \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 56\n      }\n    }, \"indexes\"), \". indexing is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 86\n      }\n    }, \"numbering system that starts at 0\"), \". not at 1. at 0. we cannot emphasize that enough. each character in a String has an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 211\n      }\n    }, \"index\"), \", or a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 230\n      }\n    }, \"number describing its position in the String\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }), \"here are the indexes of each character in the classic String \\\"hello world\\\":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"'h'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, \"'e'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"'w'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"'r'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, \"'d'\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"10\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }\n    }), \"the index of 'h' is 0, the index of 'e' is 1, the index of the first 'l' is 2, the index of the second 'l' is 3, and so on... (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 132\n      }\n    }, \"btw:\"), \" characters have single quotes around them while Strings have double quotes around them)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }, \"h\"), \"now that you understand \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 29\n      }\n    }, \"indexing\"), \" \\u2013 a fundamental concept that will become important again in later topics \\u2013 let's take a look at the blueprint explaining how to access characters in a String using their indexes (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 224\n      }\n    }, \"btw:\"), \" let's assume that we have already created a String variable called \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 320\n      }\n    }, \"str\"), \"):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }, \"str.charAt(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, \"<index>\"), \")\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 10\n      }\n    }), \"let's see \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }\n    }, \"charAt()\"), \" in action!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }, \"String bestWebsite = \\\"just for java\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }), \"char u = bestWebsite.charAt(1);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }), \"char t = bestWebsite.charAt(3);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }), \"char r = bestWebsite.charAt(7);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"char v = bestWebsite.charAt(11);\"), \"still confused? don't worry! let's take a look at the indexes of each character in \\\"just for java\\\":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"'j'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"'u'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"'s'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"'t'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"'f'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"'r'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"'j'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"'a'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"'v'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"'a'\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"10\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"11\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"12\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }), \"the index of 'u' is 1, the index of 't' is 3, the index of 'r' is 7, and the index of 'v' is 11. by putting the proper index between the parentheses in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 157\n      }\n    }, \"charAt()\"), \", we can extract the character in \\\"just for java\\\" at that index.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }), \"pretty cool, eh? but things get cooler when you can extract more than just a character from a String... onward!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, \"hello wo\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"11\"), \"Strings have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 18\n      }\n    }, \"length\"), \", and their length is equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 66\n      }\n    }, \"number of characters\"), \" in the String. for example, \\\"hello world\\\" has a length of 11 (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 156\n      }\n    }, \"btw:\"), \" spaces count as characters). but rather than counting how many characters are in a String, we can just use the following syntax to get the length of a String:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, \"String funFact = \\\"did you know that squash is a sport?\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }, \"//get the length of the fun fact using length()\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }), \"int funFactLen = funFact.length(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 40\n      }\n    }, \"//funFactLen is initialized to 36\")), \"awesome! now you know how to get the length of a String using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 67\n      }\n    }, \"length()\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }, \"HELLO world\"), \"next, let's learn how to make \\\"heLlO woRlD\\\" into \\\"hello world\\\" or \\\"HELLO WORLD\\\". in other words, let's learn how to make a String all \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 139\n      }\n    }, \"lowercase\"), \" or all \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 163\n      }\n    }, \"UPPERCASE\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }\n    }), \"You can use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }, \"toLowerCase()\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 42\n      }\n    }, \"toUpperCase()\"), \" to make a String all lowercase or all UPPERCASE, respectively:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }, \"String myStr = \\\"we LOVE Strings!\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }\n    }), \"String myLowerCaseStr = myStr.toLowerCase(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 50\n      }\n    }, \"//make myStr all lowercase\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    }), \"String myUpperCaseStr = myStr.toUpperCase(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 50\n      }\n    }, \"//make myStr all uppercase\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }\n    }, \"//print out the lowercase and uppercase versions of myStr\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }), \"System.out.println(myLowerCaseStr);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }), \"System.out.println(myUpperCaseStr);\"), \"the code above prints out the following in the console (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 61\n      }\n    }, \"psst. need a reminder\"), \" on why \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 114\n      }\n    }, \"System.out.println()\"), \" outputs something to the console? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 190\n      }\n    }, \"printing page\"), \"!):\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }, \"we love strings!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }), \"WE LOVE STRINGS!\"), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }\n    }, \"btw:\"), \" numbers and symbols, like the exclamation mark above, do not get affected by \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 112\n      }\n    }, \"toLowerCase()\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 137\n      }\n    }, \"toUpperCase()\"), \".)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }\n    }, \"hello + world\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 5\n      }\n    }, \"hello world... more like hello recap\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }\n    }, \"YASSS!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Strings;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Strings.js"],"names":["React","Strings","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Strings extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tAs we learned on the <b className=\"pageName\">variables page</b>, <b>Strings</b> are used to store text and are denoted using double quotation marks. Strings are different from the other variable types that we have learned about so far – integers, doubles, characters, booleans. (<b className=\"note\">btw:</b> the difference you may have noticed is that <b>String</b> has a capital first letter whereas <b>int</b>, <b>double</b>, <b>char</b>, and <b>boolean</b> are all lowercase.) Strings are special, and that's why we've dedicated a whole page to them!\n\t\t\t\t<h3>hello world</h3>\n\t\t\t\tprimitive types\n\t\t\t\t<h3>h e l l o w o r l d</h3>\n\t\t\t\tlet's redefine what a String is: <b>a String is just a bunch of characters</b>. this means that we can extract specific characters in a String.\n\t\t\t\t<br/>\n\t\t\t\twe can access characters in a String through their <b>indexes</b>. indexing is a <b>numbering system that starts at 0</b>. not at 1. at 0. we cannot emphasize that enough. each character in a String has an <b>index</b>, or a <b>number describing its position in the String</b>. \n\t\t\t\t<br/>\n\t\t\t\there are the indexes of each character in the classic String \"hello world\":\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>'h'</td>\n\t\t\t\t    <td>'e'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'w'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>'r'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'d'</td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>0</td>\n\t\t\t\t    <td>1</td>\n\t\t\t\t    <td>2</td>\n\t\t\t\t    <td>3</td>\n\t\t\t\t    <td>4</td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td>6</td>\n\t\t\t\t    <td>7</td>\n\t\t\t\t    <td>8</td>\n\t\t\t\t    <td>9</td>\n\t\t\t\t    <td>10</td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br />\n\t\t\t\tthe index of 'h' is 0, the index of 'e' is 1, the index of the first 'l' is 2, the index of the second 'l' is 3, and so on... (<b className=\"note\">btw:</b> characters have single quotes around them while Strings have double quotes around them)\n\t\t\t\t<h3>h</h3>\n\t\t\t\tnow that you understand <b>indexing</b> – a fundamental concept that will become important again in later topics – let's take a look at the blueprint explaining how to access characters in a String using their indexes (<b className=\"note\">btw:</b> let's assume that we have already created a String variable called <i>str</i>):\n\t\t\t\t<br/>\n\t\t\t\t<b>str.charAt(<i>&lt;index&gt;</i>)</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tlet's see <b>charAt()</b> in action!\n\t\t\t\t<div className=\"code\"> \n\t\t\t\tString bestWebsite = \"just for java\";\n\t\t\t\t<br/>\n\t\t\t\tchar u = bestWebsite.charAt(1);\n\t\t\t\t<br/>\n\t\t\t\tchar t = bestWebsite.charAt(3);\n\t\t\t\t<br/>\n\t\t\t\tchar r = bestWebsite.charAt(7);\n\t\t\t\t<br/>\n\t\t\t\tchar v = bestWebsite.charAt(11);\n\t\t\t\t</div>\n\t\t\t\tstill confused? don't worry! let's take a look at the indexes of each character in \"just for java\":\n\t\t\t\t<br/><br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>'j'</td>\n\t\t\t\t    <td>'u'</td>\n\t\t\t\t    <td>'s'</td>\n\t\t\t\t    <td>'t'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'f'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>'r'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'j'</td>\n\t\t\t\t    <td>'a'</td>\n\t\t\t\t    <td>'v'</td>\n\t\t\t\t    <td>'a'</td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>0</td>\n\t\t\t\t    <td>1</td>\n\t\t\t\t    <td>2</td>\n\t\t\t\t    <td>3</td>\n\t\t\t\t    <td>4</td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td>6</td>\n\t\t\t\t    <td>7</td>\n\t\t\t\t    <td>8</td>\n\t\t\t\t    <td>9</td>\n\t\t\t\t    <td>10</td>\n\t\t\t\t    <td>11</td>\n\t\t\t\t    <td>12</td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br/>\n\t\t\t\tthe index of 'u' is 1, the index of 't' is 3, the index of 'r' is 7, and the index of 'v' is 11. by putting the proper index between the parentheses in <b>charAt()</b>, we can extract the character in \"just for java\" at that index. \n\t\t\t\t<br/>\n\t\t\t\tpretty cool, eh? but things get cooler when you can extract more than just a character from a String... onward!\n\t\t\t\t<h3>hello wo</h3>\n\t\t\t\t<h3>11</h3>\n\t\t\t\tStrings have <b>length</b>, and their length is equal to the <b>number of characters</b> in the String. for example, \"hello world\" has a length of 11 (<b className=\"note\">btw:</b> spaces count as characters). but rather than counting how many characters are in a String, we can just use the following syntax to get the length of a String:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString funFact = \"did you know that squash is a sport?\";\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//get the length of the fun fact using length()</div>\n\t\t\t\t<br/>\n\t\t\t\tint funFactLen = funFact.length(); <div className=\"comment\">//funFactLen is initialized to 36</div>\n\t\t\t\t</div>\n\t\t\t\tawesome! now you know how to get the length of a String using <b>length()</b>.\n\t\t\t\t<h3>HELLO world</h3>\n\t\t\t\tnext, let's learn how to make \"heLlO woRlD\" into \"hello world\" or \"HELLO WORLD\". in other words, let's learn how to make a String all <b>lowercase</b> or all <b>UPPERCASE</b>.\n\t\t\t\t<br/>\n\t\t\t\tYou can use <b>toLowerCase()</b> and <b>toUpperCase()</b> to make a String all lowercase or all UPPERCASE, respectively:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString myStr = \"we LOVE Strings!\";\n\t\t\t\t<br/>\n\t\t\t\tString myLowerCaseStr = myStr.toLowerCase(); <div className=\"comment\">//make myStr all lowercase</div>\n\t\t\t\t<br/>\n\t\t\t\tString myUpperCaseStr = myStr.toUpperCase(); <div className=\"comment\">//make myStr all uppercase</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//print out the lowercase and uppercase versions of myStr</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(myLowerCaseStr);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(myUpperCaseStr);\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console (<b className=\"note\">psst. need a reminder</b> on why <b>System.out.println()</b> outputs something to the console? check out the <b className=\"pageName\">printing page</b>!):\n\t\t\t\t<div className=\"code\">\n\t\t\t\twe love strings!\n\t\t\t\t<br/>\n\t\t\t\tWE LOVE STRINGS!\n\t\t\t\t</div>\n\t\t\t\t(<b className=\"note\">btw:</b> numbers and symbols, like the exclamation mark above, do not get affected by <b>toLowerCase()</b> and <b>toUpperCase()</b>.)\n\t\t\t\t<h3>hello + world</h3>\n\t\t\t\t<h3>hello world... more like hello recap</h3>\n\t\t\t\t<b>YASSS!</b> you made it to recap!\n\t\t\t\t<br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Strings;"]},"metadata":{},"sourceType":"module"}