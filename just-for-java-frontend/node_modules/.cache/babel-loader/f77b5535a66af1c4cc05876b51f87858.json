{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Functions.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Functions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), \"so far, all of the code that we've been writing has been inside this thingy called the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 101\n      }\n    }, \"main method\"), \", which \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 127\n      }\n    }, \"automatically runs when you run your code\"), \":\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 59\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, \"//this is where we've always typed our code\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }\n    }), \"}\"), \"but what does \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 28\n      }\n    }, \"public static void(String[] args)\"), \" even mean? it just seems like some funky technical jargon right now. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 138\n      }\n    }, \"well it ain't.\"), \" and our goal on this page is for you to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 200\n      }\n    }, \"understand every single word in the main method header\"), \". ready for something fun and fresh? let's do this bro.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }\n    }, \"woah bro hold your horses;\\xA0what even is a method?\"), \"before we \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }\n    }, \"giddy-up\"), \" into the details of functions, let's first understand what they are and why they are useful to us. a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 141\n      }\n    }, \"function\"), \" \\u2013 you can also interchangeably call this a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 200\n      }\n    }, \"method\"), \" \\u2013\\xA0is a block of code that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 240\n      }\n    }, \"only runs when it is called\"), \". all functions have two parts:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, \"header\"), \" \\u2013\\xA0this defines a function and its input and output, if any\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }, \"body\"), \" \\u2013 whatever is inside the function, or in between the curly braces\")), \"so the main method is simply a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 45\n      }\n    }, \"function\"), \" that is automatically called when you click the run button! all the code we have been typing so far has been going into the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 185\n      }\n    }, \"body\"), \" of the main method, and public static void(String[] args) is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 262\n      }\n    }, \"header\"), \" of the main method!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }, \"what's the point of functions anyway bro?\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }\n    }, \"functions are useful because they allow you to reuse code.\"), \" what this means is that if you want a particular action to be run more than once, rather than copying the code in all the places you need it, you can simply put in into a function and call the function wherever you need it!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, \"functions also make your code more organized.\"), \" you can put specific code into functions, even if you only call the function once, so that not everything is stuffed into the main method.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    }, \"is it time to code now bro?\"), \"yessir! we are first going to focus on the different components of a function header, as that is what defines a function. let's take a look at the blueprint of a function header:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }\n    }, \"public static \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 36\n      }\n    }, \"<return type>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 63\n      }\n    }, \"<function name>\"), \"(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 92\n      }\n    }, \"<parameters>\"), \") {\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 129\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }\n    }, \"}\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }\n    }, \"bro, do i have to write \\\"public static\\\" in front of every function?\"), \"the short answer: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 32\n      }\n    }, \"yes, for now.\"), \" we will discuss what the keywords \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 87\n      }\n    }, \"public\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 105\n      }\n    }, \"static\"), \" mean in the future, but for now, include them in every function header. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 192\n      }\n    }, \"btw:\"), \" even the main method has public static in front of it!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }, \"k thx bro. what's next?\"), \"function name. pretty self-explanatory. it's just the name that you give a function. and it's what you call a function by. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 138\n      }\n    }, \"btw:\"), \" we will talk in detail about how to call a function very very soon!!) can you guess what the name of the main method is? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 288\n      }\n    }, \"main\"), \"!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }\n    }, \"ay that was a simple one bro. im guessing the next component is more complicated?\"), \"hehe you guessed right! but we'll break it down for you so it's easier to understand. here's the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 111\n      }\n    }, \"big picture\"), \": functions have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 146\n      }\n    }, \"input\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 163\n      }\n    }, \"output\"), \". input is what a function takes in and output is what a function spits out. now let's learn some \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 274\n      }\n    }, \"fancy function terminology\"), \" that we use to describe input and output:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, \"parameter\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"return\")), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }\n    }, \"parameter\"), \" is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 38\n      }\n    }, \"value that you pass into a function\"), \" \\u2013\\xA0anything that your function needs as an input. a function can have no parameters, one parameter, or multiple parameters \\u2013\\xA0it's up to you! you declare all of the parameters that are being passed into your function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 296\n      }\n    }, \"inside the parentheses after the function name\"), \". if you aren't passing any parameters, simply write \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 402\n      }\n    }, \"()\"), \". if you are passing multiple parameters, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 453\n      }\n    }, \"separate them by commas\"), \". each parameter has both a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 511\n      }\n    }, \"type\"), \", such as int, double, String, etc., and a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 565\n      }\n    }, \"name\"), \", which is what you will reference the parameter by when you use it in the body of your function.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }\n    }), \"finally, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }\n    }, \"return type\"), \" is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 50\n      }\n    }, \"type of the value that your function returns\"), \". just as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 111\n      }\n    }, \"passing a parameter into a function = input\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 163\n      }\n    }, \"returning a value in your function = output\"), \". the return type can be int, double, String, etc.; however, what if you don't want to return anything from your function? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 336\n      }\n    }, \"if you aren't returning anything from your function, then the return type is void\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }\n    }), \"function that prints \\\"howdy, partner!\\\"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"function that prints \\\"howdy, [name]!\\\"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), \"function that returns String \\\"howdy, [name]!\\\"\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }\n    }, \"public static void recap() {\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }\n    }, \"yeehaw bro!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 59\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Functions;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Functions.js"],"names":["React","ProgressUpdater","Hint","Functions","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Functions extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            so far, all of the code that we've been writing has been inside this thingy called the <b>main method</b>, which <b>automatically runs when you run your code</b>:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;<br/>\n\t            <p><div className=\"comment\">//this is where we've always typed our code</div></p>\n\t            <br/>&#125;\n\t            </div>\n\t            but what does <b>public static void(String[] args)</b> even mean? it just seems like some funky technical jargon right now. <b>well it ain't.</b> and our goal on this page is for you to <b>understand every single word in the main method header</b>. ready for something fun and fresh? let's do this bro.\n\t            <h3>woah bro hold your horses; what even is a method?</h3>\n\t            before we <b>giddy-up</b> into the details of functions, let's first understand what they are and why they are useful to us. a <b>function</b> – you can also interchangeably call this a <b>method</b> – is a block of code that <b>only runs when it is called</b>. all functions have two parts:\n\t            <ol>\n\t            \t<li><b>header</b> – this defines a function and its input and output, if any</li>\n\t            \t<li><b>body</b> – whatever is inside the function, or in between the curly braces</li>\n\t            </ol>\n\t            so the main method is simply a <b>function</b> that is automatically called when you click the run button! all the code we have been typing so far has been going into the <b>body</b> of the main method, and public static void(String[] args) is the <b>header</b> of the main method!\n\t            <h3>what's the point of functions anyway bro?</h3>\n\t            <b>functions are useful because they allow you to reuse code.</b> what this means is that if you want a particular action to be run more than once, rather than copying the code in all the places you need it, you can simply put in into a function and call the function wherever you need it!\n\t            <br/>\n\t            <b>functions also make your code more organized.</b> you can put specific code into functions, even if you only call the function once, so that not everything is stuffed into the main method.\n\t            <h3>is it time to code now bro?</h3>\n\t            yessir! we are first going to focus on the different components of a function header, as that is what defines a function. let's take a look at the blueprint of a function header:\n\t            <br/><b>public static <i>&lt;return type&gt;</i> <i>&lt;function name&gt;</i>(<i>&lt;parameters&gt;</i>) &#123;</b><br/>\n\t            <b>&#125;</b>\n\t            <h3>bro, do i have to write \"public static\" in front of every function?</h3>\n\t            the short answer: <b>yes, for now.</b> we will discuss what the keywords <b>public</b> and <b>static</b> mean in the future, but for now, include them in every function header. (<b className=\"note\">btw:</b> even the main method has public static in front of it!)\n\t            <h3>k thx bro. what's next?</h3>\n\t            function name. pretty self-explanatory. it's just the name that you give a function. and it's what you call a function by. (<b className=\"note\">btw:</b> we will talk in detail about how to call a function very very soon!!) can you guess what the name of the main method is? <b>main</b>!\n\t            <h3>ay that was a simple one bro. im guessing the next component is more complicated?</h3>\n\t            hehe you guessed right! but we'll break it down for you so it's easier to understand. here's the <b>big picture</b>: functions have <b>input</b> and <b>output</b>. input is what a function takes in and output is what a function spits out. now let's learn some <b>fancy function terminology</b> that we use to describe input and output:\n\t            <ul>\n\t            \t<li>parameter</li>\n\t            \t<li>return</li>\n\t            </ul>\n\t            a <b>parameter</b> is a <b>value that you pass into a function</b> – anything that your function needs as an input. a function can have no parameters, one parameter, or multiple parameters – it's up to you! you declare all of the parameters that are being passed into your function <b>inside the parentheses after the function name</b>. if you aren't passing any parameters, simply write <b>()</b>. if you are passing multiple parameters, <b>separate them by commas</b>. each parameter has both a <b>type</b>, such as int, double, String, etc., and a <b>name</b>, which is what you will reference the parameter by when you use it in the body of your function.\n\t            <br/><br/>\n\t        \tfinally, the <b>return type</b> is the <b>type of the value that your function returns</b>. just as <b>passing a parameter into a function = input</b>, <b>returning a value in your function = output</b>. the return type can be int, double, String, etc.; however, what if you don't want to return anything from your function? <b>if you aren't returning anything from your function, then the return type is void</b>.\n\t            <br/>\n\t            function that prints \"howdy, partner!\"\n\t\t\t\t<br/>\n\t            function that prints \"howdy, [name]!\"\n\t\t\t\t<br/>\n\t            function that returns String \"howdy, [name]!\"\n\t            <h3>public static void recap() &#123;</h3>\n\t            <b>yeehaw bro!</b> you made it to recap!<br/><br/>\n\t            <h3>pit stop</h3>\n\t            <br/>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Functions;"]},"metadata":{},"sourceType":"module"}