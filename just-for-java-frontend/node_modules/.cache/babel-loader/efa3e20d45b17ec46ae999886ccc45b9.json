{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Printing.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Printing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, \"printing\"), \" is used to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 32\n      }\n    }, \"display information in the console\"), \". this is how we \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 90\n      }\n    }, \"output\"), \" anything to the user, and is a great way to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 148\n      }\n    }, \"check if your code is working\"), \" properly.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 194\n      }\n    }), \"there are two types of printing statements:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 48\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 6\n      }\n    }, \"same-line printing\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 6\n      }\n    }, \"next-line printing\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you print something?\"), \"here is the blueprint for same-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 50\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, \"<information>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }\n    }), \"and here is the blueprint for next-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 27\n      }\n    }, \"<information>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"ok, but what's the difference between the two?\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, \"same-line printing\"), \" prints information without a line break. for example, if you were to type:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\\\"I like pizza. \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 41\n      }\n    }), \"System.out.print(\\\"What about you?\\\");\"), \"it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, \"I like food. What about you?\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }), \"meanwhile, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 16\n      }\n    }, \"next-line printing\"), \" prints information with a line break. for example, if you were to type:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\\\"I like pizza. \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 43\n      }\n    }), \"System.out.println(\\\"What about you?\\\");\"), \"it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }\n    }, \"I like food. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    }), \"What about you?\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"so what else can you print?\"), \"the sky's the limit with printing! the previous example showed you how to print \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 85\n      }\n    }, \"Strings\"), \", but you can also print \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 124\n      }\n    }, \"characters\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 143\n      }\n    }, \"integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 160\n      }\n    }, \"doubles\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 179\n      }\n    }, \"booleans\"), \". take a look at the code below and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 230\n      }\n    }, \"predict\"), \" what is outputed in the console! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 279\n      }\n    }, \"hint:\"), \" notice whether the code uses same-line or next-line printing.)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }, \"//print out a character, an integer, a double, and a boolean\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), \"System.out.println('$');\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }), \"System.out.println(13);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }), \"System.out.println(66.6666);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }), \"System.out.println(false);\"), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on what that first line of code is with the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 96\n      }\n    }, \"//\"), \" symbol? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 128\n      }\n    }, \"comments page\"), \"!)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 10\n      }\n    }), \"have a prediction in mind? awesome. it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, \"$\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }), \"13\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }), \"66.6666\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }), \"false\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, \"cool! anything else?\"), \"in fact, yes! just one more thing. you can also print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 63\n      }\n    }, \"variables\"), \" by putting the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 95\n      }\n    }, \"variable name\"), \" in between the parentheses of the print statement. here is the blueprint for printing a variable using both same-line and next-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 257\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, \"<name>\"), \");\"), \" or\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 27\n      }\n    }, \"<name>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 57\n      }\n    }), \"let's do a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }\n    }, \"coding exercise\"), \" to practice printing variables! create a variable of any type you want and print it out. then change the value of the variable and print it out again. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 191\n      }\n    }, \"psst. need a reminder\"), \" on how to initialize a variable and change its value? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 305\n      }\n    }, \"variables page\"), \"!)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }), \"here is some example code similar to what you may have:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }\n    }, \"//create a boolean variable, initialize it to false, and print it out using next-line printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }), \"boolean understandsPrinting = false;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }), \"System.out.println(understandsPrinting);\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }, \"//change the value of the boolean variable to true, and print it out using next-line printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }\n    }), \"understandsPrinting = true;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }\n    }), \"System.out.println(understandsPrinting);\"), \"and it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"false\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }), \"true\"), \"awesome! as the code above says, you now understand printing!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\\\"is it time for recap?\\\");\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, \"yup!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 43\n      }\n    }), \"remember, there are two types of printing: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 48\n      }\n    }, \"same-line printing\"), \", which is you can do by typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 105\n      }\n    }, \"System.out.print();\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, \"next-line printing\"), \", which you can do by typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 63\n      }\n    }, \"System.out.println();\"), \". both of these print statements print information into the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 63\n      }\n    }, \"console\"), \". \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 79\n      }\n    }), \"you can print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 23\n      }\n    }, \"Strings\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 39\n      }\n    }, \"characters\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 58\n      }\n    }, \"integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 75\n      }\n    }, \"doubles\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 95\n      }\n    }, \"booleans\"), \". finally, you can also print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 144\n      }\n    }, \"variables\"), \" by putting the variable name in between the parentheses of the print statement.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 6\n      }\n    }, \"envelope:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 44\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 33\n      }\n    }, \"printing\"), \" to display \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 60\n      }\n    }, \"what would be written on an evnelope addressed to you\"), \" using the two printing methods we just learned. this will require five steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 35\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, \"first, you will create a variable to store your first name\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 7\n      }\n    }, \"next, you will create a variable to store your last name\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, \"after that, you will create a variable to store your street address, what would be the second line on an envelope addressed to you\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, \"next, you will create a variable to store the city, state / region / province, country, and zipcode what would be the third line on an envelope addressed to you\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, \"now, you are going to print out all of these components to make it look as though it would be written on an envelope addressed to you\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 8\n      }\n    }, \"normally, an envelope addressed to you would have your first and last name on the first line, your street address on the second, and your city, state / region / province, country, and zipcode on the third\"))), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for steps 1-4, because these are storing text, you would want to use Strings as your variable type\", \"for step 5, if you need to print your name on one line, what type of printing would you need to use for the first line? maybe single-line? and if you need to print the other parts on separate lines, what type of printing would that be? maybe multi-line? hmmm...\"],\n      id: \"printing-envelope\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/printing-envelope?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 6\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 48\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 62\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks similar to ours \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 48\n      }\n    }, \":)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/printing-envelope-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Printing;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Printing.js"],"names":["React","ProgressUpdater","Hint","Printing","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Printing extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t\t\t\t<b>printing</b> is used to <b>display information in the console</b>. this is how we <b>output</b> anything to the user, and is a great way to <b>check if your code is working</b> properly.<br/>\n\t\t\t\tthere are two types of printing statements:<br/>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>same-line printing</li>\n\t\t\t\t\t<li>next-line printing</li>\n\t\t\t\t</ul>\n\t\t\t\t<h3>wait, so how do you print something?</h3>\n\t\t\t\there is the blueprint for same-line printing:<br/>\n\t\t\t\t<b>System.out.print(<i>&lt;information&gt;</i>);</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tand here is the blueprint for next-line printing:<br/>\n\t\t\t\t<b>System.out.println(<i>&lt;information&gt;</i>);</b>\n\t\t\t\t<br/>\n\t\t\t\t<h3>ok, but what's the difference between the two?</h3>\n\t\t\t\t<b>same-line printing</b> prints information without a line break. for example, if you were to type:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tSystem.out.print(\"I like pizza. \");<br/>\n\t\t\t\t\tSystem.out.print(\"What about you?\");\n\t\t\t\t</div>\n\t\t\t\tit would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tI like food. What about you?\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tmeanwhile, <b>next-line printing</b> prints information with a line break. for example, if you were to type:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tSystem.out.println(\"I like pizza. \");<br/>\n\t\t\t\t\tSystem.out.println(\"What about you?\");\n\t\t\t\t</div>\n\t\t\t\tit would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tI like food. <br/>\n\t\t\t\t\tWhat about you?\n\t\t\t\t</div>\n\t\t\t\t<h3>so what else can you print?</h3>\n\t\t\t\tthe sky's the limit with printing! the previous example showed you how to print <b>Strings</b>, but you can also print <b>characters</b>, <b>integers</b>, <b>doubles</b>, or <b>booleans</b>. take a look at the code below and <b>predict</b> what is outputed in the console! (<b className=\"note\">hint:</b> notice whether the code uses same-line or next-line printing.)\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//print out a character, an integer, a double, and a boolean</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println('$');\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(13);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(66.6666);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(false);\n\t\t\t\t</div>\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on what that first line of code is with the <b>//</b> symbol? check out the <b className=\"pageName\">comments page</b>!)\n\t\t\t\t<br/><br/>\n\t\t\t\thave a prediction in mind? awesome. it would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t$\n\t\t\t\t<br/>\n\t\t\t\t13\n\t\t\t\t<br/>\n\t\t\t\t66.6666\n\t\t\t\t<br/>\n\t\t\t\tfalse\n\t\t\t\t</div>\n\t\t\t\t<h3>cool! anything else?</h3>\n\t\t\t\tin fact, yes! just one more thing. you can also print out <b>variables</b> by putting the <b>variable name</b> in between the parentheses of the print statement. here is the blueprint for printing a variable using both same-line and next-line printing:<br/>\n\t\t\t\t<b>System.out.print(<i>&lt;name&gt;</i>);</b> or<br/>\n\t\t\t\t<b>System.out.println(<i>&lt;name&gt;</i>);</b><br/><br/>\n\t\t\t\tlet's do a <b>coding exercise</b> to practice printing variables! create a variable of any type you want and print it out. then change the value of the variable and print it out again. (<b className=\"note\">psst. need a reminder</b> on how to initialize a variable and change its value? check out the <b className=\"pageName\">variables page</b>!)\n\t\t\t\t<br/>\n\t\t\t\there is some example code similar to what you may have:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//create a boolean variable, initialize it to false, and print it out using next-line printing</div>\n\t\t\t\t<br/>\n\t\t\t\tboolean understandsPrinting = false;\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(understandsPrinting);\n\t\t\t\t<div className=\"comment\">//change the value of the boolean variable to true, and print it out using next-line printing</div>\n\t\t\t\t<br/>\n\t\t\t\tunderstandsPrinting = true;\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(understandsPrinting);\n\t\t\t\t</div>\n\t\t\t\tand it would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tfalse\n\t\t\t\t<br/>\n\t\t\t\ttrue\n\t\t\t\t</div>\n\t\t\t\tawesome! as the code above says, you now understand printing!\n\t\t\t\t<h3>System.out.print(\"is it time for recap?\");</h3>\n\t\t\t\t<b>yup!</b> you made it to recap!<br/><br/>\n\t\t\t\tremember, there are two types of printing: <b>same-line printing</b>, which is you can do by typing <b>System.out.print();</b>, \n\t\t\t\tand <b>next-line printing</b>, which you can do by typing <b>System.out.println();</b>. \n\t\t\t\tboth of these print statements print information into the <b>console</b>. <br/>\n\t\t\t\tyou can print out <b>Strings</b>, <b>characters</b>, <b>integers</b>, <b>doubles</b>, and <b>booleans</b>. finally, you can also print out <b>variables</b> by putting the variable name in between the parentheses of the print statement.\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">envelope:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>printing</b> to display <b>what would be written on an evnelope addressed to you</b> using the two printing methods we just learned.\n\t\t\t\t\tthis will require five steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>first, you will create a variable to store your first name</li>\n\t\t\t\t\t\t<li>next, you will create a variable to store your last name</li>\n\t\t\t\t\t\t<li>after that, you will create a variable to store your street address, what would be the second line on an envelope addressed to you</li>\n\t\t\t\t\t\t<li>next, you will create a variable to store the city, state / region / province, country, and zipcode what would be the third line on an envelope addressed to you</li>\n\t\t\t\t\t\t<li>now, you are going to print out all of these components to make it look as though it would be written on an envelope addressed to you</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>normally, an envelope addressed to you would have your first and last name on the first line, your street address on the second, and your city, state / region / province, country, and zipcode on the third</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for steps 1-4, because these are storing text, you would want to use Strings as your variable type\",\n\t\t\t\t\t\t\t\"for step 5, if you need to print your name on one line, what type of printing would you need to use for the first line? maybe single-line? and if you need to print the other parts on separate lines, what type of printing would that be? maybe multi-line? hmmm...\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"printing-envelope\"\n\t\t\t\t\t/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/printing-envelope?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. \n\t\t\t\t\thopefully your code looks similar to ours <b>:)</b><br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/printing-envelope-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Printing;"]},"metadata":{},"sourceType":"module"}