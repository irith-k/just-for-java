{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js\";\nimport React from 'react';\n\nclass ForLoop extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 22\n      }\n    }, \"a repeating block of code\"), \". here, we will focus on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 79\n      }\n    }, \"for loops\"), \", a type of loop that iterates through your block of code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 155\n      }\n    }, \"specific number of times\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you create a for loop?\"), \"here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }), \"as you can see from the blueprint above, there are three main components to creating a for loop:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 6\n      }\n    }, \"initialize\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 6\n      }\n    }, \"condition\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, \"iterate\")), \"let's walk through each of these components...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }\n    }, \"what in the world is initialize?\"), \"good question! initializing is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 40\n      }\n    }, \"first component\"), \" of your for loop. it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 93\n      }\n    }, \"create the variable\"), \" that you will use to go through your for loop. for initalizing, we always use an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 39\n      }\n    }, \"int variable\"), \", often denoted by the letter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 88\n      }\n    }, \"i\"), \". in the initialize section, we create i and set it equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 68\n      }\n    }, \"start value\"), \". \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 88\n      }\n    }), \"for example, if you want your for loop to print the numbers 1-5, you would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 80\n      }\n    }, \"set i equal to 1\"), \", because that's the number you want to print first. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on how to create a variable? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 95\n      }\n    }, \"variables page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, \"and what's condition?\"), \"the condition is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 26\n      }\n    }, \"second component\"), \". it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 63\n      }\n    }, \"determine when the loop should stop\"), \". you can denote this using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 133\n      }\n    }, \"<\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 146\n      }\n    }, \"\\u2264\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 159\n      }\n    }, \">\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 175\n      }\n    }, \"\\u2265\"), \" depending on what you want your loop to do.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing out the numbers 1-5, we can make our condition in two ways: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 108\n      }\n    }, \"i \\u2264 5\"), \" or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 127\n      }\n    }, \"i < 6\"), \". which one you choose is up to you.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"hey, wait! you still have to explain iterate!\"), \"don't worry, we didn't forget :). the iterate portion is our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 66\n      }\n    }, \"last component\"), \" and works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 101\n      }\n    }, \"increment your integer variable\"), \". you can increment by however much you want, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 185\n      }\n    }, \"either increasing or decreasing\"), \" depending on the direction you would like your loop to go in. if you want your integer to be increased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 82\n      }\n    }, \"i += \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 90\n      }\n    }, \"<number you want to increase by each time>\")), \". if you want your integer to be decreased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 82\n      }\n    }, \"i -= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 90\n      }\n    }, \"<number you want to decrease by each time>\")), \". a shortcut for increasing i by 1 each time is typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 58\n      }\n    }, \"i++\"), \", while a shortcut for decreasing i by 1 is... you guessed it: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 131\n      }\n    }, \"i--\"), \". you can also use multiplication (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 38\n      }\n    }, \"i *=\"), \")and division (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 64\n      }\n    }, \"i /=\"), \"), but addition and subtraction are the most common.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 163\n      }\n    }, \"i++\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }\n    }, \"btw:\"), \" don't forget the semicolons between each of the three components.)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, \"and for some examples...\"), \"here is our example from above fully coded out:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i \\u2264 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"System.out.print(i + \\\" \\\")\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 40\n      }\n    }, \"//the \\\" \\\" is to add a space between the numbers when printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 134\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    })), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, \"1 2 3 4 5\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }, \"...and here's another example:\"), \"in this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 152\n      }\n    }), \"remember, the first thing we want to do is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 48\n      }\n    }, \"make our integer i\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 76\n      }\n    }, \"hint:\"), \" think about what number we want to start at.) next, we want our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }\n    }, \"condition\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 42\n      }\n    }, \"hint:\"), \" there are two ways to write this part.) and lastly, we will need to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }, \"increment our integer\"), \" in a way to get the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 82\n      }\n    }, \"powers of 2\"), \". i'll let you think of that one for a bit. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 145\n      }\n    }, \"hint:\"), \" think back to your math class.)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 206\n      }\n    }), \"now, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 130\n      }\n    }, \"variables page\"), \" for this part. ok, got it? let's see it coded out!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"int sum = 0; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, \"//this variable will keep track of our sum in our for loop\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 110\n      }\n    }), \"for(int i = 1; i \\u2264 100; i*=2){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, \"sum += i; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }\n    }, \"//+= is a shortcut for saying sum = sum + i.\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 99\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, \"i*=2\"), \" works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 175\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, \"...and last example, we promise:\"), \"in the first example, we printed out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 42\n      }\n    }, \"i\"), \", and in the second example, we added \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 88\n      }\n    }, \"i\"), \" to a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 102\n      }\n    }, \"sum\"), \" variable. in this last example, i want to show you a different way that you can use the iterator variable, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 220\n      }\n    }, \"int i\"), \". what if \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"i\"), \" represented an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }, \"index\"), \" in a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 55\n      }\n    }, \"String\"), \"? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 71\n      }\n    }, \"psst. need a reminder\"), \" on what an index is and how it relates to Strings? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 182\n      }\n    }, \"Strings page\"), \"!) let's try to use a for loop to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 256\n      }\n    }, \"iterate through each character in a String\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }), \"for the first component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 51\n      }\n    }, \"initialize\"), \", we want to set \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 85\n      }\n    }, \"int i\"), \" to the starting value. what should our starting value be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 157\n      }\n    }, \"hint:\"), \" think about what number indexing start at.) because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 239\n      }\n    }, \"indexing starts at 0\"), \", our first component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 298\n      }\n    }, \"int i = 0\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }), \"for the second component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 52\n      }\n    }, \"condition\"), \", we want to answer the question: when should our for loop stop? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 134\n      }\n    }, \"hint:\"), \" our for loop should stop after we've looped through each index in the given String.) we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 267\n      }\n    }, \"Strings page\"), \" that indexing goes from 0, inclusive, till the length of the String, exclusive (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 388\n      }\n    }, \"btw:\"), \" the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 555\n      }\n    }, \"i is less than the length of the String\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 604\n      }\n    }, \"btw:\"), \" to get the length of a String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 663\n      }\n    }, \"str\"), \", use the syntax \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 690\n      }\n    }, \"str.length()\"), \".) therefore, our second component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 754\n      }\n    }, \"i < str.length()\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }), \"for the third component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \", we want to think about what should happen to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 112\n      }\n    }, \"i\"), \" each time we iterate. since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 149\n      }\n    }, \"i\"), \" is the index, we want \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 180\n      }\n    }, \"i\"), \" to increase by 1 each time since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 222\n      }\n    }, \"we are moving to the next index each iteration\"), \", so our third component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 310\n      }\n    }, \"i++\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }), \"now that we have all three components of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 65\n      }\n    }, \"let's code it!\"), \" let's have our program print out each character in String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 145\n      }\n    }, \"str\"), \" on its own line. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 174\n      }\n    }, \"psst. need a reminder\"), \" of how to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 234\n      }\n    }, \"charAt()\"), \" to get the character at a given index in a String? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 315\n      }\n    }, \"Strings page\"), \"!)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }, \"String str = \\\"happy birthday\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }\n    }, \"loop through each character in str\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }), \"for(int i = 0; i \\u2264 str.length(); i++){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }\n    }, \"//use charAt() to print out each character on its own line\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 95\n      }\n    }), \"System.out.println(str.charAt(i));\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 40\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }), \"yay! now you know all about for loops!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 5\n      }\n    }, \"is it really time for reacap? get it. for. hehe.\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }, \"ayyyyyy!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 47\n      }\n    }), \"now, i know that was a lot, so here's a lil' summary:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 58\n      }\n    }), \"for loops help to loop through code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 43\n      }\n    }, \"specific number of times\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 75\n      }\n    }), \"there are three parts to a for loop:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 10\n      }\n    }, \"initialize\"), \", when you make your integer \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 56\n      }\n    }, \"i\"), \" and set it equal to the start number\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 10\n      }\n    }, \"condition\"), \", where you decide \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 45\n      }\n    }, \"how\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 60\n      }\n    }, \"when\"), \" your loop should stop using the different signs\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 10\n      }\n    }, \"iterate\"), \", where you \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 36\n      }\n    }, \"increment\"), \" your integer a specific amount each time it loops through your code\")), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default ForLoop;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js"],"names":["React","ForLoop","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass ForLoop extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\ta <b>loop</b> is <b>a repeating block of code</b>. here, we will focus on <b>for loops</b>, a type of loop that iterates through your block of code a <b>specific number of times</b>.\n\t\t\t\t<h3>wait, so how do you create a for loop?</h3>\n\t\t\t\there is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tas you can see from the blueprint above, there are three main components to creating a for loop: \n\t\t\t\t<ul>\n\t\t\t\t\t<li>initialize</li>\n\t\t\t\t\t<li>condition</li>\n\t\t\t\t\t<li>iterate</li>\n\t\t\t\t</ul>\n\t\t\t\tlet's walk through each of these components...\n\t\t\t\t<br/>\n\t\t\t\t<h3>what in the world is initialize?</h3>\n\t\t\t\tgood question! initializing is the <b>first component</b> of your for loop. it works to <b>create the variable</b> that you will use to go through your for loop.\n\t\t\t\tfor initalizing, we always use an <b>int variable</b>, often denoted by the letter <b>i</b>.  \n\t\t\t\tin the initialize section, we create i and set it equal to the <b>start value</b>. <br/>\n\t\t\t\tfor example, if you want your for loop to print the numbers 1-5, you would <b>set i equal to 1</b>, because that's the number you want to print first.\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on how to create a variable? check out the <b className=\"pageName\">variables page</b>!)\n\n\t\t\t\t<h3>and what's condition?</h3>\n\t\t\t\tthe condition is the <b>second component</b>. it works to <b>determine when the loop should stop</b>. you can denote this using <b>&lt;</b>, <b>&le;</b>, <b>&gt;</b>, or <b>&ge;</b> depending on what you want your loop to do.\n\t\t\t\t<br/>going back to our example of printing out the numbers 1-5, we can make our condition in two ways: <b>i &le; 5</b> or <b>i &lt; 6</b>. which one you choose is up to you.\n\t\t\t\t\n\t\t\t\t<h3>hey, wait! you still have to explain iterate!</h3>\n\t\t\t\tdon't worry, we didn't forget :). the iterate portion is our <b>last component</b> and works to <b>increment your integer variable</b>. you can increment by however much you want, <b>either increasing or decreasing</b> depending on the direction you would like your loop to go in. \n\t\t\t\tif you want your integer to be increased by a certain number, you would type <b>i += <i>&lt;number you want to increase by each time&gt;</i></b>. \n\t\t\t\tif you want your integer to be decreased by a certain number, you would type <b>i -= <i>&lt;number you want to decrease by each time&gt;</i></b>.\n\t\t\t\ta shortcut for increasing i by 1 each time is typing <b>i++</b>, while a shortcut for decreasing i by 1 is... you guessed it: <b>i--</b>.\n\t\t\t\tyou can also use multiplication (<b>i *=</b>)and division (<b>i /=</b>), but addition and subtraction are the most common.\n\t\t\t\t<br/>going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type <b>i++</b>.\n\t\t\t\t(<b className=\"note\">btw:</b> don't forget the semicolons between each of the three components.)\n\t\t\t\t<h3>and for some examples...</h3>\n\t\t\t\there is our example from above fully coded out: \n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tfor(int i = 1; i &le; 5; i++) &#123; <br/>\n\t\t\t\t\t\t<p>System.out.print(i + \" \")</p> <div className = \"comment\">//the \" \" is to add a space between the numbers when printing</div><br/>\n\t\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t1 2 3 4 5\n\t\t\t\t</div>\n\t\t\t\t<h3>...and here's another example:</h3>\n\t\t\t\tin this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.<br/>\n\t\t\t\tremember, the first thing we want to do is <b>make our integer i</b>. (<b className=\"note\">hint:</b> think about what number we want to start at.) \n\t\t\t\tnext, we want our <b>condition</b>. (<b className=\"note\">hint:</b> there are two ways to write this part.)\n\t\t\t\tand lastly, we will need to <b>increment our integer</b> in a way to get the <b>powers of 2</b>. i'll let you think of that one for a bit. (<b className=\"note\">hint:</b> think back to your math class.)<br/> \n\t\t\t\tnow, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the <b className=\"pageName\">variables page</b> for this part.\n\t\t\t\tok, got it? let's see it coded out!\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tint sum = 0; <div className = \"comment\">//this variable will keep track of our sum in our for loop</div><br/>\n\t\t\t\t\tfor(int i = 1; i &le; 100; i*=2)&#123;<br/>\n\t\t\t\t\t\t<p>sum += i; <div className=\"comment\">//+= is a shortcut for saying sum = sum + i.</div></p><br/>\n\t\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\t<b>i*=2</b> works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.<br/>\n\t\t\t\t<h3>...and last example, we promise:</h3>\n\t\t\t\tin the first example, we printed out <b>i</b>, and in the second example, we added <b>i</b> to a <i>sum</i> variable. in this last example, i want to show you a different way that you can use the iterator variable, <b>int i</b>. \n\t\t\t\twhat if <b>i</b> represented an <b>index</b> in a <b>String</b>? (<b className=\"note\">psst. need a reminder</b> on what an index is and how it relates to Strings? check out the <b className=\"pageName\">Strings page</b>!) let's try to use a for loop to <b>iterate through each character in a String</b>. \n\t\t\t\t<br/>for the first component of our for loop, <b>initialize</b>, we want to set <b>int i</b> to the starting value. what should our starting value be? (<b className=\"note\">hint:</b> think about what number indexing start at.) because <b>indexing starts at 0</b>, our first component should be <b>int i = 0</b>.\n\t\t\t\t<br/>for the second component of our for loop, <b>condition</b>, we want to answer the question: when should our for loop stop? (<b className=\"note\">hint:</b> our for loop should stop after we've looped through each index in the given String.) we learned on the <b className=\"pageName\">Strings page</b> that indexing goes from 0, inclusive, till the length of the String, exclusive (<b className=\"note\">btw:</b> the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as <b>i is less than the length of the String</b>. (<b className=\"note\">btw:</b> to get the length of a String <i>str</i>, use the syntax <b>str.length()</b>.) therefore, our second component should be <b>i &lt; str.length()</b>.\n\t\t\t\t<br/>for the third component of our for loop, <b>iterate</b>, we want to think about what should happen to <b>i</b> each time we iterate. since <b>i</b> is the index, we want <b>i</b> to increase by 1 each time since <b>we are moving to the next index each iteration</b>, so our third component should be <b>i++</b>.\n\t\t\t\t<br/>now that we have all three components of our for loop, <b>let's code it!</b> let's have our program print out each character in String <i>str</i> on its own line. (<b className=\"note\">psst. need a reminder</b> of how to use <b>charAt()</b> to get the character at a given index in a String? check out the <b className=\"pageName\">Strings page</b>!)\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString str = \"happy birthday\";\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">loop through each character in str</div>\n\t\t\t\t<br/>\n\t\t\t\tfor(int i = 0; i &le; str.length(); i++)&#123;<br/>\n\t\t\t\t\t<div className=\"comment\">//use charAt() to print out each character on its own line</div><br/>\n\t\t\t\t\tSystem.out.println(str.charAt(i));<br/>\n\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\t<br/>yay! now you know all about for loops!\n\t\t\t\t<h3>is it really time for reacap? get it. for. hehe.</h3>\n\t\t\t\t<b>ayyyyyy!</b> you made it to recap!<br/><br/>\n\t\t\t\tnow, i know that was a lot, so here's a lil' summary:<br/>\n\t\t\t\tfor loops help to loop through code a <b>specific number of times</b>.<br/>\n\t\t\t\tthere are three parts to a for loop: \n\t\t\t\t<ol>\n\t\t\t\t\t<li><b>initialize</b>, when you make your integer <b>i</b> and set it equal to the start number</li>\n\t\t\t\t\t<li><b>condition</b>, where you decide <b>how</b> and <b>when</b> your loop should stop using the different signs</li>\n\t\t\t\t\t<li><b>iterate</b>, where you <b>increment</b> your integer a specific amount each time it loops through your code</li>\n\t\t\t\t</ol>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ForLoop;"]},"metadata":{},"sourceType":"module"}