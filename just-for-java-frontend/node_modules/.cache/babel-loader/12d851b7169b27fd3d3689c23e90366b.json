{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Math.js\";\nimport React from 'react';\n\nclass Math extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"we've already discussed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 29\n      }\n    }, \"+\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 39\n      }\n    }, \"-\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 49\n      }\n    }, \"*\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 59\n      }\n    }, \"/\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 73\n      }\n    }, \"%\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 83\n      }\n    }, \"psst. need a reminder\"), \" on what these operators mean? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 173\n      }\n    }, \"arithmetics page\"), \"!). but what if we want to do more \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 252\n      }\n    }, \"complex math operations\"), \", such as raising a number to a power, or getting the absolute value of a number? Luckily for us, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 384\n      }\n    }, \"Math\"), \" library provides us with a variety of math constants and complex functionality. here is the blueprint for using the Math library in your program:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }\n    }, \"Math.\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }\n    }, \"<function>\")));\n  }\n\n}\n\nexport default Math;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Math.js"],"names":["React","Math","Component","constructor","props","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,SAAmBD,KAAK,CAACE,SAAzB,CAAkC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA;;AAGDC,EAAAA,MAAM,GAAE;AACP,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADzB,qBACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADnC,qBAC6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAD7C,qBACuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADvD,yBACqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADrE,qBAC+E;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAD/E,gEACyK;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADzK,sDACwP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADxP,yHAC4X;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD5X,qKAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR,CAHD,CADD;AAOA;;AAdgC;;AAiBlC,eAAeJ,IAAf","sourcesContent":["import React from 'react';\n\nclass Math extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\twe've already discussed <b>+</b>, <b>-</b>, <b>*</b>, <b>/</b>, and <b>%</b> (<b className=\"note\">psst. need a reminder</b> on what these operators mean? check out the <b className=\"pageName\">arithmetics page</b>!). but what if we want to do more <b>complex math operations</b>, such as raising a number to a power, or getting the absolute value of a number? Luckily for us, the <b>Math</b> library provides us with a variety of math constants and complex functionality. here is the blueprint for using the Math library in your program:\n\t\t\t\t<br/>\n\t\t\t\t<b>Math.<i>&lt;function&gt;</i></b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Math;"]},"metadata":{},"sourceType":"module"}