{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\nimport { Link } from \"react-router-dom\";\n\nclass ForLoop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    window.scrollTo(0, 0);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }\n    }, this.props.page, \":\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 32\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 22\n      }\n    }, \"a repeating block of code\"), \". here, we will focus on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 79\n      }\n    }, \"for loops\"), \", a type of loop that iterates through your block of code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 155\n      }\n    }, \"specific number of times\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you create a for loop?\"), \"here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 20\n      }\n    }), \"as you can see from the blueprint above, there are three main components to creating a for loop:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 6\n      }\n    }, \"initialize\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }\n    }, \"condition\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }\n    }, \"iterate\")), \"let's walk through each of these components...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, \"what in the world is initialize?\"), \"good question! initializing is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 40\n      }\n    }, \"first component\"), \" of your for loop. it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 93\n      }\n    }, \"create the variable\"), \" that you will use to go through your for loop. for initalizing, we always use an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 39\n      }\n    }, \"int variable\"), \", often denoted by the letter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 88\n      }\n    }, \"i\"), \". in the initialize section, we create i and set it equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 68\n      }\n    }, \"start value\"), \". \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 88\n      }\n    }), \"for example, if you want your for loop to print the numbers 1-5, you would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 80\n      }\n    }, \"set i equal to 1\"), \", because that's the number you want to print first. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on how to create a variable? check out the \", /*#__PURE__*/React.createElement(Link, {\n      className: \"contentLink\",\n      to: \"/variables\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 95\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 141\n      }\n    }, \"variables page\")), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }, \"and what's condition?\"), \"the condition is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 26\n      }\n    }, \"second component\"), \". it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 63\n      }\n    }, \"determine when the loop should stop\"), \". you can denote this using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 133\n      }\n    }, \"<\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 146\n      }\n    }, \"<=\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 160\n      }\n    }, \">\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 176\n      }\n    }, \">=\"), \" depending on what you want your loop to do.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing out the numbers 1-5, we can make our condition in two ways: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 108\n      }\n    }, \"i <= 5\"), \" or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 128\n      }\n    }, \"i < 6\"), \". which one you choose is up to you.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }, \"hey, wait! you still have to explain iterate!\"), \"don't worry, we didn't forget :). the iterate portion is our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 66\n      }\n    }, \"last component\"), \" and works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 101\n      }\n    }, \"increment your integer variable\"), \". you can increment by however much you want, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 185\n      }\n    }, \"either increasing or decreasing\"), \" depending on the direction you would like your loop to go in. if you want your integer to be increased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 82\n      }\n    }, \"i += \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 90\n      }\n    }, \"<number you want to increase by each time>\")), \". if you want your integer to be decreased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 82\n      }\n    }, \"i -= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 90\n      }\n    }, \"<number you want to decrease by each time>\")), \". a shortcut for increasing i by 1 each time is typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 58\n      }\n    }, \"i++\"), \", while a shortcut for decreasing i by 1 is... you guessed it: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 131\n      }\n    }, \"i--\"), \". you can also use multiplication (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 38\n      }\n    }, \"i *=\"), \")and division (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 64\n      }\n    }, \"i /=\"), \"), but addition and subtraction are the most common.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 163\n      }\n    }, \"i++\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }\n    }, \"btw:\"), \" don't forget the semicolons between each of the three components.)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }, \"and for some examples...\"), \"here is our example from above fully coded out:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i <= 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, \"System.out.print(i + \\\" \\\");\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 41\n      }\n    }, \"//the \\\" \\\" is to add a space between the numbers when printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 135\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    })), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }, \"1 2 3 4 5\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, \"...and here's another example:\"), \"in this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 152\n      }\n    }), \"remember, the first thing we want to do is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 48\n      }\n    }, \"make our integer i\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 76\n      }\n    }, \"hint:\"), \" think about what number we want to start at.) next, we want our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 23\n      }\n    }, \"condition\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 42\n      }\n    }, \"hint:\"), \" there are two ways to write this part.) and lastly, we will need to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }\n    }, \"increment our integer\"), \" in a way to get the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 82\n      }\n    }, \"powers of 2\"), \". i'll let you think of that one for a bit. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 145\n      }\n    }, \"hint:\"), \" think back to your math class.)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 206\n      }\n    }), \"now, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 130\n      }\n    }, \"variables page\"), \" for this part. ok, got it? let's see it coded out!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, \"int sum = 0; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }, \"//this variable will keep track of our sum in our for loop\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 110\n      }\n    }), \"for(int i = 1; i <= 100; i*=2){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, \"sum += i; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 20\n      }\n    }, \"//+= is a shortcut for saying sum = sum + i.\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 99\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, \"i*=2\"), \" works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 175\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, \"...and last example, we promise:\"), \"in the first example, we printed out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 42\n      }\n    }, \"i\"), \", and in the second example, we added \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 88\n      }\n    }, \"i\"), \" to a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 102\n      }\n    }, \"sum\"), \" variable. in this last example, i want to show you a different way that you can use the iterator variable, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 220\n      }\n    }, \"int i\"), \". what if \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"i\"), \" represented an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 37\n      }\n    }, \"index\"), \" in a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 55\n      }\n    }, \"String\"), \"? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 71\n      }\n    }, \"psst. need a reminder\"), \" on what an index is and how it relates to Strings? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 182\n      }\n    }, \"strings page\"), \"!) let's try to use a for loop to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 256\n      }\n    }, \"iterate through each character in a String\"), \".\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 6\n      }\n    }, \"for the first component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 51\n      }\n    }, \"initialize\"), \", we want to set \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 85\n      }\n    }, \"int i\"), \" to the starting value. what should our starting value be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 157\n      }\n    }, \"hint:\"), \" think about what number indexing start at.) because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 239\n      }\n    }, \"indexing starts at 0\"), \", our first component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 298\n      }\n    }, \"int i = 0\"), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }\n    }, \"for the second component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 52\n      }\n    }, \"condition\"), \", we want to answer the question: when should our for loop stop? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 134\n      }\n    }, \"hint:\"), \" our for loop should stop after we've looped through each index in the given String.) we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 267\n      }\n    }, \"strings page\"), \" that indexing goes from 0, inclusive, till the length of the String, exclusive (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 388\n      }\n    }, \"btw:\"), \" the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 555\n      }\n    }, \"i is less than the length of the String\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 604\n      }\n    }, \"btw:\"), \" to get the length of a String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 663\n      }\n    }, \"str\"), \", use the syntax \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 690\n      }\n    }, \"str.length()\"), \".) therefore, our second component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 754\n      }\n    }, \"i < str.length()\"), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 6\n      }\n    }, \"for the third component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \", we want to think about what should happen to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 112\n      }\n    }, \"i\"), \" each time we iterate. since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 149\n      }\n    }, \"i\"), \" is the index, we want \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 180\n      }\n    }, \"i\"), \" to increase by 1 each time since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 222\n      }\n    }, \"we are moving to the next index each iteration\"), \", so our third component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 310\n      }\n    }, \"i++\"), \".\")), \"now that we have all three components of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 60\n      }\n    }, \"let's code it!\"), \" let's have our program print out each character in String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 140\n      }\n    }, \"str\"), \" on its own line. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 169\n      }\n    }, \"psst. need a reminder\"), \" of how to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 229\n      }\n    }, \"charAt()\"), \" to get the character at a given index in a String? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 310\n      }\n    }, \"strings page\"), \"!)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }\n    }, \"String str = \\\"happy birthday\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }, \"//loop through each character in str\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }), \"for(int i = 0; i <= str.length(); i++){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }\n    }, \"//use charAt() to print out each character on its own line\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 95\n      }\n    }), \"System.out.println(str.charAt(i));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), \"}\"), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, \"h\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 6\n      }\n    }), \"a\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }\n    }), \"p\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }\n    }), \"p\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 6\n      }\n    }), \"y\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }\n    }), \"b\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 6\n      }\n    }), \"i\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }\n    }), \"r\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }\n    }), \"t\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }), \"h\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 6\n      }\n    }), \"d\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 6\n      }\n    }), \"a\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 6\n      }\n    }), \"y\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }, \"is it really time for recap? get it. for. hehe.\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }, \"ayyyyyy!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 47\n      }\n    }), \"now, i know that was a lot, so here's a lil' summary:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 58\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 63\n      }\n    }), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is a repeating block of code. one type of loop is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 71\n      }\n    }, \"for loop\"), \", which helps to loop through a block of code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 134\n      }\n    }, \"specific number of times\"), \". here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 213\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 20\n      }\n    }), \"there are three parts to a for loop:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }\n    }, \"initialize\"), \", when you make your integer \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 56\n      }\n    }, \"i\"), \" and set it equal to the start number\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 10\n      }\n    }, \"condition\"), \", where you decide \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 45\n      }\n    }, \"how\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 60\n      }\n    }, \"when\"), \" your loop should stop using the different signs\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 10\n      }\n    }, \"iterate\"), \", where you \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 36\n      }\n    }, \"increment\"), \" your integer a specific amount each time it loops through your code\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 6\n      }\n    }, \"blast off:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 40\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 45\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 33\n      }\n    }, \"for loops\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 53\n      }\n    }, \"print out a count down before the blast off of a rocket ship\"), \". this will require two steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 150\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, \"construct a for loop that counts down from 5 to 1\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 8\n      }\n    }, \"each number should be printed to the console on its own line\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }\n    }, \"after the for loop is over, print \\\"blast off!\\\" to the console\")), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for step 1, your initialize component should be int i = 5 since your countdown begins at 5\", \"for step 1, your condition component should be i >= 1 because your countdown ends at 1, so as long as i is greater than or equal to 1, the countdown should keep going\", \"for step 1, your iterate component should be i-- because you want i to decrement, or decrease by 1, each iteration, since you are counting down\"],\n      id: \"for-loop-blast-off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-blast-off?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 6\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 48\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 62\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks similar to ours \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 159\n      }\n    }, \":)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 168\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 173\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-blast-off-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 6\n      }\n    }, \"nibble nibble nom nom:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 52\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 57\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 33\n      }\n    }, \"for loops\"), \" to print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 63\n      }\n    }, \"nibble\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 81\n      }\n    }, \"nom\"), \" multiple times; an example output may look like this: \\\"nibble nibble nibble nom nom nom\\\". this will require four steps: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, \"create a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 29\n      }\n    }, \"n\"), \" that stores how many times you want to print out nibble and nom\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, \"construct a for loop that iterates \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 46\n      }\n    }, \"n\"), \" times\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 7\n      }\n    }, \"inside the for loop, print out nibble\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 8\n      }\n    }, \"we want our nibbles and noms to all appear on the same line when they are printed\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 8\n      }\n    }, \"we also want a space in between each nibble and nom\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, \"construct a second for loop that prints out nom \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 59\n      }\n    }, \"n\"), \" times\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 8\n      }\n    }, \"this construction should be almost identical to what you did in steps 2 and 3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 8\n      }\n    }, \"the only difference is that you are printing nom instead of nibble\"))), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for step 2, your initialize component should be int i = 1 and your iterate component should be i++, because you want i to increment each time you loop\", \"for step 2, since you want your for loop to iterate n times, where n is how many times you want to print out nibble and nom, your condition component should be i <= n\", \"for step 3, you can use same-line printing - System.out.print() – so that your nibbles and noms are on the same line in the console\", \"for step 3, add a space after nibble and nom when you print them out inside your for loops\"],\n      id: \"for-loop-nibble-nibble-nom-nom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-nibble-nibble-nom-nom?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 6\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 48\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 15\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 62\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks similar to ours \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 159\n      }\n    }, \":)\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 168\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 173\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-nibble-nibble-nom-nom-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 5\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default ForLoop;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js"],"names":["React","ProgressUpdater","Hint","Link","ForLoop","Component","constructor","props","state","progress","updateProgressState","setState","render","window","scrollTo","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\nimport {\n  Link\n} from \"react-router-dom\";\n\n\nclass ForLoop extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\twindow.scrollTo(0, 0);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>{this.props.page}:</h2><br/>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t\t\t\ta <b>loop</b> is <b>a repeating block of code</b>. here, we will focus on <b>for loops</b>, a type of loop that iterates through your block of code a <b>specific number of times</b>.\n\t\t\t\t<h3>wait, so how do you create a for loop?</h3>\n\t\t\t\there is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tas you can see from the blueprint above, there are three main components to creating a for loop: \n\t\t\t\t<ul>\n\t\t\t\t\t<li>initialize</li>\n\t\t\t\t\t<li>condition</li>\n\t\t\t\t\t<li>iterate</li>\n\t\t\t\t</ul>\n\t\t\t\tlet's walk through each of these components...\n\t\t\t\t<br/>\n\t\t\t\t<h3>what in the world is initialize?</h3>\n\t\t\t\tgood question! initializing is the <b>first component</b> of your for loop. it works to <b>create the variable</b> that you will use to go through your for loop.\n\t\t\t\tfor initalizing, we always use an <b>int variable</b>, often denoted by the letter <b>i</b>.  \n\t\t\t\tin the initialize section, we create i and set it equal to the <b>start value</b>. <br/>\n\t\t\t\tfor example, if you want your for loop to print the numbers 1-5, you would <b>set i equal to 1</b>, because that's the number you want to print first.\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on how to create a variable? check out the <Link className=\"contentLink\" to=\"/variables\"><b className=\"pageName\">variables page</b></Link>!)\n\n\t\t\t\t<h3>and what's condition?</h3>\n\t\t\t\tthe condition is the <b>second component</b>. it works to <b>determine when the loop should stop</b>. you can denote this using <b>&lt;</b>, <b>&lt;=</b>, <b>&gt;</b>, or <b>&gt;=</b> depending on what you want your loop to do.\n\t\t\t\t<br/>going back to our example of printing out the numbers 1-5, we can make our condition in two ways: <b>i &lt;= 5</b> or <b>i &lt; 6</b>. which one you choose is up to you.\n\t\t\t\t\n\t\t\t\t<h3>hey, wait! you still have to explain iterate!</h3>\n\t\t\t\tdon't worry, we didn't forget :). the iterate portion is our <b>last component</b> and works to <b>increment your integer variable</b>. you can increment by however much you want, <b>either increasing or decreasing</b> depending on the direction you would like your loop to go in. \n\t\t\t\tif you want your integer to be increased by a certain number, you would type <b>i += <i>&lt;number you want to increase by each time&gt;</i></b>. \n\t\t\t\tif you want your integer to be decreased by a certain number, you would type <b>i -= <i>&lt;number you want to decrease by each time&gt;</i></b>.\n\t\t\t\ta shortcut for increasing i by 1 each time is typing <b>i++</b>, while a shortcut for decreasing i by 1 is... you guessed it: <b>i--</b>.\n\t\t\t\tyou can also use multiplication (<b>i *=</b>)and division (<b>i /=</b>), but addition and subtraction are the most common.\n\t\t\t\t<br/>going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type <b>i++</b>.\n\t\t\t\t(<b className=\"note\">btw:</b> don't forget the semicolons between each of the three components.)\n\t\t\t\t<h3>and for some examples...</h3>\n\t\t\t\there is our example from above fully coded out: \n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tfor(int i = 1; i &lt;= 5; i++) &#123; <br/>\n\t\t\t\t\t\t<p>System.out.print(i + \" \");</p> <div className = \"comment\">//the \" \" is to add a space between the numbers when printing</div><br/>\n\t\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t1 2 3 4 5\n\t\t\t\t</div>\n\t\t\t\t<h3>...and here's another example:</h3>\n\t\t\t\tin this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.<br/>\n\t\t\t\tremember, the first thing we want to do is <b>make our integer i</b>. (<b className=\"note\">hint:</b> think about what number we want to start at.) \n\t\t\t\tnext, we want our <b>condition</b>. (<b className=\"note\">hint:</b> there are two ways to write this part.)\n\t\t\t\tand lastly, we will need to <b>increment our integer</b> in a way to get the <b>powers of 2</b>. i'll let you think of that one for a bit. (<b className=\"note\">hint:</b> think back to your math class.)<br/> \n\t\t\t\tnow, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the <b className=\"pageName\">variables page</b> for this part.\n\t\t\t\tok, got it? let's see it coded out!\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tint sum = 0; <div className = \"comment\">//this variable will keep track of our sum in our for loop</div><br/>\n\t\t\t\t\tfor(int i = 1; i &lt;= 100; i*=2)&#123;<br/>\n\t\t\t\t\t\t<p>sum += i; <div className=\"comment\">//+= is a shortcut for saying sum = sum + i.</div></p><br/>\n\t\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\t<b>i*=2</b> works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.<br/>\n\t\t\t\t<h3>...and last example, we promise:</h3>\n\t\t\t\tin the first example, we printed out <b>i</b>, and in the second example, we added <b>i</b> to a <i>sum</i> variable. in this last example, i want to show you a different way that you can use the iterator variable, <b>int i</b>. \n\t\t\t\twhat if <b>i</b> represented an <b>index</b> in a <b>String</b>? (<b className=\"note\">psst. need a reminder</b> on what an index is and how it relates to Strings? check out the <b className=\"pageName\">strings page</b>!) let's try to use a for loop to <b>iterate through each character in a String</b>. \n\t\t\t\t<ul>\n\t\t\t\t\t<li>for the first component of our for loop, <b>initialize</b>, we want to set <b>int i</b> to the starting value. what should our starting value be? (<b className=\"note\">hint:</b> think about what number indexing start at.) because <b>indexing starts at 0</b>, our first component should be <b>int i = 0</b>.</li>\n\t\t\t\t\t<li>for the second component of our for loop, <b>condition</b>, we want to answer the question: when should our for loop stop? (<b className=\"note\">hint:</b> our for loop should stop after we've looped through each index in the given String.) we learned on the <b className=\"pageName\">strings page</b> that indexing goes from 0, inclusive, till the length of the String, exclusive (<b className=\"note\">btw:</b> the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as <b>i is less than the length of the String</b>. (<b className=\"note\">btw:</b> to get the length of a String <i>str</i>, use the syntax <b>str.length()</b>.) therefore, our second component should be <b>i &lt; str.length()</b>.</li>\n\t\t\t\t\t<li>for the third component of our for loop, <b>iterate</b>, we want to think about what should happen to <b>i</b> each time we iterate. since <b>i</b> is the index, we want <b>i</b> to increase by 1 each time since <b>we are moving to the next index each iteration</b>, so our third component should be <b>i++</b>.</li>\n\t\t\t\t</ul>\n\t\t\t\tnow that we have all three components of our for loop, <b>let's code it!</b> let's have our program print out each character in String <i>str</i> on its own line. (<b className=\"note\">psst. need a reminder</b> of how to use <b>charAt()</b> to get the character at a given index in a String? check out the <b className=\"pageName\">strings page</b>!)\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString str = \"happy birthday\";\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//loop through each character in str</div>\n\t\t\t\t<br/>\n\t\t\t\tfor(int i = 0; i &lt;= str.length(); i++)&#123;<br/>\n\t\t\t\t<p>\n\t\t\t\t\t<div className=\"comment\">//use charAt() to print out each character on its own line</div><br/>\n\t\t\t\t\tSystem.out.println(str.charAt(i));\n\t\t\t\t</p><br/>\n\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\th<br/>\n\t\t\t\ta<br/>\n\t\t\t\tp<br/>\n\t\t\t\tp<br/>\n\t\t\t\ty<br/>\n\t\t\t\t <br/>\n\t\t\t\tb<br/>\n\t\t\t\ti<br/>\n\t\t\t\tr<br/>\n\t\t\t\tt<br/>\n\t\t\t\th<br/>\n\t\t\t\td<br/>\n\t\t\t\ta<br/>\n\t\t\t\ty<br/>\n\t\t\t\t</div>\n\t\t\t\t<h3>is it really time for recap? get it. for. hehe.</h3>\n\t\t\t\t<b>ayyyyyy!</b> you made it to recap!<br/><br/>\n\t\t\t\tnow, i know that was a lot, so here's a lil' summary:<br/><br/>\n\t\t\t\ta <b>loop</b> is a repeating block of code. one type of loop is a <b>for loop</b>, which helps to loop through a block of code a <b>specific number of times</b>. here is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tthere are three parts to a for loop: \n\t\t\t\t<ol>\n\t\t\t\t\t<li><b>initialize</b>, when you make your integer <b>i</b> and set it equal to the start number</li>\n\t\t\t\t\t<li><b>condition</b>, where you decide <b>how</b> and <b>when</b> your loop should stop using the different signs</li>\n\t\t\t\t\t<li><b>iterate</b>, where you <b>increment</b> your integer a specific amount each time it loops through your code</li>\n\t\t\t\t</ol>\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">blast off:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>for loops</b> to <b>print out a count down before the blast off of a rocket ship</b>. this will require two steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>construct a for loop that counts down from 5 to 1</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>each number should be printed to the console on its own line</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>after the for loop is over, print \"blast off!\" to the console</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for step 1, your initialize component should be int i = 5 since your countdown begins at 5\",\n\t\t\t\t\t\t\t\"for step 1, your condition component should be i >= 1 because your countdown ends at 1, so as long as i is greater than or equal to 1, the countdown should keep going\",\n\t\t\t\t\t\t\t\"for step 1, your iterate component should be i-- because you want i to decrement, or decrease by 1, each iteration, since you are counting down\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"for-loop-blast-off\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-blast-off?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks similar to ours <b>:)</b><br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-blast-off-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">nibble nibble nom nom:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>for loops</b> to print out <b>nibble</b> and <b>nom</b> multiple times; an example output may look like this: \"nibble nibble nibble nom nom nom\".\n\t\t\t\t\tthis will require four steps: <br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a variable <i>n</i> that stores how many times you want to print out nibble and nom</li>\n\t\t\t\t\t\t<li>construct a for loop that iterates <i>n</i> times</li>\n\t\t\t\t\t\t<li>inside the for loop, print out nibble</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>we want our nibbles and noms to all appear on the same line when they are printed</li>\n\t\t\t\t\t\t\t<li>we also want a space in between each nibble and nom</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>construct a second for loop that prints out nom <i>n</i> times</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>this construction should be almost identical to what you did in steps 2 and 3</li>\n\t\t\t\t\t\t\t<li>the only difference is that you are printing nom instead of nibble</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for step 2, your initialize component should be int i = 1 and your iterate component should be i++, because you want i to increment each time you loop\",\n\t\t\t\t\t\t\t\"for step 2, since you want your for loop to iterate n times, where n is how many times you want to print out nibble and nom, your condition component should be i <= n\",\n\t\t\t\t\t\t\t\"for step 3, you can use same-line printing - System.out.print() – so that your nibbles and noms are on the same line in the console\",\n\t\t\t\t\t\t\t\"for step 3, add a space after nibble and nom when you print them out inside your for loops\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"for-loop-nibble-nibble-nom-nom\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-nibble-nibble-nom-nom?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks similar to ours <b>:)</b><br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-nibble-nibble-nom-nom-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ForLoop;"]},"metadata":{},"sourceType":"module"}