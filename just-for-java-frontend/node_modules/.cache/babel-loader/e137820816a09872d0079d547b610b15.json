{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Overloading.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Overloading extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), \"mwahaha \\u2013\\xA0we aren't done with \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 44\n      }\n    }, \"functions\"), \" quite yet! there's one last concept we need to address, called \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 124\n      }\n    }, \"overloading\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, \"overloading, as in you put too many clothes in the laundry machine?\"), \"not rly... but appreciate the effort. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 52\n      }\n    }, \"overloading\"), \", or more explicitly called method overloading, allows \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 125\n      }\n    }, \"multiple\"), \" functions to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 163\n      }\n    }, \"same name\"), \", as long as the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 196\n      }\n    }, \"number of parameters\"), \" and/or the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 235\n      }\n    }, \"type of parameters\"), \" are \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 265\n      }\n    }, \"different\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 284\n      }\n    }, \"psst. need a reminder\"), \" on what a parameter is? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 368\n      }\n    }, \"functions page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, \"woah that definition was overloaded with technical language\"), \"dw! to illustrate the concept of function overloading, let's go through \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 86\n      }\n    }, \"examples pertaining to each of the following conditions\"), \":\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 23\n      }\n    }, \"type\"), \" of parameters differ\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 23\n      }\n    }, \"number\"), \" of parameters differ\")), \"remember, overloading means that as long as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 58\n      }\n    }, \"at least one\"), \" of the conditions above is true, then two functions can have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 143\n      }\n    }, \"same name\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }\n    }, \"overloading by type of parameters\"), \"let's say that you want to make a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 48\n      }\n    }, \"sum function\"), \". pretty simple, right? our function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 104\n      }\n    }, \"takes in two numbers\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 136\n      }\n    }, \"returns their sum\"), \". what will the parameters and the return type be? we will pass \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 224\n      }\n    }, \"two ints\"), \" to our function, and its return type will be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 285\n      }\n    }, \"int\"), \". check out our sum function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }\n    }), \"but how about if we wanted to calculate the sum of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 70\n      }\n    }, \"two doubles\"), \", not of two ints? well guess what?! because of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 136\n      }\n    }, \"overloading\"), \", we can write two functions, both of them called \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 204\n      }\n    }, \"sum\"), \", where one takes in two \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 239\n      }\n    }, \"ints\"), \" and the other takes in two \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 278\n      }\n    }, \"doubles\"), \". of course, this is only possible because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 335\n      }\n    }, \"the types of the parameters differ\"), \". check out our overloaded sum functions below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two doubles\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }\n    }), \"public static double sum(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }\n    }), \"}\"), \"very fun! very fresh!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }\n    }, \"how do you call overloaded functions? cause rnt their names the same?\"), \"it is true that the names of overloaded functions are identical; however, their \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 94\n      }\n    }, \"parameters are different\"), \", and that's how we can distinguish them. using our overloaded sum functions that we made earlier, let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 230\n      }\n    }, \"call\"), \" them in our main method:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \"//this sum function call invokes the sum function that takes in two doubles, since 1.3 and 6.4 are integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }), \"double myDouble = sum(1.3, 6.4); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 48\n      }\n    }, \"//myDouble = 7.7\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, \"//this sum function call invokes the sum function that takes in two ints, since 1 and 6 are integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), \"int myInt = sum(1, 6); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 38\n      }\n    }, \"//myInt = 7\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two doubles\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }\n    }), \"public static double sum(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }\n    }), \"}\"), \"sweeeet!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }\n    }, \"overloading by number of parameters\"), \"now that we've learned how to overload by changing the type of parameters, let's learn how to overload by changing the number of parameters. say we wanted to make a function that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 193\n      }\n    }, \"returns the absolute value of the maximum number between two integers\"), \". do you remember the easy way to get the absolute value of a number and the maximum number between two numbers? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 383\n      }\n    }, \"hint:\"), \" it starts with an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 431\n      }\n    }, \"\\\"m\\\"\"), \" and ends in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 454\n      }\n    }, \"\\\"ath\\\"\"), \".) omg wow! you guessed it! we need to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 509\n      }\n    }, \"Math\"), \"! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 523\n      }\n    }, \"psst. need a reminder\"), \" on how to use the Math.max and Math.abs functions? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 634\n      }\n    }, \"math page\"), \"!) once you have an idea on what you need to do, check out our absMax function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 14\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 14\n      }\n    }), \"now, say we wanted to return the absolute value of the maximum number between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 92\n      }\n    }, \"not just two\"), \", but \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 117\n      }\n    }, \"three integers\"), \". woooooo is it getting \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 162\n      }\n    }, \"hot\"), \" in here? cause we're getting \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 202\n      }\n    }, \"kinda spicyyy\"), \". anyways, even though both absMax functions take in int parameters, our first function takes in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 319\n      }\n    }, \"two ints\"), \", while our second function will take in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 375\n      }\n    }, \"three ints\"), \". so, we can name our second method absMax as well. of course, this is only possible because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 485\n      }\n    }, \"the number of the parameters differ\"), \". check out our overloaded absMax functions below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between three integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b, int c) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(Math.max(a,b), c));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 14\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 14\n      }\n    }), \"finally, let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 29\n      }\n    }, \"call\"), \" both of our functions in the main method (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 83\n      }\n    }, \"btw:\"), \" gotta love dem main method variable names):\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 15\n      }\n    }, \"//this absMax function call invokes the absMax function that takes in two ints, since we provide two arguments\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }), \"int bloop = absMax(-1, -3); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 43\n      }\n    }, \"//bloop = 1\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, \"//this absMax function call invokes the absMax function that takes in three ints, since we provide three arguments\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }), \"int bloopBloop = absMax(-1, -3, 2); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 51\n      }\n    }, \"//bloopBloop = 2\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between three integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b, int c) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(Math.max(a,b), c));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 14\n      }\n    }), \"}\"), \"bloop.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 14\n      }\n    }, \"what's the point of overloading anyway?!\"), \"it may seem like a pointless nuance rn, but let's see what life would be like \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 92\n      }\n    }, \"without overloading\"), \". check out the code below, which creates two sum methods that are called in the main method:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 14\n      }\n    }, \"double myDouble = sumWithDoubles(1.3, 6.4);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }), \"int myInt = sumWithInts(1, 6);\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 19\n      }\n    }), \"public static int sumWithInts(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    }), \"public static double sumWithDoubles(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 14\n      }\n    }), \"}\"), \"it's pretty irritating to have to remember what you named your two different sum functions: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 106\n      }\n    }, \"sumWithInts\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 129\n      }\n    }, \"sumWithDoubles\"), \". if you had even more sum functions, imagine having to remember the difference between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 238\n      }\n    }, \"sum1\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 251\n      }\n    }, \"sum2\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 264\n      }\n    }, \"sum3\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 277\n      }\n    }, \"sum4\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 290\n      }\n    }, \"sum5\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 303\n      }\n    }, \"sum6\"), \"... hopefully you get the point by now.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 14\n      }\n    }), \"overloading allows functions that perform \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 56\n      }\n    }, \"similar or identical tasks\"), \" to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 102\n      }\n    }, \"same name\"), \", which not only makes your life easier and more convenient as a programmer, but also \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 204\n      }\n    }, \"improves the readability of your program\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 14\n      }\n    }, \"feelin' overloaded with info? time to recap!!\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 14\n      }\n    }, \"dang!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }\n    }, \"overloading\"), \" allows multiple functions to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 62\n      }\n    }, \"same name\"), \" as long as one or both of the following conditions are true:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 6\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 14\n      }\n    }, \"type of parameters\"), \" differ between the functions\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 23\n      }\n    }, \"number of parameters\"), \" differ between the functions\")), \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }\n    }, \"benefit\"), \" of overloading is that functions that perform the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 74\n      }\n    }, \"same tasks\"), \" but take in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 104\n      }\n    }, \"different parameters\"), \" can still have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 151\n      }\n    }, \"same name\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Overloading;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Overloading.js"],"names":["React","ProgressUpdater","Hint","Overloading","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAAyC;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACVC,MAAAA,QAAQ,EAAE;AADA,KAAX;AAGA;;AAEDC,EAAAA,mBAAmB,CAACD,QAAD,EAAU;AAC5B,SAAKE,QAAL,CAAc;AACbF,MAAAA,QAAQ,EAAEA;AADG,KAAd;AAGA;;AAGDG,EAAAA,MAAM,GAAE;AACP,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,eAAD;AACW,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWM,IAD5B;AAEW,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IAF5B;AAGW,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAHhC;AAIW,MAAA,MAAM,EAAGA,QAAD,IAAY,KAAKC,mBAAL,CAAyBD,QAAzB,CAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,yDAOwC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPxC,mFAOwH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPxH,oBAQU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EARV,yDASgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAThD,0EASyH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATzH,0CAS+J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAT/J,oCASgM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAThM,+BASuO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BATvO,wBASqQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATrQ,sBASwR;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BATxR,0DAS4W;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAT5W,qBAUU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAVV,2FAWkF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAXlF,oBAYU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAR,0BADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAR,0BAFD,CAZV,+DAgBsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAhBtD,qFAgB2I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAhB3I,oBAiBU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAjBV,qDAkB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAlB5C,wDAkBoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAlBpG,wBAkBoI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAlBpI,mFAkB4N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAlB5N,iEAkByR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAlBzR,sDAmBU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,wDAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,MAnBV,eA8BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BV,sEA8BkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA9BlE,mEA8BoI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA9BpI,qEA8BwM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA9BxM,4CA8B2O;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9B3O,+CA8BkR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA9BlR,8DA8B2U;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CA9B3U,kEA+BU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,wDAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBALA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,oBAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,eAUK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVL,eAWA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAXA,eAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,iEAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAfA,eAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,MA/BV,wCAqDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EArDV,mGAsD0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAtD1F,4HAsDkO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtDlO,4CAuDU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qHADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,oDAGkC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAHlC,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,eAKC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8GALD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,0CAOwB;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAPxB,CAHA,eAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,oBAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAcK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdL,eAeA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAfA,eAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,wDAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,eAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAnBA,eAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBA,oBAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBA,eAwBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBL,eAyBA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DAzBA,eA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BA,iEA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BA,eA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA7BA,eAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCA,MAvDV,2BA2FU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA3FV,sMA4F6L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+EA5F7L,qIA4F2X;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA5F3X,sCA4F2a;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA5F3a,gCA4Fkc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA5Flc,8DA4Fyf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5Fzf,sBA4FugB;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA5FvgB,qFA4FsnB;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA5FtnB,wGA6FU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,2DAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCALA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,MA7FV,eAwGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxGV,iGAyGwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAzGxF,yBAyGiH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAzGjH,2CAyG8J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAzG9J,iDAyGsM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAzGtM,oHAyG2T;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAzG3T,4DAyGmX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAzGnX,gHAyGie;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAzGje,qEA0GU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,2DAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCALA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,oBAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,eAUK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVL,eAWA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAXA,eAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,kEAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAfA,eAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,MA1GV,eA+HU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/HV,kCAgIyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhIzB,8DAgI+E;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhI/E,+DAiIU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wHADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,+CAG6B;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAH7B,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,eAKC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HALD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,uDAOqC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAPrC,CAHA,eAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,oBAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,eAcK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdL,eAeA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAfA,eAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,2DAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,eAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAnBA,eAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBA,oBAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBA,eAwBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBL,eAyBA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yGAzBA,eA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1BA,kEA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5BA,eA6BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDA7BA,eAgCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCA,MAjIV,yBAqKU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDArKV,iGAsKwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAtKxF,gHAuKU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,mCAHA,eAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,oBAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,eAUK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVL,gEAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAbA,eAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhBA,oBAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,eAkBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBL,4EAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBA,eAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArBA,eAwBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBA,MAvKV,+GAkMsG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAlMtG,wBAkM6H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAlM7H,2GAkM0O;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlM1O,qBAkMuP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlMvP,qBAkMoQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlMpQ,qBAkMiR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlMjR,qBAkM8R;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlM9R,qBAkM2S;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlM3S,0DAmMU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnMV,6DAoMoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCApMpD,gCAoMkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBApMlG,yGAoMwM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDApMxM,oBAqMU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDArMV,eAsMU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAtMV,yCAuMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvMD,eAuMM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvMN,eAwMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAxMD,0DAwM0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAxM1D,gFAyMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAR,kCADD,eAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAR,kCAFV,CAzMD,uBA6MK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBA7ML,sEA6MsE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7MtE,gCA6MoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BA7MpG,uCA6MmJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA7MnJ,oBA8MC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9MD,eA+MU,oBAAC,eAAD;AACE,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWM,IADnB;AAEE,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IAFnB;AAGE,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAHvB;AAIE,MAAA,MAAM,EAAGA,QAAD,IAAY,KAAKC,mBAAL,CAAyBD,QAAzB,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/MV,8BAqNqB;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBArNrB,0BAqNiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBArNjE,8EAqN4I;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArN5I,CADD;AAyNA;;AAzOuC;;AA4OzC,eAAeL,WAAf","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Overloading extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            mwahaha – we aren't done with <b>functions</b> quite yet! there's one last concept we need to address, called <b>overloading</b>.\n\t            <h3>overloading, as in you put too many clothes in the laundry machine?</h3>\n\t            not rly... but appreciate the effort. <b>overloading</b>, or more explicitly called method overloading, allows <b>multiple</b> functions to have the <b>same name</b>, as long as the <b>number of parameters</b> and/or the <b>type of parameters</b> are <b>different</b>. (<b className=\"note\">psst. need a reminder</b> on what a parameter is? check out the <b className=\"pageName\">functions page</b>!)\n\t            <h3>woah that definition was overloaded with technical language</h3>\n\t            dw! to illustrate the concept of function overloading, let's go through <b>examples pertaining to each of the following conditions</b>:\n\t            <ul>\n\t            \t<li>the <b>type</b> of parameters differ</li>\n\t            \t<li>the <b>number</b> of parameters differ</li>\n\t            </ul>\n\t            remember, overloading means that as long as <b>at least one</b> of the conditions above is true, then two functions can have the <b>same name</b>.\n\t            <h3>overloading by type of parameters</h3>\n\t            let's say that you want to make a <b>sum function</b>. pretty simple, right? our function <b>takes in two numbers</b> and <b>returns their sum</b>. what will the parameters and the return type be? we will pass <b>two ints</b> to our function, and its return type will be <b>int</b>. check out our sum function below:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            <br/>but how about if we wanted to calculate the sum of <b>two doubles</b>, not of two ints? well guess what?! because of <b>overloading</b>, we can write two functions, both of them called <b>sum</b>, where one takes in two <b>ints</b> and the other takes in two <b>doubles</b>. of course, this is only possible because <b>the types of the parameters differ</b>. check out our overloaded sum functions below: \n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two doubles</div>\n\t            <br/>\n\t            public static double sum(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            very fun! very fresh!\n\t            <h3>how do you call overloaded functions? cause rnt their names the same?</h3>\n\t            it is true that the names of overloaded functions are identical; however, their <b>parameters are different</b>, and that's how we can distinguish them. using our overloaded sum functions that we made earlier, let's <b>call</b> them in our main method:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \t<div className=\"comment\">//this sum function call invokes the sum function that takes in two doubles, since 1.3 and 6.4 are integers</div>\n\t            \t<br/>\n\t            \tdouble myDouble = sum(1.3, 6.4); <div className=\"comment\">//myDouble = 7.7</div>\n\t            \t<br/>\n\t            \t<div className=\"comment\">//this sum function call invokes the sum function that takes in two ints, since 1 and 6 are integers</div>\n\t            \t<br/>\n\t            \tint myInt = sum(1, 6); <div className=\"comment\">//myInt = 7</div>\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two doubles</div>\n\t            <br/>\n\t            public static double sum(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            sweeeet!\n\t            <h3>overloading by number of parameters</h3>\n\t            now that we've learned how to overload by changing the type of parameters, let's learn how to overload by changing the number of parameters. say we wanted to make a function that <b>returns the absolute value of the maximum number between two integers</b>. do you remember the easy way to get the absolute value of a number and the maximum number between two numbers? (<b className=\"note\">hint:</b> it starts with an <b>\"m\"</b> and ends in <b>\"ath\"</b>.) omg wow! you guessed it! we need to use <b>Math</b>! (<b className=\"note\">psst. need a reminder</b> on how to use the Math.max and Math.abs functions? check out the <b className=\"pageName\">math page</b>!) once you have an idea on what you need to do, check out our absMax function below:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            <br/>\n\t            now, say we wanted to return the absolute value of the maximum number between <b>not just two</b>, but <b>three integers</b>. woooooo is it getting <b>hot</b> in here? cause we're getting <b>kinda spicyyy</b>. anyways, even though both absMax functions take in int parameters, our first function takes in <b>two ints</b>, while our second function will take in <b>three ints</b>. so, we can name our second method absMax as well. of course, this is only possible because <b>the number of the parameters differ</b>. check out our overloaded absMax functions below: \n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between three integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b, int c) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(Math.max(a,b), c));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            <br/>\n\t            finally, let's <b>call</b> both of our functions in the main method (<b className=\"note\">btw:</b> gotta love dem main method variable names):\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \t<div className=\"comment\">//this absMax function call invokes the absMax function that takes in two ints, since we provide two arguments</div>\n\t            \t<br/>\n\t            \tint bloop = absMax(-1, -3); <div className=\"comment\">//bloop = 1</div>\n\t            \t<br/>\n\t            \t<div className=\"comment\">//this absMax function call invokes the absMax function that takes in three ints, since we provide three arguments</div>\n\t            \t<br/>\n\t            \tint bloopBloop = absMax(-1, -3, 2); <div className=\"comment\">//bloopBloop = 2</div>\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between three integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b, int c) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(Math.max(a,b), c));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            bloop.\n\t            <h3>what's the point of overloading anyway?!</h3>\n\t            it may seem like a pointless nuance rn, but let's see what life would be like <b>without overloading</b>. check out the code below, which creates two sum methods that are called in the main method:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \tdouble myDouble = sumWithDoubles(1.3, 6.4);\n\t            \t<br/>\n\t            \tint myInt = sumWithInts(1, 6);\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            public static int sumWithInts(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            public static double sumWithDoubles(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            it's pretty irritating to have to remember what you named your two different sum functions: <b>sumWithInts</b> and <b>sumWithDoubles</b>. if you had even more sum functions, imagine having to remember the difference between <b>sum1</b>, <b>sum2</b>, <b>sum3</b>, <b>sum4</b>, <b>sum5</b>, <b>sum6</b>... hopefully you get the point by now.\n\t            <br/>\n\t            overloading allows functions that perform <b>similar or identical tasks</b> to have the <b>same name</b>, which not only makes your life easier and more convenient as a programmer, but also <b>improves the readability of your program</b>.\n\t            <h3>feelin' overloaded with info? time to recap!!</h3>\n\t            <b>dang!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\t<b>overloading</b> allows multiple functions to have the <b>same name</b> as long as one or both of the following conditions are true:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>the <b>type of parameters</b> differ between the functions</li>\n\t            \t<li>the <b>number of parameters</b> differ between the functions</li>\n\t\t\t\t</ul>\n\t\t\t\tthe <b>benefit</b> of overloading is that functions that perform the <b>same tasks</b> but take in <b>different parameters</b> can still have the <b>same name</b>.\n\t\t\t\t<h3>pit stop</h3>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Overloading;"]},"metadata":{},"sourceType":"module"}