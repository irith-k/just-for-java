{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Printing.js\";\nimport React from 'react';\n\nclass Printing extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    }, \"printing\"), \" is used to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 32\n      }\n    }, \"display information in the console\"), \". this is how we \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 90\n      }\n    }, \"output\"), \" anything to the user, and is a great way to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 148\n      }\n    }, \"check if your code is working\"), \" properly.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 194\n      }\n    }), \"there are two types of printing statements:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 48\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 6\n      }\n    }, \"same-line printing\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 6\n      }\n    }, \"next-line printing\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you print something?\"), \"here is the blueprint for same-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 50\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }\n    }, \"<information>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 10\n      }\n    }), \"and here is the blueprint for next-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 27\n      }\n    }, \"<information>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }, \"ok, but what's the difference between the two?\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }\n    }, \"same-line printing\"), \" prints information without a line break. for example, if you were to type:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\\\"I like pizza. \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 41\n      }\n    }), \"System.out.print(\\\"What about you?\\\");\"), \"it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, \"I like food. What about you?\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }), \"meanwhile, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 16\n      }\n    }, \"next-line printing\"), \" prints information with a line break. for example, if you were to type:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\\\"I like pizza. \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 43\n      }\n    }), \"System.out.println(\\\"What about you?\\\");\"), \"it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"I like food. \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 19\n      }\n    }), \"What about you?\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, \"so what else can you print?\"), \"the sky's the limit with printing! the previous examples showed you how to print \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 86\n      }\n    }, \"Strings\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 102\n      }\n    }, \"btw:\"), \" remember that Strings are enclosed in double quotation marks), but you can also print \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 200\n      }\n    }, \"characters\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 219\n      }\n    }, \"integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 236\n      }\n    }, \"doubles\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 255\n      }\n    }, \"booleans\"), \". take a look at the code below and predict what is outputed in the console! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 348\n      }\n    }, \"hint:\"), \" notice whether the code uses same-line or next-line printing.)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, \"//print out a character, an integer, a double, and a boolean\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 5\n      }\n    }), \"System.out.println('$');\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }), \"System.out.println(13);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }), \"System.out.println(66.6666);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }), \"System.out.println(false);\"), \"have a prediction in mind? awesome. it would look like this in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }, \"$\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }), \"13\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }), \"66.6666\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"false\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, \"cool! anything else?\"), \"in fact, yes! just one more thing. you can also print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 63\n      }\n    }, \"variables\"), \" by putting the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 95\n      }\n    }, \"variable name\"), \" in between the parentheses of the print statement. here is the blueprint for printing a variable using both same-line and next-line printing:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 257\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, \"<name>\"), \");\"), \" or\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 53\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, \"System.out.println(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 27\n      }\n    }, \"<name>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 52\n      }\n    }), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on how to initialize a variable and change its value? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 120\n      }\n    }, \"variables page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }, \"System.out.print(\\\"is it time for recap?\\\");\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }, \"yup!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 38\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 43\n      }\n    }), \"remember, there are two types of printing: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 48\n      }\n    }, \"same-line printing\"), \", which is you can do by typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 105\n      }\n    }, \"System.out.print();\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"next-line printing\"), \", which you can do by typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 63\n      }\n    }, \"System.out.println();\"), \". both of these print statements print information into the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 63\n      }\n    }, \"console\"), \". \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 79\n      }\n    }), \"you can print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }\n    }, \"Strings\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 39\n      }\n    }, \"characters\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 58\n      }\n    }, \"integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 75\n      }\n    }, \"doubles\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 95\n      }\n    }, \"booleans\"), \". finally, you can also print out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 144\n      }\n    }, \"variables\"), \" by putting the variable name in between the parentheses of the print statement.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }\n    }, \"practice\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"800px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/CanineFreshExpertise?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Printing;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Printing.js"],"names":["React","Printing","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Printing extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<b>printing</b> is used to <b>display information in the console</b>. this is how we <b>output</b> anything to the user, and is a great way to <b>check if your code is working</b> properly.<br/>\n\t\t\t\tthere are two types of printing statements:<br/>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>same-line printing</li>\n\t\t\t\t\t<li>next-line printing</li>\n\t\t\t\t</ul>\n\t\t\t\t<h3>wait, so how do you print something?</h3>\n\t\t\t\there is the blueprint for same-line printing:<br/>\n\t\t\t\t<b>System.out.print(<i>&lt;information&gt;</i>);</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tand here is the blueprint for next-line printing:<br/>\n\t\t\t\t<b>System.out.println(<i>&lt;information&gt;</i>);</b>\n\t\t\t\t<br/>\n\t\t\t\t<h3>ok, but what's the difference between the two?</h3>\n\t\t\t\t<b>same-line printing</b> prints information without a line break. for example, if you were to type:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tSystem.out.print(\"I like pizza. \");<br/>\n\t\t\t\t\tSystem.out.print(\"What about you?\");\n\t\t\t\t</div>\n\t\t\t\tit would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tI like food. What about you?\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tmeanwhile, <b>next-line printing</b> prints information with a line break. for example, if you were to type:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tSystem.out.println(\"I like pizza. \");<br/>\n\t\t\t\t\tSystem.out.println(\"What about you?\");\n\t\t\t\t</div>\n\t\t\t\tit would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tI like food. <br/>\n\t\t\t\t\tWhat about you?\n\t\t\t\t</div>\n\t\t\t\t<h3>so what else can you print?</h3>\n\t\t\t\tthe sky's the limit with printing! the previous examples showed you how to print <b>Strings</b> (<b>btw:</b> remember that Strings are enclosed in double quotation marks), but you can also print <b>characters</b>, <b>integers</b>, <b>doubles</b>, or <b>booleans</b>. take a look at the code below and predict what is outputed in the console! (<b className=\"note\">hint:</b> notice whether the code uses same-line or next-line printing.)\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//print out a character, an integer, a double, and a boolean</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println('$');\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(13);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(66.6666);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(false);\n\t\t\t\t</div>\n\t\t\t\thave a prediction in mind? awesome. it would look like this in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t$\n\t\t\t\t<br/>\n\t\t\t\t13\n\t\t\t\t<br/>\n\t\t\t\t66.6666\n\t\t\t\t<br/>\n\t\t\t\tfalse\n\t\t\t\t</div>\n\t\t\t\t<h3>cool! anything else?</h3>\n\t\t\t\tin fact, yes! just one more thing. you can also print out <b>variables</b> by putting the <b>variable name</b> in between the parentheses of the print statement. here is the blueprint for printing a variable using both same-line and next-line printing:<br/>\n\t\t\t\t<b>System.out.print(<i>&lt;name&gt;</i>);</b> or<br/>\n\t\t\t\t<b>System.out.println(<i>&lt;name&gt;</i>);</b><br/>\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on how to initialize a variable and change its value? check out the <b className=\"pageName\">variables page</b>!)\n\t\t\t\t<h3>System.out.print(\"is it time for recap?\");</h3>\n\t\t\t\t<b>yup!</b> you made it to recap!<br/><br/>\n\t\t\t\tremember, there are two types of printing: <b>same-line printing</b>, which is you can do by typing <b>System.out.print();</b>, \n\t\t\t\tand <b>next-line printing</b>, which you can do by typing <b>System.out.println();</b>. \n\t\t\t\tboth of these print statements print information into the <b>console</b>. <br/>\n\t\t\t\tyou can print out <b>Strings</b>, <b>characters</b>, <b>integers</b>, <b>doubles</b>, and <b>booleans</b>. finally, you can also print out <b>variables</b> by putting the variable name in between the parentheses of the print statement.\n\t\t\t\t<h3>practice</h3>\n\t\t\t\t<div className=\"repl\">\n\t\t\t\t<iframe height=\"800px\" width=\"100%\" src=\"https://repl.it/@justforjava/CanineFreshExpertise?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t</div>\n\t\t\t\t<br/><br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Printing;"]},"metadata":{},"sourceType":"module"}