{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Arithmetic.js\";\nimport React from 'react';\n\nclass Arithmetic extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 23\n      }\n    }, \"variables page\"), \" how to create \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 80\n      }\n    }, \"integers\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 100\n      }\n    }, \"doubles\"), \". on this page, we are going to use these two variable types in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 178\n      }\n    }, \"arithmetic operations\"), \". oooh, fancy right? not really. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 239\n      }\n    }, \"arithmetic\"), \" is just a cool-sounding word for the study of numbers and operations on them, such as addition, subtraction, multiplication, and division. here are the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 409\n      }\n    }, \"five operations\"), \" and their corresponding \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 456\n      }\n    }, \"operator symbols\"), \" that java provides:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 10\n      }\n    }, \"addition\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 41\n      }\n    }, \"+\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 10\n      }\n    }, \"subtraction\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 44\n      }\n    }, \"-\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 10\n      }\n    }, \"multiplication\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 47\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 10\n      }\n    }, \"division\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }\n    }, \"modulus\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 40\n      }\n    }, \"%\"))), \"you can apply any of the arithmetic operations listed above between:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 10\n      }\n    }, \"two integers\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between two integers, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 92\n      }\n    }, \"integer\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 10\n      }\n    }, \"two doubles\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between two doubles, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 91\n      }\n    }, \"double\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 10\n      }\n    }, \"an integer and a double\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, \"if you perform an operation between an integer and a double, no matter the order, then the resulting value is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 124\n      }\n    }, \"double\")))), \"note how the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 18\n      }\n    }, \"type of the result\"), \" after the operation changes depending on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 85\n      }\n    }, \"what types the operation is in between\"), \". now that you understand this nuance, let's talk about each operation.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, \"+ addition +\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"addition\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 38\n      }\n    }, \"+\"), \" in java. here are some examples of addition between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }\n    }, \"1 + 1 = 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, \"3.5 + 5.73 = 9.23\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 6\n      }\n    }, \"7 + 1.0 = 8.0\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 6\n      }\n    }, \"9.9 + 2 = 11.9\")), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \"the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }), \"the standard notation for addition is to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 46\n      }\n    }, \"change the value of a variable\"), \" to be equal to the result of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 113\n      }\n    }, \"adding another variable to that variable\"), \". here is the blueprint of the standard notation of adding another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 236\n      }\n    }, \"i\"), \" to a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 259\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 271\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 319\n      }\n    }, \"sum\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 334\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 8\n      }\n    }, \"sum\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, \"sum\"), \" + \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 34\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }, \"//add the tip to the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }), \"double price = 13.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }), \"double tip = 2.50;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }), \"price = price + tip;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }, \"the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }), \"the shorthand notation for addition is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 51\n      }\n    }, \"+=\"), \" to change the value of a variable to be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 110\n      }\n    }, \"adding another variable to itself\"), \". the standard notation and the shorthand notation do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 204\n      }\n    }, \"exactly the same thing\"), \". here is the blueprint of the shorthand notation of adding another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 310\n      }\n    }, \"i\"), \" to a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 333\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 345\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 393\n      }\n    }, \"sum\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 408\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 8\n      }\n    }, \"sum\"), \" += \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 22\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, \"//add the tip to the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }), \"double price = 13.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }), \"double tip = 2.50;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    }), \"price += tip;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }, \"the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }), \"if you want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 20\n      }\n    }, \"increment\"), \" a variable, there is actually a shorthand of the shorthand notation that we can use that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 126\n      }\n    }, \"automatically adds 1\"), \" to a variable using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 174\n      }\n    }, \"++\"), \". here is the blueprint of the shorthand of the shorthand notation of incrementing, or adding 1 to, a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 294\n      }\n    }, \"sum\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 306\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 354\n      }\n    }, \"sum\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 369\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 8\n      }\n    }, \"sum\"), \"++;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 10\n      }\n    }), \"now let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }), \"num = num + 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }\n    }), \"num += 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }\n    }, \"//increment the variable num using the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }\n    }), \"num++;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }, \"- subtraction -\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, \"subtraction\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 41\n      }\n    }, \"-\"), \" in java. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 60\n      }\n    }, \"btw:\"), \" subtraction is super similar to addition, so feel free to skim through this section if you understand it pretty well.) here are some examples of subtraction between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }\n    }, \"1 - 4 = -3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }\n    }, \"8.4 - 3.1 = 5.3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 6\n      }\n    }, \"22 - 0.001 = 21.999\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }, \"7.7 - 7 = 0.7\")), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, \"the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }), \"the standard notation for subtraction is to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 49\n      }\n    }, \"change the value of a variable\"), \" to be equal to the result of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 116\n      }\n    }, \"subtracting another variable to that variable\"), \". here is the blueprint of the standard notation of subtracting another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 249\n      }\n    }, \"i\"), \" from a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 274\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 293\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 341\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 363\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 8\n      }\n    }, \"difference\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 28\n      }\n    }, \"difference\"), \" - \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 48\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }, \"//subtract the discount from the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }), \"double price = 22.84;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }\n    }), \"double discount = 5.00;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }\n    }), \"price = price - discount;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }, \"the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }), \"the shorthand notation for subtraction is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 54\n      }\n    }, \"-=\"), \" to change the value of a variable to be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 113\n      }\n    }, \"subtracting another variable from itself\"), \". the standard notation and the shorthand notation do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 214\n      }\n    }, \"exactly the same thing\"), \". here is the blueprint of the shorthand notation of subtracting another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 325\n      }\n    }, \"i\"), \" from a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 350\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 369\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 417\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 439\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 8\n      }\n    }, \"difference\"), \" -= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, \"//subtract the discount from the price variable\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }), \"double price = 22.84;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }\n    }), \"double discount = 5.00;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }\n    }), \"price -= discount;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, \"the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }), \"if you want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 20\n      }\n    }, \"decrement\"), \" a variable, there is actually a shorthand of the shorthand notation that we can use that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 126\n      }\n    }, \"automatically subtracts 1\"), \" from a variable using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 181\n      }\n    }, \"--\"), \". here is the blueprint of the shorthand of the shorthand notation of decrementing, or subtracting 1 from, a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 308\n      }\n    }, \"difference\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 327\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 375\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 397\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 8\n      }\n    }, \"difference\"), \"++;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 10\n      }\n    }), \"now let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }), \"num = num - 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }), \"num -= 1;\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }\n    }, \"//decrement the variable num using the shorthand of the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }\n    }), \"int num = 0;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 5\n      }\n    }), \"num--;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }\n    }, \"* multiplication *\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }\n    }, \"multiplication\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 44\n      }\n    }, \"*\"), \" in java. here are some examples of multiplication between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 6\n      }\n    }, \"3 * 3 = 9\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 6\n      }\n    }, \"1.5 * 0.7 = 1.05\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 6\n      }\n    }, \"2 * 4.4 = 8.8\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 6\n      }\n    }, \"9.1 * 6 = 54.6\")), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }\n    }, \"the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 5\n      }\n    }), \"the standard notation for multiplication is to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 52\n      }\n    }, \"change the value of a variable\"), \" to be equal to the result of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 119\n      }\n    }, \"multiplying the variable by another variable\"), \". here is the blueprint of the standard notation of multiplying a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 245\n      }\n    }, \"product\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 280\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 290\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 338\n      }\n    }, \"difference\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 360\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 8\n      }\n    }, \"product\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 25\n      }\n    }, \"product\"), \" * \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 42\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 5\n      }\n    }, \"//multiply the price per cookie by the number of cookies to get the total\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 5\n      }\n    }), \"double price = 4.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 5\n      }\n    }), \"int cookies = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 5\n      }\n    }), \"price = price * cookies;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 5\n      }\n    }, \"the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 5\n      }\n    }), \"the shorthand notation for multiplication is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 57\n      }\n    }, \"*=\"), \" to change the value of a variable to be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 116\n      }\n    }, \"multiplying itself by another variable\"), \". the standard notation and the shorthand notation do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 215\n      }\n    }, \"exactly the same thing\"), \". here is the blueprint of the shorthand notation of multiplying a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 320\n      }\n    }, \"product\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 355\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 365\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 413\n      }\n    }, \"product\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 432\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 8\n      }\n    }, \"product\"), \" *= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 26\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 5\n      }\n    }, \"//multiply the price per cookie by the number of cookies to get the total\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 5\n      }\n    }), \"double price = 4.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 5\n      }\n    }), \"int cookies = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 5\n      }\n    }), \"price *= cookies;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }\n    }, \"/ division /\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 5\n      }\n    }, \"division\"), \" is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 38\n      }\n    }, \"/\"), \" in java. division in java is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 76\n      }\n    }, \"slightly different\"), \" from division in real life because, as we saw earlier, the result of an arithmetic operation between two integers is an integer itself. this means that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 254\n      }\n    }, \"dividing two integers will result in an integer\"), \". you most probably are thinking, \\\"okay. what's so bad about that?\\\" well, for example, what would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 406\n      }\n    }, \"3 / 2\"), \" be equal to? in real life, we would say that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 464\n      }\n    }, \"3 / 2 = 1.5\"), \", but 1.5 is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 497\n      }\n    }, \"double\"), \", and we need it to be an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 536\n      }\n    }, \"int\"), \". therefore, in java, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 568\n      }\n    }, \"3 / 2 = 1\"), \" because 1.5 gets \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 602\n      }\n    }, \"rounded down\"), \" to 1. the quotient when you divide by two integers \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 673\n      }\n    }, \"always get rounded down to the nearest integer\"), \". you can also think about it as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 759\n      }\n    }, \"the decimal portion of the quotient gets truncated\"), \". on the other hand, if you're performing division between two doubles or an integer and a double, as we said earlier the result should be a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 957\n      }\n    }, \"double\"), \", so the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 979\n      }\n    }, \"decimal portion remains\"), \" in the quotient. here are some examples of division between two integers, two doubles, and an integer and a double:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 6\n      }\n    }, \"9 / 4 = 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 6\n      }\n    }, \"9.0 / 4.0 = 2.25\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 6\n      }\n    }, \"9.0 / 4 = 2.25\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 6\n      }\n    }, \"9 / 4.0 = 2.25\")), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 5\n      }\n    }, \"the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 5\n      }\n    }), \"the standard notation for division is to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 46\n      }\n    }, \"change the value of a variable\"), \" to be equal to the result of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 113\n      }\n    }, \"dividing the variable by another variable\"), \". here is the blueprint of the standard notation of dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 233\n      }\n    }, \"quotient\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 269\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 279\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 327\n      }\n    }, \"quotient\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 347\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 8\n      }\n    }, \"quotient\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 26\n      }\n    }, \"quotient\"), \" / \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 44\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 5\n      }\n    }, \"//divide the total price by the number of people to split the price\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }\n    }), \"double price = 84.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 5\n      }\n    }), \"int people = 10;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 5\n      }\n    }), \"price = price / people;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 5\n      }\n    }, \"the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }\n    }), \"the shorthand notation for division is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 51\n      }\n    }, \"/=\"), \" to change the value of a variable to be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 110\n      }\n    }, \"dividing itself by another variable\"), \". the standard notation and the shorthand notation do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 206\n      }\n    }, \"exactly the same thing\"), \". here is the blueprint of the shorthand notation of dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 308\n      }\n    }, \"quotient\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 344\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 354\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 402\n      }\n    }, \"quotient\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 422\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 8\n      }\n    }, \"product\"), \" *= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 26\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 5\n      }\n    }, \"//divide the total price by the number of people to split the price\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 5\n      }\n    }), \"double price = 84.99;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 5\n      }\n    }), \"int people = 10;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 5\n      }\n    }), \"price /= people;\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 5\n      }\n    }, \"% modulus %\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 5\n      }\n    }, \"modulus\"), \" is a funky word which means \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 48\n      }\n    }, \"the remainder after you divide two numbers\"), \" and is denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 119\n      }\n    }, \"%\"), \". modulus is most commonly used \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 159\n      }\n    }, \"between integers\"), \", since integer division as we just learned rounds down to the nearest integer, leaving a remainder behind. let's revisit the example we had when discussing integer division: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 357\n      }\n    }, \"3 / 2\"), \". we already know that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 392\n      }\n    }, \"3 / 2 = 1\"), \", but what about \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 425\n      }\n    }, \"3 % 2\"), \"? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 440\n      }\n    }, \"btw:\"), \" 3 % 2 is pronounced \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 489\n      }\n    }, \"\\\"three mod two\\\"\"), \".) if you guessed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 529\n      }\n    }, \"1\"), \", you're correct! \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 555\n      }\n    }, \"3 % 2 = 1\"), \" because 3 / 2 is 1 \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 591\n      }\n    }, \"with a remainder of 1\"), \". here are some more examples using modulus between integers:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 6\n      }\n    }, \"22 % 4 = 2 because 22 / 4 is 5 with a remainder of 2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 6\n      }\n    }, \"3 % 5 = 3 because 3 / 5 is 0 with a remainder of 3\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 6\n      }\n    }, \"14 % 7 = 0 because 14 / 7 is 2 with a remainder of 0\")), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 5\n      }\n    }, \"the standard notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 5\n      }\n    }), \"the standard notation for modulus is to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 45\n      }\n    }, \"change the value of a variable\"), \" to be equal to the result of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 112\n      }\n    }, \"getting the remainder after dividing the variable by another variable\"), \". here is the blueprint of the standard notation of getting the remainder after dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 288\n      }\n    }, \"remainder\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 325\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 335\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 383\n      }\n    }, \"remainder\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 404\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 8\n      }\n    }, \"remainder\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 27\n      }\n    }, \"remainder\"), \" % \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 46\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 10\n      }\n    }), \"now let's use the standard notation in code! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 5\n      }\n    }, \"//get the leftover apples after dividing apples between friends\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 5\n      }\n    }), \"int apples = 8;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 5\n      }\n    }), \"int friends = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 5\n      }\n    }), \"apples = apples % friends;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 5\n      }\n    }, \"the shorthand notation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 5\n      }\n    }), \"the shorthand notation for modulus is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 50\n      }\n    }, \"%=\"), \" to change the value of a variable to be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 109\n      }\n    }, \"getting the remainder after dividing itself by another variable\"), \". the standard notation and the shorthand notation do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 233\n      }\n    }, \"exactly the same thing\"), \". here is the blueprint of the shorthand notation of getting the remainder after dividing a variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 363\n      }\n    }, \"remainder\"), \" by another variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 400\n      }\n    }, \"i\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 410\n      }\n    }, \"btw:\"), \" we can assume that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 458\n      }\n    }, \"remainder\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 479\n      }\n    }, \"i\"), \" have already been initialized):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 8\n      }\n    }, \"remainder\"), \" %= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 28\n      }\n    }, \"i\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 10\n      }\n    }), \"now let's convert the code above from standard notation into shorthand notation! take a look below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 5\n      }\n    }, \"//get the leftover apples after dividing apples between friends\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 5\n      }\n    }), \"int apples = 8;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 5\n      }\n    }), \"int friends = 5;\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 5\n      }\n    }), \"apples %= friends;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 5\n      }\n    }, \"divisibility, a common application of modulus\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 5\n      }\n    }), \"modulus is often used to figure out if a certain integer is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 65\n      }\n    }, \"divisible\"), \" by another integer. you might be wondering, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 126\n      }\n    }, \"\\\"how can modulus be used in divisibility?\\\"\"), \" great question! this whole section is dedicated to answering this question. let's dive into it!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 5\n      }\n    }), \"as we stated earlier, modulus represents the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 50\n      }\n    }, \"remainder after dividing two integers\"), \"; in other words, modulus is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 127\n      }\n    }, \"leftover\"), \". now for divisibility: if a number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 178\n      }\n    }, \"x\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 190\n      }\n    }, \"divisible\"), \" by a number \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 219\n      }\n    }, \"y\"), \", that means that \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 245\n      }\n    }, \"x\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 253\n      }\n    }, \"/\"), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 261\n      }\n    }, \"y\"), \" is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 276\n      }\n    }, \"integer\"), \". in other words, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 312\n      }\n    }, \"remainder\"), \" when you divide \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 345\n      }\n    }, \"x\"), \" by \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 357\n      }\n    }, \"y\"), \" should be equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 385\n      }\n    }, \"0\"), \". have you connected the dots? if so, awesome! if not, let's walk through an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 470\n      }\n    }, \"example\"), \" that will help you understand modulus and divisibility better:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 5\n      }\n    }, \":) recap :)\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 5\n      }\n    }, \"gr8!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 10\n      }\n    }), \"here are the five arithmetic operations we learned about on this page along with their operators:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 10\n      }\n    }, \"addition\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 41\n      }\n    }, \"+\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 10\n      }\n    }, \"subtraction\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 44\n      }\n    }, \"-\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 10\n      }\n    }, \"multiplication\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 47\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 10\n      }\n    }, \"division\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 41\n      }\n    }, \"/\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 10\n      }\n    }, \"modulus\"), \", denoted using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 40\n      }\n    }, \"%\"))), \"remember that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 19\n      }\n    }, \"modulus\"), \" means the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 44\n      }\n    }, \"remainder\"), \" after dividing and is commonly used in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 100\n      }\n    }, \"divisibility\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 10\n      }\n    }), \"here is the blueprint for how the resulting variable type changes based on whether you are performing an operation between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 128\n      }\n    }, \"two integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 149\n      }\n    }, \"two doubles\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 172\n      }\n    }, \"an integer and a double\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 5\n      }\n    }, \"<integer>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 28\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 52\n      }\n    }, \"<integer>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 77\n      }\n    }, \"<integer>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 5\n      }\n    }, \"<double>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 27\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 51\n      }\n    }, \"<double>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 75\n      }\n    }, \"<double>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 5\n      }\n    }, \"<integer>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 28\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 52\n      }\n    }, \"<double>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 76\n      }\n    }, \"<double>\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 5\n      }\n    }, \"<double>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 27\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 51\n      }\n    }, \"<integer>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 76\n      }\n    }, \"<double>\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 10\n      }\n    }), \"here is the blueprint for both the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 40\n      }\n    }, \"standard notation\"), \" and the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 73\n      }\n    }, \"shorthand notation\"), \" for performing an arithmetic operation on between \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 149\n      }\n    }, \"variable_1\"), \" and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 171\n      }\n    }, \"variable_2\"), \", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 196\n      }\n    }, \"variable_1\"), \" stores the result of the operation and \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 253\n      }\n    }, \"operator\"), \" can be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 276\n      }\n    }, \"+\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 286\n      }\n    }, \"-\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 296\n      }\n    }, \"*\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 306\n      }\n    }, \"/\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 319\n      }\n    }, \"%\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 8\n      }\n    }, \"<variable_1>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 36\n      }\n    }, \"<variable_1>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 62\n      }\n    }, \"<operator>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 86\n      }\n    }, \"<variable_2>\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 8\n      }\n    }, \"<variable_1>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 34\n      }\n    }, \"<operator>\"), \"= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 59\n      }\n    }, \"<variable_2>\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 10\n      }\n    }), \"and finally, if you want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 33\n      }\n    }, \"increment\"), \", which means add 1 to, or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 76\n      }\n    }, \"decrement\"), \", which means subtract 1 from, a variable, you can use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 147\n      }\n    }, \"++\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 161\n      }\n    }, \"--\"), \", respectively.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Arithmetic;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Arithmetic.js"],"names":["React","Arithmetic","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Arithmetic extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\twe learned on the <b className=\"pageName\">variables page</b> how to create <b>integers</b> and <b>doubles</b>. on this page, we are going to use these two variable types in <b>arithmetic operations</b>. oooh, fancy right? not really. <b>arithmetic</b> is just a cool-sounding word for the study of numbers and operations on them, such as addition, subtraction, multiplication, and division. here are the <b>five operations</b> and their corresponding <b>operator symbols</b> that java provides:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>addition</b>, denoted using <b>+</b></li>\n\t\t\t\t\t<li><b>subtraction</b>, denoted using <b>-</b></li>\n\t\t\t\t\t<li><b>multiplication</b>, denoted using <b>*</b></li>\n\t\t\t\t\t<li><b>division</b>, denoted using <b>/</b></li>\n\t\t\t\t\t<li><b>modulus</b>, denoted using <b>%</b></li>\n\t\t\t\t</ul>\n\t\t\t\tyou can apply any of the arithmetic operations listed above between:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>two integers</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between two integers, then the resulting value is an <b>integer</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>two doubles</b></li>  \n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between two doubles, then the resulting value is an <b>double</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>an integer and a double</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>if you perform an operation between an integer and a double, no matter the order, then the resulting value is an <b>double</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</ul>\n\t\t\t\tnote how the <b>type of the result</b> after the operation changes depending on <b>what types the operation is in between</b>. now that you understand this nuance, let's talk about each operation.\n\t\t\t\t<h3>+ addition +</h3>\n\t\t\t\t<b>addition</b> is denoted using <b>+</b> in java. here are some examples of addition between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>1 + 1 = 2</li>\n\t\t\t\t\t<li>3.5 + 5.73 = 9.23</li>\n\t\t\t\t\t<li>7 + 1.0 = 8.0</li>\n\t\t\t\t\t<li>9.9 + 2 = 11.9</li>\n\t\t\t\t</ul>\n\t\t\t\t<b>the standard notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe standard notation for addition is to <b>change the value of a variable</b> to be equal to the result of <b>adding another variable to that variable</b>. here is the blueprint of the standard notation of adding another variable <i>i</i> to a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i> = <i>sum</i> + <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//add the tip to the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 13.99;\n\t\t\t\t<br/>\n\t\t\t\tdouble tip = 2.50;\n\t\t\t\t<br/>\n\t\t\t\tprice = price + tip;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe shorthand notation for addition is to use <b>+=</b> to change the value of a variable to be equal to <b>adding another variable to itself</b>. the standard notation and the shorthand notation do <b>exactly the same thing</b>. here is the blueprint of the shorthand notation of adding another variable <i>i</i> to a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i> += <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//add the tip to the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 13.99;\n\t\t\t\t<br/>\n\t\t\t\tdouble tip = 2.50;\n\t\t\t\t<br/>\n\t\t\t\tprice += tip;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand of the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tif you want to <b>increment</b> a variable, there is actually a shorthand of the shorthand notation that we can use that <b>automatically adds 1</b> to a variable using <b>++</b>. here is the blueprint of the shorthand of the shorthand notation of incrementing, or adding 1 to, a variable <i>sum</i> (<b className=\"note\">btw:</b> we can assume that <i>sum</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>sum</i>++;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the standard notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum = num + 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum += 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//increment the variable num using the shorthand of the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum++;\n\t\t\t\t</div>\n\t\t\t\t<h3>- subtraction -</h3>\n\t\t\t\t<b>subtraction</b> is denoted using <b>-</b> in java. (<b className=\"note\">btw:</b> subtraction is super similar to addition, so feel free to skim through this section if you understand it pretty well.) here are some examples of subtraction between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>1 - 4 = -3</li>\n\t\t\t\t\t<li>8.4 - 3.1 = 5.3</li>\n\t\t\t\t\t<li>22 - 0.001 = 21.999</li>\n\t\t\t\t\t<li>7.7 - 7 = 0.7</li>\n\t\t\t\t</ul>\n\t\t\t\t<b>the standard notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe standard notation for subtraction is to <b>change the value of a variable</b> to be equal to the result of <b>subtracting another variable to that variable</b>. here is the blueprint of the standard notation of subtracting another variable <i>i</i> from a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i> = <i>difference</i> - <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//subtract the discount from the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 22.84;\n\t\t\t\t<br/>\n\t\t\t\tdouble discount = 5.00;\n\t\t\t\t<br/>\n\t\t\t\tprice = price - discount;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe shorthand notation for subtraction is to use <b>-=</b> to change the value of a variable to be equal to <b>subtracting another variable from itself</b>. the standard notation and the shorthand notation do <b>exactly the same thing</b>. here is the blueprint of the shorthand notation of subtracting another variable <i>i</i> from a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i> -= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//subtract the discount from the price variable</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 22.84;\n\t\t\t\t<br/>\n\t\t\t\tdouble discount = 5.00;\n\t\t\t\t<br/>\n\t\t\t\tprice -= discount;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand of the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tif you want to <b>decrement</b> a variable, there is actually a shorthand of the shorthand notation that we can use that <b>automatically subtracts 1</b> from a variable using <b>--</b>. here is the blueprint of the shorthand of the shorthand notation of decrementing, or subtracting 1 from, a variable <i>difference</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>difference</i>++;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's compare the standard notation, shorthand notation, and shorthand of the shorthand notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the standard notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum = num - 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum -= 1;\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//decrement the variable num using the shorthand of the shorthand notation</div>\n\t\t\t\t<br/>\n\t\t\t\tint num = 0;\n\t\t\t\t<br/>\n\t\t\t\tnum--;\n\t\t\t\t</div>\n\t\t\t\t<h3>* multiplication *</h3>\n\t\t\t\t<b>multiplication</b> is denoted using <b>*</b> in java. here are some examples of multiplication between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>3 * 3 = 9</li>\n\t\t\t\t\t<li>1.5 * 0.7 = 1.05</li>\n\t\t\t\t\t<li>2 * 4.4 = 8.8</li>\n\t\t\t\t\t<li>9.1 * 6 = 54.6</li>\n\t\t\t\t</ul>\n\t\t\t\t<b>the standard notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe standard notation for multiplication is to <b>change the value of a variable</b> to be equal to the result of <b>multiplying the variable by another variable</b>. here is the blueprint of the standard notation of multiplying a variable <i>product</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>difference</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>product</i> = <i>product</i> * <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//multiply the price per cookie by the number of cookies to get the total</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 4.99;\n\t\t\t\t<br/>\n\t\t\t\tint cookies = 5;\n\t\t\t\t<br/>\n\t\t\t\tprice = price * cookies;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe shorthand notation for multiplication is to use <b>*=</b> to change the value of a variable to be equal to <b>multiplying itself by another variable</b>. the standard notation and the shorthand notation do <b>exactly the same thing</b>. here is the blueprint of the shorthand notation of multiplying a variable <i>product</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>product</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>product</i> *= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//multiply the price per cookie by the number of cookies to get the total</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 4.99;\n\t\t\t\t<br/>\n\t\t\t\tint cookies = 5;\n\t\t\t\t<br/>\n\t\t\t\tprice *= cookies;\n\t\t\t\t</div>\n\t\t\t\t<h3>/ division /</h3>\n\t\t\t\t<b>division</b> is denoted using <b>/</b> in java. division in java is <b>slightly different</b> from division in real life because, as we saw earlier, the result of an arithmetic operation between two integers is an integer itself. this means that <b>dividing two integers will result in an integer</b>. you most probably are thinking, \"okay. what's so bad about that?\" well, for example, what would <b>3 / 2</b> be equal to? in real life, we would say that <b>3 / 2 = 1.5</b>, but 1.5 is a <b>double</b>, and we need it to be an <b>int</b>. therefore, in java, <b>3 / 2 = 1</b> because 1.5 gets <b>rounded down</b> to 1. the quotient when you divide by two integers <b>always get rounded down to the nearest integer</b>. you can also think about it as <b>the decimal portion of the quotient gets truncated</b>. on the other hand, if you're performing division between two doubles or an integer and a double, as we said earlier the result should be a <b>double</b>, so the <b>decimal portion remains</b> in the quotient. here are some examples of division between two integers, two doubles, and an integer and a double:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>9 / 4 = 2</li>\n\t\t\t\t\t<li>9.0 / 4.0 = 2.25</li>\n\t\t\t\t\t<li>9.0 / 4 = 2.25</li>\n\t\t\t\t\t<li>9 / 4.0 = 2.25</li>\n\t\t\t\t</ul>\n\t\t\t\t<b>the standard notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe standard notation for division is to <b>change the value of a variable</b> to be equal to the result of <b>dividing the variable by another variable</b>. here is the blueprint of the standard notation of dividing a variable <i>quotient</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>quotient</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>quotient</i> = <i>quotient</i> / <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//divide the total price by the number of people to split the price</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 84.99;\n\t\t\t\t<br/>\n\t\t\t\tint people = 10;\n\t\t\t\t<br/>\n\t\t\t\tprice = price / people;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe shorthand notation for division is to use <b>/=</b> to change the value of a variable to be equal to <b>dividing itself by another variable</b>. the standard notation and the shorthand notation do <b>exactly the same thing</b>. here is the blueprint of the shorthand notation of dividing a variable <i>quotient</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>quotient</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>product</i> *= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//divide the total price by the number of people to split the price</div>\n\t\t\t\t<br/>\n\t\t\t\tdouble price = 84.99;\n\t\t\t\t<br/>\n\t\t\t\tint people = 10;\n\t\t\t\t<br/>\n\t\t\t\tprice /= people;\n\t\t\t\t</div>\n\t\t\t\t<h3>% modulus %</h3>\n\t\t\t\t<b>modulus</b> is a funky word which means <b>the remainder after you divide two numbers</b> and is denoted using <b>%</b>. modulus is most commonly used <b>between integers</b>, since integer division as we just learned rounds down to the nearest integer, leaving a remainder behind. let's revisit the example we had when discussing integer division: <b>3 / 2</b>. we already know that <b>3 / 2 = 1</b>, but what about <b>3 % 2</b>? (<b className=\"note\">btw:</b> 3 % 2 is pronounced <b>\"three mod two\"</b>.) if you guessed <b>1</b>, you're correct! <b>3 % 2 = 1</b> because 3 / 2 is 1 <b>with a remainder of 1</b>. here are some more examples using modulus between integers:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>22 % 4 = 2 because 22 / 4 is 5 with a remainder of 2</li>\n\t\t\t\t\t<li>3 % 5 = 3 because 3 / 5 is 0 with a remainder of 3</li>\n\t\t\t\t\t<li>14 % 7 = 0 because 14 / 7 is 2 with a remainder of 0</li>\n\t\t\t\t</ul>\n\t\t\t\t<b>the standard notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe standard notation for modulus is to <b>change the value of a variable</b> to be equal to the result of <b>getting the remainder after dividing the variable by another variable</b>. here is the blueprint of the standard notation of getting the remainder after dividing a variable <i>remainder</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>remainder</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>remainder</i> = <i>remainder</i> % <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's use the standard notation in code! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//get the leftover apples after dividing apples between friends</div>\n\t\t\t\t<br/>\n\t\t\t\tint apples = 8;\n\t\t\t\t<br/>\n\t\t\t\tint friends = 5;\n\t\t\t\t<br/>\n\t\t\t\tapples = apples % friends;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>the shorthand notation</b>\n\t\t\t\t<br/>\n\t\t\t\tthe shorthand notation for modulus is to use <b>%=</b> to change the value of a variable to be equal to <b>getting the remainder after dividing itself by another variable</b>. the standard notation and the shorthand notation do <b>exactly the same thing</b>. here is the blueprint of the shorthand notation of getting the remainder after dividing a variable <i>remainder</i> by another variable <i>i</i> (<b className=\"note\">btw:</b> we can assume that <i>remainder</i> and <i>i</i> have already been initialized):\n\t\t\t\t<br/>\n\t\t\t\t<b><i>remainder</i> %= <i>i</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tnow let's convert the code above from standard notation into shorthand notation! take a look below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t<div className=\"comment\">//get the leftover apples after dividing apples between friends</div>\n\t\t\t\t<br/>\n\t\t\t\tint apples = 8;\n\t\t\t\t<br/>\n\t\t\t\tint friends = 5;\n\t\t\t\t<br/>\n\t\t\t\tapples %= friends;\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>divisibility, a common application of modulus</b>\n\t\t\t\t<br/>\n\t\t\t\tmodulus is often used to figure out if a certain integer is <b>divisible</b> by another integer. you might be wondering, <b>\"how can modulus be used in divisibility?\"</b> great question! this whole section is dedicated to answering this question. let's dive into it!\n\t\t\t\t<br/>\n\t\t\t\tas we stated earlier, modulus represents the <b>remainder after dividing two integers</b>; in other words, modulus is the <b>leftover</b>. now for divisibility: if a number <i>x</i> is <b>divisible</b> by a number <i>y</i>, that means that <i>x</i><b>/</b><i>y</i> is an <b>integer</b>. in other words, the <b>remainder</b> when you divide <i>x</i> by <i>y</i> should be equal to <b>0</b>. have you connected the dots? if so, awesome! if not, let's walk through an <b>example</b> that will help you understand modulus and divisibility better:\n\t\t\t\t<br/>\n\t\t\t\t\n\t\t\t\t<h3>:) recap :)</h3>\n\t\t\t\t<b>gr8!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\there are the five arithmetic operations we learned about on this page along with their operators:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>addition</b>, denoted using <b>+</b></li>\n\t\t\t\t\t<li><b>subtraction</b>, denoted using <b>-</b></li>\n\t\t\t\t\t<li><b>multiplication</b>, denoted using <b>*</b></li>\n\t\t\t\t\t<li><b>division</b>, denoted using <b>/</b></li>\n\t\t\t\t\t<li><b>modulus</b>, denoted using <b>%</b></li>\n\t\t\t\t</ul>\n\t\t\t\tremember that <b>modulus</b> means the <b>remainder</b> after dividing and is commonly used in <b>divisibility</b>.\n\t\t\t\t<br/><br/>\n\t\t\t\there is the blueprint for how the resulting variable type changes based on whether you are performing an operation between <b>two integers</b>, <b>two doubles</b>, or <b>an integer and a double</b>:\n\t\t\t\t<br/>\n\t\t\t\t<b>\n\t\t\t\t<i>&lt;integer&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;integer&gt;</i> = <i>&lt;integer&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;double&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;double&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;integer&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;double&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t<br/>\n\t\t\t\t<i>&lt;double&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;integer&gt;</i> = <i>&lt;double&gt;</i>\n\t\t\t\t</b>\n\t\t\t\t<br/><br/>\n\t\t\t\there is the blueprint for both the <b>standard notation</b> and the <b>shorthand notation</b> for performing an arithmetic operation on between <i>variable_1</i> and <i>variable_2</i>, where <i>variable_1</i> stores the result of the operation and <i>operator</i> can be <b>+</b>, <b>-</b>, <b>*</b>, <b>/</b>, or <b>%</b>:\n\t\t\t\t<br/>\n\t\t\t\t<b><i>&lt;variable_1&gt;</i> = <i>&lt;variable_1&gt;</i> <i>&lt;operator&gt;</i> <i>&lt;variable_2&gt;</i>;</b>\n\t\t\t\t<br/>\n\t\t\t\t<b><i>&lt;variable_1&gt;</i> <i>&lt;operator&gt;</i>= <i>&lt;variable_2&gt;</i>;</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tand finally, if you want to <b>increment</b>, which means add 1 to, or <b>decrement</b>, which means subtract 1 from, a variable, you can use <b>++</b> and <b>--</b>, respectively.\n\t\t\t\t<br/><br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Arithmetic;"]},"metadata":{},"sourceType":"module"}