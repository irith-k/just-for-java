{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js\";\nimport React from 'react';\n\nclass ForLoop extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 22\n      }\n    }, \"a repeating block of code\"), \". here, we will focus on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 79\n      }\n    }, \"for loops\"), \", a type of loop that iterates through your block of code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 155\n      }\n    }, \"specific number of times\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you create a for loop?\"), \"here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }), \"as you can see from the blueprint above, there are three main components to creating a for loop:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 6\n      }\n    }, \"initialize\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 6\n      }\n    }, \"condition\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, \"iterate\")), \"let's walk through each of these components...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }\n    }, \"what in the world is initialize?\"), \"good question! initializing is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 40\n      }\n    }, \"first component\"), \" of your for loop. it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 93\n      }\n    }, \"create the variable\"), \" that you will use to go through your for loop. for initalizing, we always use an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 39\n      }\n    }, \"int variable\"), \", often denoted by the letter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 88\n      }\n    }, \"i\"), \". in the initialize section, we create i and set it equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 68\n      }\n    }, \"start value\"), \". \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 88\n      }\n    }), \"for example, if you want your for loop to print the numbers 1-5, you would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 80\n      }\n    }, \"set i equal to 1\"), \", because that's the number you want to print first. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on how to create a variable? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 95\n      }\n    }, \"variables page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, \"and what's condition?\"), \"the condition is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 26\n      }\n    }, \"second component\"), \". it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 63\n      }\n    }, \"determine when the loop should stop\"), \". you can denote this using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 133\n      }\n    }, \"<\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 146\n      }\n    }, \"\\u2264\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 159\n      }\n    }, \">\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 175\n      }\n    }, \"\\u2265\"), \" depending on what you want your loop to do.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing out the numbers 1-5, we can make our condition in two ways: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 108\n      }\n    }, \"i \\u2264 5\"), \" or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 127\n      }\n    }, \"i < 6\"), \". which one you choose is up to you.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"hey, wait! you still have to explain iterate!\"), \"don't worry, we didn't forget :). the iterate portion is our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 66\n      }\n    }, \"last component\"), \" and works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 101\n      }\n    }, \"increment your integer variable\"), \". you can increment by however much you want, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 185\n      }\n    }, \"either increasing or decreasing\"), \" depending on the direction you would like your loop to go in. if you want your integer to be increased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 82\n      }\n    }, \"i += \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 90\n      }\n    }, \"<number you want to increase by each time>\")), \". if you want your integer to be decreased by a certain number, you would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 82\n      }\n    }, \"i -= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 90\n      }\n    }, \"<number you want to decrease by each time>\")), \". a shortcut for increasing i by 1 each time is typing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 58\n      }\n    }, \"i++\"), \", while a shortcut for decreasing i by 1 is... you guessed it: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 131\n      }\n    }, \"i--\"), \". you can also use multiplication (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 38\n      }\n    }, \"i *=\"), \")and division (\", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 64\n      }\n    }, \"i /=\"), \"), but addition and subtraction are the most common.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }), \"going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 163\n      }\n    }, \"i++\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }\n    }, \"btw:\"), \" don't forget the semicolons between each of the three components.)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, \"and for some examples...\"), \"here is our example from above fully coded out:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i \\u2264 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"System.out.print(i + \\\" \\\")\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 40\n      }\n    }, \"//the \\\" \\\" is to add a space between the numbers when printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 134\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 12\n      }\n    })), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    }, \"1 2 3 4 5\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }, \"...and here's another example:\"), \"in this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 152\n      }\n    }), \"remember, the first thing we want to do is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 48\n      }\n    }, \"make our integer i\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 76\n      }\n    }, \"hint:\"), \" think about what number we want to start at.) next, we want our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 23\n      }\n    }, \"condition\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 42\n      }\n    }, \"hint:\"), \" there are two ways to write this part.) and lastly, we will need to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }\n    }, \"increment our integer\"), \" in a way to get the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 82\n      }\n    }, \"powers of 2\"), \". i'll let you think of that one for a bit. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 145\n      }\n    }, \"hint:\"), \" think back to your math class.)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 206\n      }\n    }), \"now, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 130\n      }\n    }, \"variables page\"), \" for this part. ok, got it? let's see it coded out!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"int sum = 0; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }, \"//this variable will keep track of our sum in our for loop\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 110\n      }\n    }), \"for(int i = 1; i \\u2264 100; i*=2){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 44\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, \"sum += i; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 20\n      }\n    }, \"//+= is a shortcut for saying sum = sum + i.\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 99\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, \"i*=2\"), \" works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 175\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 5\n      }\n    }, \"...and last example, we promise:\"), \"in the first example, we printed out \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 42\n      }\n    }, \"i\"), \", and in the second example, we added \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 88\n      }\n    }, \"i\"), \" to a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 102\n      }\n    }, \"sum\"), \" variable. in this last example, i want to show you a different way that you can use the iterator variable, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 220\n      }\n    }, \"int i\"), \". what if \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, \"i\"), \" represented an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }, \"index\"), \" in a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 55\n      }\n    }, \"String\"), \"? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 71\n      }\n    }, \"psst. need a reminder\"), \" on what an index is and how it relates to Strings? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 182\n      }\n    }, \"Strings page\"), \"!) let's try to use a for loop to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 256\n      }\n    }, \"iterate through each character in a String\"), \".\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 6\n      }\n    }, \"for the first component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 51\n      }\n    }, \"initialize\"), \", we want to set \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 85\n      }\n    }, \"int i\"), \" to the starting value. what should our starting value be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 157\n      }\n    }, \"hint:\"), \" think about what number indexing start at.) because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 239\n      }\n    }, \"indexing starts at 0\"), \", our first component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 298\n      }\n    }, \"int i = 0\"), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 6\n      }\n    }, \"for the second component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 52\n      }\n    }, \"condition\"), \", we want to answer the question: when should our for loop stop? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 134\n      }\n    }, \"hint:\"), \" our for loop should stop after we've looped through each index in the given String.) we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 267\n      }\n    }, \"Strings page\"), \" that indexing goes from 0, inclusive, till the length of the String, exclusive (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 388\n      }\n    }, \"btw:\"), \" the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 555\n      }\n    }, \"i is less than the length of the String\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 604\n      }\n    }, \"btw:\"), \" to get the length of a String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 663\n      }\n    }, \"str\"), \", use the syntax \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 690\n      }\n    }, \"str.length()\"), \".) therefore, our second component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 754\n      }\n    }, \"i < str.length()\"), \".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }\n    }, \"for the third component of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \", we want to think about what should happen to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 112\n      }\n    }, \"i\"), \" each time we iterate. since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 149\n      }\n    }, \"i\"), \" is the index, we want \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 180\n      }\n    }, \"i\"), \" to increase by 1 each time since \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 222\n      }\n    }, \"we are moving to the next index each iteration\"), \", so our third component should be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 310\n      }\n    }, \"i++\"), \".\")), \"now that we have all three components of our for loop, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 60\n      }\n    }, \"let's code it!\"), \" let's have our program print out each character in String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 140\n      }\n    }, \"str\"), \" on its own line. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 169\n      }\n    }, \"psst. need a reminder\"), \" of how to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 229\n      }\n    }, \"charAt()\"), \" to get the character at a given index in a String? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 310\n      }\n    }, \"Strings page\"), \"!)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, \"String str = \\\"happy birthday\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    }, \"//loop through each character in str\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }\n    }), \"for(int i = 0; i \\u2264 str.length(); i++){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }\n    }, \"//use charAt() to print out each character on its own line\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 95\n      }\n    }), \"System.out.println(str.charAt(i));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), \"}\"), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }\n    }, \"h\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }\n    }), \"a\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    }), \"p\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }), \"p\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }\n    }), \"y\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 6\n      }\n    }), \"b\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 6\n      }\n    }), \"i\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 6\n      }\n    }), \"r\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 6\n      }\n    }), \"t\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 6\n      }\n    }), \"h\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }\n    }), \"d\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 6\n      }\n    }), \"a\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 6\n      }\n    }), \"y\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 6\n      }\n    })), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }\n    }, \"fr lp:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 41\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }, \"for loops\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 53\n      }\n    }, \"remove the vowels from a String\"), \"; for example, if the original String is \\\"for loop\\\", the new String would be \\\"fr lp\\\". this will require five steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 206\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, \"create two String variables, one that stores the original String and one that will store the vowels-removed String\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, \"you can set the original String variable to any text you want\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 8\n      }\n    }, \"the vowels-removed String variable can be initialized to an empty String \\\"\\\"\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, \"use a for loop to iterate through each character in the String using indexing\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 8\n      }\n    }, \"think about what the three components\\xA0\\u2013\\xA0initialze, condition, and iterate \\u2013\\xA0of your for loop are going to be\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 7\n      }\n    }, \"get the current character that you are on in the String using its index\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, \"if the current character is not a vowel, then concatenate it to the vowels-removed String\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 8\n      }\n    }, \"remember that vowels can be lowercase or uppercase\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 8\n      }\n    }, \"there are numerous ways to do this step: one uses boolean logic and one creates a String of all the vowels\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, \"print out the vowels-removed String variable\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 8\n      }\n    }, \"this step should be performed after the for loop is done\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your initialize component should be int i = 0 because indexing starts at 0\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 130\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 135\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your condition component should be i < str.length() the last index in the String is at the length of the String - 1\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 179\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your iterate component should be i++ since each time we loop, we want to go to the next index in the String\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 163\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 168\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", you will need to use charAt to get the character at a specified index in the String \\u2013\\xA0check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 156\n      }\n    }, \"Strings page\"), \" for more details\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 213\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 218\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", if you want to use boolean logic, make one giant if statement that checks if the character doesn't equal any of the vowels, both uppercase and lowercase; remember, ! = not, && = and, || = or, () = do this first; refer to the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 281\n      }\n    }, \"boolean logic page\"), \" for the specifics\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 345\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 350\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", you can also create a String of all the vowels \\\"AEIOUaeiou\\\" \\u2013 notice that it includes both uppercase and lowercase vowels \\u2013 and check if the index of the current character in the vowels String is equal to -1, meaning that the current character does not appear in the vowels String, meaing that it isn't a vowel\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 366\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 371\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", if the current character is not a vowel, then you can use += to concatenate, or add, that character to the end of the vowels-removed String\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 195\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 200\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-fr-lp?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/for-loop-fr-lp-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 5\n      }\n    }, \"is it really time for reacap? get it. for. hehe.\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 5\n      }\n    }, \"ayyyyyy!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 47\n      }\n    }), \"now, i know that was a lot, so here's a lil' summary:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 58\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 63\n      }\n    }), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is a repeating block of code. one type of loop is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 69\n      }\n    }, \"for loops\"), \", which help to loop through code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 121\n      }\n    }, \"specific number of times\"), \". here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 200\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 20\n      }\n    }), \"there are three parts to a for loop:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 10\n      }\n    }, \"initialize\"), \", when you make your integer \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 56\n      }\n    }, \"i\"), \" and set it equal to the start number\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 10\n      }\n    }, \"condition\"), \", where you decide \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 45\n      }\n    }, \"how\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 60\n      }\n    }, \"when\"), \" your loop should stop using the different signs\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 10\n      }\n    }, \"iterate\"), \", where you \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 36\n      }\n    }, \"increment\"), \" your integer a specific amount each time it loops through your code\")), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default ForLoop;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js"],"names":["React","ForLoop","Component","constructor","props","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAqC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA;;AAGDC,EAAAA,MAAM,GAAE;AACP,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,uBACkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADlB,4CAC2E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAD3E,+EACuJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADvJ,oBAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDAFD,iEAG+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH/C,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,sBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3B,sBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9C,sBAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApE,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,oBACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADd,MAJD,eAMW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANX,eAMgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANhB,mHAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHD,CARD,iEAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdD,eAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAfD,sDAgBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAhBpC,kDAgByF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAhBzF,qGAiBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAjBnC,iDAiBoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAjBpF,oFAkBgE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAlBhE,qBAkBoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBpF,8FAmB4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAnB5E,yEAoBE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BApBF,+DAoB2F;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBApB3F,qBAsBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAtBD,wCAuBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAvBtB,iCAuB2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAvB3D,+CAuBiI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAvBjI,qBAuB8I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvB9I,qBAuB2J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAvB3J,wBAuB2K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAvB3K,+DAwBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBD,qHAwBwG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAxBxG,uBAwB2H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAxB3H,uDA0BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDA1BD,gFA2B8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA3B9D,iCA2BiG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA3BjG,iEA2BqL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCA3BrL,+JA4B8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAR,CA5B9E,kGA6B8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAR,CA7B9E,0EA8BsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA9BtD,kFA8B+H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA9B/H,sDA+BkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/BlC,kCA+B4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA/B5D,uEAgCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhCD,4KAgC+J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAhC/J,sBAiCE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF,sFAkCC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAlCD,kEAoCC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADtC,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAFF,oBAEmC;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAFnC,eAEiI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFjI,oBAGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHP,CApCD,0EA0CC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA1CD,eA6CC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wCA7CD,sKA8CoJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9CpJ,8DA+C4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BA/C5C,sBA+CwE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA/CxE,oFAgDmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAhDnB,sBAgDsC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAhDtC,wFAiD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAjD7B,wCAiD8E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAjD9E,gEAiD6I;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAjD7I,mDAiD0M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjD1M,gJAkD8H;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAlD9H,sEAoDC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACc;AAAK,MAAA,SAAS,EAAG,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADd,eACyG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADzG,sDAEuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFvC,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAAa;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAAb,CAHF,eAG8F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH9F,MApDD,eA0DC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA1DD,kLA0D2K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1D3K,eA2DC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CA3DD,wDA4DsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA5DtC,yDA4DoF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA5DpF,yBA4DkG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA5DlG,+HA4DwN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA5DxN,6BA6DS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WA7DT,mCA6DiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA7DjC,yBA6DmD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7DnD,sBA6DmE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BA7DnE,qFA6DkL;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA7DlL,qDA6D4P;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDA7D5P,oBA8DC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA7C,oCAA+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA/E,+EAAuJ;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAvJ,wEAAyO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAzO,mDAAoS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAApS,MADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA9C,qFAAgI;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhI,2HAAqQ;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAArQ,oGAA8X;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA9X,8JAAqiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAAriB,sBAAslB;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAtlB,kDAAipB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAjpB,oCAA4qB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA5qB,gEAA4uB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA5uB,MAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA7C,kEAA0G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA1G,gDAA+I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA/I,0CAA8K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA9K,qDAAwN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAxN,sDAAgT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAhT,MAHD,CA9DD,0EAmEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAnExD,8EAmEwI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAnExI,sCAmEqK;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAnErK,kCAmEiO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnEjO,qFAmEkT;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnElT,qBAoEC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,eAGA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAHA,eAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,8DAK8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAL9C,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADD,eAC0F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD1F,uCANA,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATJ,MApED,0EAiFC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,oBAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,oBAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHD,oBAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,oBAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,oBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPD,oBAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARD,oBASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATD,oBAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVD,oBAWC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXD,oBAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZD,oBAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbD,oBAcC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdD,CAjFD,eAiGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjGD,eAkGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAC+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD/B,eACoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADpC,wBAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFN,8BAE4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAF5B,uBAEgD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAFhD,0IAEyM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFzM,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4HADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uEADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAFD,CAFD,eAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAND,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yIADD,CAPD,eAUC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAVD,eAWC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAXD,eAYC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4DADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oHAFD,CAZD,eAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDAhBD,eAiBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEADD,CAjBD,CAHD,eAwBC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD,wBACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnC,+FAC4H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5H,eACiI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjI,eAEC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFD,wBAEmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFnC,wIAEwK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFxK,eAE6K;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF7K,eAGC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHD,wBAGmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHnC,gIAG6J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH7J,eAGkK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHlK,eAIC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJD,wBAImC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJnC,iIAIsJ;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJtJ,oCAI+M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ/M,eAIoN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJpN,eAKC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALD,wBAKmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALnC,sPAKmR;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BALnR,qCAKmV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALnV,eAKwV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALxV,eAMC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAND,wBAMmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANnC,uVAMwW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANxW,eAM6W;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAN7W,eAOC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPD,wBAOmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPnC,gKAO6L;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAP7L,eAOkM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPlM,CAxBD,eAiCC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,MAAM,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAoC,MAAA,GAAG,EAAC,uDAAxC;AAAgG,MAAA,SAAS,EAAC,IAA1G;AAA+G,MAAA,WAAW,EAAC,IAA3H;AAAgI,MAAA,iBAAiB,EAAC,MAAlJ;AAAyJ,MAAA,eAAe,EAAC,MAAzK;AAAgL,MAAA,OAAO,EAAC,0FAAxL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAjCD,CAlGD,eAuIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvID,eAwIC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,eACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrC,eAC0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD1C,4BAES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFT,+CAEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFxD,sGAE0J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF1J,oBAEoK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFpK,eAEyK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFzK,eAGC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,MAAM,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAoC,MAAA,GAAG,EAAC,gEAAxC;AAAyG,MAAA,SAAS,EAAC,IAAnH;AAAwH,MAAA,WAAW,EAAC,IAApI;AAAyI,MAAA,iBAAiB,EAAC,MAA3J;AAAkK,MAAA,eAAe,EAAC,MAAlL;AAAyL,MAAA,OAAO,EAAC,0FAAjM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAHD,CAxID,eA+IC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DA/ID,eAgJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhJD,yCAgJsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhJtC,eAgJ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAhJ3C,wEAiJsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjJtD,eAiJ2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjJ3D,qBAkJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlJH,sEAkJiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAlJjE,uDAkJqH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAlJrH,mEAkJoM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlJpM,eAmJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,sBAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA3B,sBAA8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA9C,sBAAoE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApE,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,oBACc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADd,MAnJD,eAqJW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArJX,eAqJgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArJhB,uDAuJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAJ,gDAAkD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAlD,0CADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAJ,sCAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAvC,wBAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAtD,qDAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAJ,+BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA9B,yEAHD,CAvJD,8BA4JY;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBA5JZ,0BA4JwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBA5JxD,8EA4JmI;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5JnI,CADD;AAgKA;;AAvKmC;;AA0KrC,eAAeJ,OAAf","sourcesContent":["import React from 'react';\n\nclass ForLoop extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\ta <b>loop</b> is <b>a repeating block of code</b>. here, we will focus on <b>for loops</b>, a type of loop that iterates through your block of code a <b>specific number of times</b>.\n\t\t\t\t<h3>wait, so how do you create a for loop?</h3>\n\t\t\t\there is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tas you can see from the blueprint above, there are three main components to creating a for loop: \n\t\t\t\t<ul>\n\t\t\t\t\t<li>initialize</li>\n\t\t\t\t\t<li>condition</li>\n\t\t\t\t\t<li>iterate</li>\n\t\t\t\t</ul>\n\t\t\t\tlet's walk through each of these components...\n\t\t\t\t<br/>\n\t\t\t\t<h3>what in the world is initialize?</h3>\n\t\t\t\tgood question! initializing is the <b>first component</b> of your for loop. it works to <b>create the variable</b> that you will use to go through your for loop.\n\t\t\t\tfor initalizing, we always use an <b>int variable</b>, often denoted by the letter <b>i</b>.  \n\t\t\t\tin the initialize section, we create i and set it equal to the <b>start value</b>. <br/>\n\t\t\t\tfor example, if you want your for loop to print the numbers 1-5, you would <b>set i equal to 1</b>, because that's the number you want to print first.\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on how to create a variable? check out the <b className=\"pageName\">variables page</b>!)\n\n\t\t\t\t<h3>and what's condition?</h3>\n\t\t\t\tthe condition is the <b>second component</b>. it works to <b>determine when the loop should stop</b>. you can denote this using <b>&lt;</b>, <b>&le;</b>, <b>&gt;</b>, or <b>&ge;</b> depending on what you want your loop to do.\n\t\t\t\t<br/>going back to our example of printing out the numbers 1-5, we can make our condition in two ways: <b>i &le; 5</b> or <b>i &lt; 6</b>. which one you choose is up to you.\n\t\t\t\t\n\t\t\t\t<h3>hey, wait! you still have to explain iterate!</h3>\n\t\t\t\tdon't worry, we didn't forget :). the iterate portion is our <b>last component</b> and works to <b>increment your integer variable</b>. you can increment by however much you want, <b>either increasing or decreasing</b> depending on the direction you would like your loop to go in. \n\t\t\t\tif you want your integer to be increased by a certain number, you would type <b>i += <i>&lt;number you want to increase by each time&gt;</i></b>. \n\t\t\t\tif you want your integer to be decreased by a certain number, you would type <b>i -= <i>&lt;number you want to decrease by each time&gt;</i></b>.\n\t\t\t\ta shortcut for increasing i by 1 each time is typing <b>i++</b>, while a shortcut for decreasing i by 1 is... you guessed it: <b>i--</b>.\n\t\t\t\tyou can also use multiplication (<b>i *=</b>)and division (<b>i /=</b>), but addition and subtraction are the most common.\n\t\t\t\t<br/>going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type <b>i++</b>.\n\t\t\t\t(<b className=\"note\">btw:</b> don't forget the semicolons between each of the three components.)\n\t\t\t\t<h3>and for some examples...</h3>\n\t\t\t\there is our example from above fully coded out: \n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tfor(int i = 1; i &le; 5; i++) &#123; <br/>\n\t\t\t\t\t\t<p>System.out.print(i + \" \")</p> <div className = \"comment\">//the \" \" is to add a space between the numbers when printing</div><br/>\n\t\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t1 2 3 4 5\n\t\t\t\t</div>\n\t\t\t\t<h3>...and here's another example:</h3>\n\t\t\t\tin this example, we want to use a for loop to add up the powers of 2 between 1 and 100. sounds difficult, i know, but let's break down the problem.<br/>\n\t\t\t\tremember, the first thing we want to do is <b>make our integer i</b>. (<b className=\"note\">hint:</b> think about what number we want to start at.) \n\t\t\t\tnext, we want our <b>condition</b>. (<b className=\"note\">hint:</b> there are two ways to write this part.)\n\t\t\t\tand lastly, we will need to <b>increment our integer</b> in a way to get the <b>powers of 2</b>. i'll let you think of that one for a bit. (<b className=\"note\">hint:</b> think back to your math class.)<br/> \n\t\t\t\tnow, inside the for loop we will need a way to add our number to a sum... hmm... might need to remember some things from the <b className=\"pageName\">variables page</b> for this part.\n\t\t\t\tok, got it? let's see it coded out!\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tint sum = 0; <div className = \"comment\">//this variable will keep track of our sum in our for loop</div><br/>\n\t\t\t\t\tfor(int i = 1; i &le; 100; i*=2)&#123;<br/>\n\t\t\t\t\t\t<p>sum += i; <div className=\"comment\">//+= is a shortcut for saying sum = sum + i.</div></p><br/>\n\t\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\t<b>i*=2</b> works by multiplying i by 2 each time it iterates through the for loop. so, with this in mind, i would start at 1, then 2, then 4, then 8, then 16, and so on.<br/>\n\t\t\t\t<h3>...and last example, we promise:</h3>\n\t\t\t\tin the first example, we printed out <b>i</b>, and in the second example, we added <b>i</b> to a <i>sum</i> variable. in this last example, i want to show you a different way that you can use the iterator variable, <b>int i</b>. \n\t\t\t\twhat if <b>i</b> represented an <b>index</b> in a <b>String</b>? (<b className=\"note\">psst. need a reminder</b> on what an index is and how it relates to Strings? check out the <b className=\"pageName\">Strings page</b>!) let's try to use a for loop to <b>iterate through each character in a String</b>. \n\t\t\t\t<ul>\n\t\t\t\t\t<li>for the first component of our for loop, <b>initialize</b>, we want to set <b>int i</b> to the starting value. what should our starting value be? (<b className=\"note\">hint:</b> think about what number indexing start at.) because <b>indexing starts at 0</b>, our first component should be <b>int i = 0</b>.</li>\n\t\t\t\t\t<li>for the second component of our for loop, <b>condition</b>, we want to answer the question: when should our for loop stop? (<b className=\"note\">hint:</b> our for loop should stop after we've looped through each index in the given String.) we learned on the <b className=\"pageName\">Strings page</b> that indexing goes from 0, inclusive, till the length of the String, exclusive (<b className=\"note\">btw:</b> the length of a String is equal to the number of characters in the String). that means that we want our for loop to keep going as long as <b>i is less than the length of the String</b>. (<b className=\"note\">btw:</b> to get the length of a String <i>str</i>, use the syntax <b>str.length()</b>.) therefore, our second component should be <b>i &lt; str.length()</b>.</li>\n\t\t\t\t\t<li>for the third component of our for loop, <b>iterate</b>, we want to think about what should happen to <b>i</b> each time we iterate. since <b>i</b> is the index, we want <b>i</b> to increase by 1 each time since <b>we are moving to the next index each iteration</b>, so our third component should be <b>i++</b>.</li>\n\t\t\t\t</ul>\n\t\t\t\tnow that we have all three components of our for loop, <b>let's code it!</b> let's have our program print out each character in String <i>str</i> on its own line. (<b className=\"note\">psst. need a reminder</b> of how to use <b>charAt()</b> to get the character at a given index in a String? check out the <b className=\"pageName\">Strings page</b>!)\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString str = \"happy birthday\";\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//loop through each character in str</div>\n\t\t\t\t<br/>\n\t\t\t\tfor(int i = 0; i &le; str.length(); i++)&#123;<br/>\n\t\t\t\t<p>\n\t\t\t\t\t<div className=\"comment\">//use charAt() to print out each character on its own line</div><br/>\n\t\t\t\t\tSystem.out.println(str.charAt(i));\n\t\t\t\t</p><br/>\n\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\th<br/>\n\t\t\t\ta<br/>\n\t\t\t\tp<br/>\n\t\t\t\tp<br/>\n\t\t\t\ty<br/>\n\t\t\t\t <br/>\n\t\t\t\tb<br/>\n\t\t\t\ti<br/>\n\t\t\t\tr<br/>\n\t\t\t\tt<br/>\n\t\t\t\th<br/>\n\t\t\t\td<br/>\n\t\t\t\ta<br/>\n\t\t\t\ty<br/>\n\t\t\t\t</div>\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">fr lp:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>for loops</b> to <b>remove the vowels from a String</b>; for example, if the original String is \"for loop\", the new String would be \"fr lp\". this will require five steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create two String variables, one that stores the original String and one that will store the vowels-removed String</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>you can set the original String variable to any text you want</li>\n\t\t\t\t\t\t\t<li>the vowels-removed String variable can be initialized to an empty String \"\"</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>use a for loop to iterate through each character in the String using indexing</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>think about what the three components – initialze, condition, and iterate – of your for loop are going to be</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>get the current character that you are on in the String using its index</li>\n\t\t\t\t\t\t<li>if the current character is not a vowel, then concatenate it to the vowels-removed String</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>remember that vowels can be lowercase or uppercase</li>\n\t\t\t\t\t\t\t<li>there are numerous ways to do this step: one uses boolean logic and one creates a String of all the vowels</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>print out the vowels-removed String variable</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>this step should be performed after the for loop is done</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your initialize component should be int i = 0 because indexing starts at 0<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your condition component should be i &lt; str.length() the last index in the String is at the length of the String - 1<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your iterate component should be i++ since each time we loop, we want to go to the next index in the String<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, you will need to use charAt to get the character at a specified index in the String – check out the <b className=\"pageName\">Strings page</b> for more details<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, if you want to use boolean logic, make one giant if statement that checks if the character doesn't equal any of the vowels, both uppercase and lowercase; remember, ! = not, && = and, || = or, () = do this first; refer to the <b className=\"pageName\">boolean logic page</b> for the specifics<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, you can also create a String of all the vowels \"AEIOUaeiou\" – notice that it includes both uppercase and lowercase vowels – and check if the index of the current character in the vowels String is equal to -1, meaning that the current character does not appear in the vowels String, meaing that it isn't a vowel<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, if the current character is not a vowel, then you can use += to concatenate, or add, that character to the end of the vowels-removed String<br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-fr-lp?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/for-loop-fr-lp-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<h3>is it really time for reacap? get it. for. hehe.</h3>\n\t\t\t\t<b>ayyyyyy!</b> you made it to recap!<br/><br/>\n\t\t\t\tnow, i know that was a lot, so here's a lil' summary:<br/><br/>\n\t\t\t\ta <b>loop</b> is a repeating block of code. one type of loop is <b>for loops</b>, which help to loop through code a <b>specific number of times</b>. here is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tthere are three parts to a for loop: \n\t\t\t\t<ol>\n\t\t\t\t\t<li><b>initialize</b>, when you make your integer <b>i</b> and set it equal to the start number</li>\n\t\t\t\t\t<li><b>condition</b>, where you decide <b>how</b> and <b>when</b> your loop should stop using the different signs</li>\n\t\t\t\t\t<li><b>iterate</b>, where you <b>increment</b> your integer a specific amount each time it loops through your code</li>\n\t\t\t\t</ol>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ForLoop;"]},"metadata":{},"sourceType":"module"}