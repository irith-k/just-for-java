{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Overloading.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Overloading extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), \"mwahaha \\u2013\\xA0we aren't done with \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 44\n      }\n    }, \"functions\"), \" quite yet! there's one last concept we need to address, called \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 124\n      }\n    }, \"overloading\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, \"overloading, as in you put too many clothes in the laundry machine?\"), \"not rly... but appreciate the effort. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 52\n      }\n    }, \"overloading\"), \", or more explicitly called method overloading, allows \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 125\n      }\n    }, \"multiple\"), \" functions to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 163\n      }\n    }, \"same name\"), \", as long as the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 196\n      }\n    }, \"number of parameters\"), \" and/or the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 235\n      }\n    }, \"type of parameters\"), \" are \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 265\n      }\n    }, \"different\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 284\n      }\n    }, \"psst. need a reminder\"), \" on what a parameter is? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 368\n      }\n    }, \"functions page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, \"woah that definition was overloaded with technical language\"), \"dw! to illustrate the concept of function overloading, let's go through \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 86\n      }\n    }, \"examples pertaining to each of the following conditions\"), \":\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 23\n      }\n    }, \"type\"), \" of parameters differ\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 23\n      }\n    }, \"number\"), \" of parameters differ\")), \"remember, overloading means that as long as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 58\n      }\n    }, \"at least one\"), \" of the conditions above is true, then two functions can have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 143\n      }\n    }, \"same name\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 14\n      }\n    }, \"overloading by type of parameters\"), \"let's say that you want to make a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 48\n      }\n    }, \"sum function\"), \". pretty simple, right? our function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 104\n      }\n    }, \"takes in two numbers\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 136\n      }\n    }, \"returns their sum\"), \". what will the parameters and the return type be? we will pass \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 224\n      }\n    }, \"two ints\"), \" to our function, and its return type will be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 285\n      }\n    }, \"int\"), \". check out our sum function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }), \"}\"), \"but how about if we wanted to calculate the sum of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 65\n      }\n    }, \"two doubles\"), \", not of two ints? well guess what?! because of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 131\n      }\n    }, \"overloading\"), \", we can write two functions, both of them called \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 199\n      }\n    }, \"sum\"), \", where one takes in two \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 234\n      }\n    }, \"ints\"), \" and the other takes in two \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 273\n      }\n    }, \"doubles\"), \". of course, this is only possible because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 330\n      }\n    }, \"the types of the parameters differ\"), \". check out our overloaded sum functions below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two doubles\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 14\n      }\n    }), \"public static double sum(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 14\n      }\n    }), \"}\"), \"very fun! very fresh!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }\n    }, \"how do you call overloaded functions? cause rnt their names the same?\"), \"it is true that the names of overloaded functions are identical; however, their \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 94\n      }\n    }, \"parameters are different\"), \", and that's how we can distinguish them. using our overloaded sum functions that we made earlier, let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 230\n      }\n    }, \"call\"), \" them in our main method:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, \"//this sum function call invokes the sum function that takes in two doubles, since 1.3 and 6.4 are integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }), \"double myDouble = sum(1.3, 6.4); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 48\n      }\n    }, \"//myDouble = 7.7\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, \"//this sum function call invokes the sum function that takes in two ints, since 1 and 6 are integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), \"int myInt = sum(1, 6); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 38\n      }\n    }, \"//myInt = 7\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 14\n      }\n    }), \"public static int sum(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }\n    }, \"//this sum function returns the sum of two doubles\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 14\n      }\n    }), \"public static double sum(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }\n    }), \"}\"), \"sweeeet!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }\n    }, \"overloading by number of parameters\"), \"now that we've learned how to overload by changing the type of parameters, let's learn how to overload by changing the number of parameters. say we wanted to make a function that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 193\n      }\n    }, \"returns the absolute value of the maximum number between two integers\"), \". do you remember the easy way to get the absolute value of a number and the maximum number between two numbers? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 383\n      }\n    }, \"hint:\"), \" it starts with an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 431\n      }\n    }, \"\\\"m\\\"\"), \" and ends in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 454\n      }\n    }, \"\\\"ath\\\"\"), \".) omg wow! you guessed it! we need to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 509\n      }\n    }, \"Math\"), \"! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 523\n      }\n    }, \"psst. need a reminder\"), \" on how to use the Math.max and Math.abs functions? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 634\n      }\n    }, \"math page\"), \"!) once you have an idea on what you need to do, check out our absMax function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 14\n      }\n    }), \"}\"), \"how about if we wanted to return the absolute value of the maximum number between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 96\n      }\n    }, \"not just two\"), \", but \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 121\n      }\n    }, \"three integers\"), \"? woooooo is it getting \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 166\n      }\n    }, \"hot\"), \" in here? cause we're getting \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 206\n      }\n    }, \"kinda spicyyy\"), \". anyways, even though both absMax functions take in int parameters, our first function takes in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 323\n      }\n    }, \"two ints\"), \", while our second function will take in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 379\n      }\n    }, \"three ints\"), \". so, we can name our second method absMax as well. of course, this is only possible because \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 489\n      }\n    }, \"the number of the parameters differ\"), \". check out our overloaded absMax functions below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between three integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b, int c) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(Math.max(a,b), c));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 14\n      }\n    }), \"}\"), \"finally, let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 29\n      }\n    }, \"call\"), \" both of our functions in the main method (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 83\n      }\n    }, \"btw:\"), \" gotta love dem main method variable names):\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, \"//this absMax function call invokes the absMax function that takes in two ints, since we provide two arguments\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }), \"int bloop = absMax(-1, -3); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 43\n      }\n    }, \"//bloop = 1\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 15\n      }\n    }, \"//this absMax function call invokes the absMax function that takes in three ints, since we provide three arguments\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 15\n      }\n    }), \"int bloopBloop = absMax(-1, -3, 2); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 51\n      }\n    }, \"//bloopBloop = 2\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between two integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(a,b));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 14\n      }\n    }, \"//this absMax function returns the absolute value of the maximum integer between three integers\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 14\n      }\n    }), \"public static int absMax(int a, int b, int c) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 14\n      }\n    }, \"return Math.abs(Math.max(Math.max(a,b), c));\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 14\n      }\n    }), \"}\"), \"bloop.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 14\n      }\n    }, \"what's the point of overloading anyway?!\"), \"it may seem like a pointless nuance rn, but let's see what life would be like \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 92\n      }\n    }, \"without overloading\"), \". check out the code below, which creates two sum methods that are called in the main method:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 14\n      }\n    }, \"double myDouble = sumWithDoubles(1.3, 6.4);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 15\n      }\n    }), \"int myInt = sumWithInts(1, 6);\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }), \"public static int sumWithInts(int a, int b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 14\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 19\n      }\n    }), \"public static double sumWithDoubles(double a, double b) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 14\n      }\n    }, \"return a + b;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 14\n      }\n    }), \"}\"), \"it's pretty irritating to have to remember what you named your two different sum functions: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 106\n      }\n    }, \"sumWithInts\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 129\n      }\n    }, \"sumWithDoubles\"), \". if you had even more sum functions, imagine having to remember the difference between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 238\n      }\n    }, \"sum1\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 251\n      }\n    }, \"sum2\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 264\n      }\n    }, \"sum3\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 277\n      }\n    }, \"sum4\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 290\n      }\n    }, \"sum5\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 303\n      }\n    }, \"sum6\"), \"... hopefully you get the point by now.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 14\n      }\n    }), \"overloading allows functions that perform \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 56\n      }\n    }, \"similar or identical tasks\"), \" \\u2013 but for whatever reason have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 121\n      }\n    }, \"different parameters\"), \", whether they differ by number or type \\u2013 to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 202\n      }\n    }, \"same name\"), \", which not only makes your life easier and more convenient as a programmer, but also \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 304\n      }\n    }, \"improves the readability of your program\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 14\n      }\n    }, \"have you realized that you've worked with overloaded functions before?\"), \"just like we revealed to you on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 50\n      }\n    }, \"functions page\"), \" that you've been working with functions all along, turns out that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 159\n      }\n    }, \"you've already worked with overloaded functions before!!!\"), \" now the question becomes: which ones?!?! can you guess? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 281\n      }\n    }, \"hint:\"), \" which functions that we've worked with can take in a different parameters, by number and/or type?)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 14\n      }\n    }), \"here's a couple: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 36\n      }\n    }, \"substring\"), \" is overloaded by a different \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 82\n      }\n    }, \"number\"), \" of parameters. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 112\n      }\n    }, \"psst. need a reminder\"), \" on what substring does? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 196\n      }\n    }, \"strings page\"), \"!) substring can take in one int parameter r\\u2013 the start index \\u2013 or two int parameters \\u2013 the start index and end index. on the other hand, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 374\n      }\n    }, \"printing functions\"), \" are overloaded by different \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 428\n      }\n    }, \"types\"), \" of parameters. just take a look at the code snippet below illustrating how print and println are overloaded:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 14\n      }\n    }, \"System.out.println(2); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 37\n      }\n    }, \"//one int argument\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 14\n      }\n    }), \"System.out.println(1.99); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 40\n      }\n    }, \"//one double argument\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 14\n      }\n    }), \"System.out.println('+'); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 39\n      }\n    }, \"//one char argument\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 14\n      }\n    }), \"System.out.println(\\\"we love functions\\\"); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 55\n      }\n    }, \"//one String argument\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 14\n      }\n    }), \"System.out.println(false); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 41\n      }\n    }, \"//one boolean argument\")), \"the best overloaded function imo is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 50\n      }\n    }, \"indexOf\"), \", since it has \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 79\n      }\n    }, \"four different sets of parameters\"), \": 1 char, 1 String, 1 char and 1 int, and 1 String and 1 int. pretty fancy, eh? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 200\n      }\n    }, \"psst. need a reminder\"), \" on what indexOf does? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 282\n      }\n    }, \"strings page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 14\n      }\n    }, \"feelin' overloaded with info? time to recap!!\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 14\n      }\n    }, \"dang!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 5\n      }\n    }, \"overloading\"), \" allows multiple functions to have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 62\n      }\n    }, \"same name\"), \" as long as one or both of the following conditions are true:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 6\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 14\n      }\n    }, \"type of parameters\"), \" differ between the functions\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 15\n      }\n    }, \"the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }\n    }, \"number of parameters\"), \" differ between the functions\")), \"when you \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 14\n      }\n    }, \"call\"), \" a function that is overloaded, the computer knows which function to pick, despite them having the same name, because of the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 150\n      }\n    }, \"number and/or type of the arguments\"), \" you provide in your function call. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 232\n      }\n    }, \"benefit\"), \" of overloading is that functions that perform the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 297\n      }\n    }, \"same tasks\"), \" but take in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 327\n      }\n    }, \"different parameters\"), \" can still have the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 374\n      }\n    }, \"same name\"), \". overloading is convenient and makes your program more \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 446\n      }\n    }, \"readable\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 10\n      }\n    }), \"hopefully you don't feel overloaded anymore :)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 6\n      }\n    }, \"triangles:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 40\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 45\n      }\n    }), \"can you calculate the area of a triangle? your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 53\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 75\n      }\n    }, \"overloading\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 97\n      }\n    }, \"create overloaded functions that calculate the area of a triangle for both int and double parameters\"), \". this will require three steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 236\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }\n    }, \"create a function that calculates the area of a triangle using the appropriate integer parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 8\n      }\n    }, \"the formula for the area of a triangle is A = base * height / 2\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }\n    }, \"create an overloaded function that calculates the area of a triangle using the appropriate double parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 8\n      }\n    }, \"this function should have the same name as the function you created in step 1 since it's overloaded\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 7\n      }\n    }, \"call both of your overloaded functions and print the areas\")), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for step 1, your function should take in two integer parameters: the base of the triangle and the height\", \"for step 1, your function should return the area of a triangle as an integer\", \"for step 2, your function should take in two double parameters: the base of the triangle and the height\", \"for step 2, your function should return the area of a triangle as a double\"],\n      id: \"overloading-triangles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-triangles?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-triangles-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 6\n      }\n    }, \"pets galore:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 47\n      }\n    }), \"do you have pets? your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 29\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 51\n      }\n    }, \"overloading\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 73\n      }\n    }, \"create overloaded functions that print what type of pet you have and its name\"), \". this will require four steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 188\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 7\n      }\n    }, \"create a function that takes in \"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 8\n      }\n    }, \"the formula for the area of a triangle is A = base * height / 2\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 7\n      }\n    }, \"create an overloaded function that calculates the area of a triangle using the appropriate double parameters\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 8\n      }\n    }, \"this function should have the same name as the function you created in step 1 since it's overloaded\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 7\n      }\n    }, \"call both of your overloaded functions and print the areas\")), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for step 1, your function should take in two integer parameters: the base of the triangle and the height\", \"for step 1, your function should return the area of a triangle as an integer\", \"for step 2, your function should take in two double parameters: the base of the triangle and the height\", \"for step 2, your function should return the area of a triangle as a double\"],\n      id: \"overloading-triangles\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-triangles?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-triangles-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Overloading;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Overloading.js"],"names":["React","ProgressUpdater","Hint","Overloading","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Overloading extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            mwahaha – we aren't done with <b>functions</b> quite yet! there's one last concept we need to address, called <b>overloading</b>.\n\t            <h3>overloading, as in you put too many clothes in the laundry machine?</h3>\n\t            not rly... but appreciate the effort. <b>overloading</b>, or more explicitly called method overloading, allows <b>multiple</b> functions to have the <b>same name</b>, as long as the <b>number of parameters</b> and/or the <b>type of parameters</b> are <b>different</b>. (<b className=\"note\">psst. need a reminder</b> on what a parameter is? check out the <b className=\"pageName\">functions page</b>!)\n\t            <h3>woah that definition was overloaded with technical language</h3>\n\t            dw! to illustrate the concept of function overloading, let's go through <b>examples pertaining to each of the following conditions</b>:\n\t            <ul>\n\t            \t<li>the <b>type</b> of parameters differ</li>\n\t            \t<li>the <b>number</b> of parameters differ</li>\n\t            </ul>\n\t            remember, overloading means that as long as <b>at least one</b> of the conditions above is true, then two functions can have the <b>same name</b>.\n\t            <h3>overloading by type of parameters</h3>\n\t            let's say that you want to make a <b>sum function</b>. pretty simple, right? our function <b>takes in two numbers</b> and <b>returns their sum</b>. what will the parameters and the return type be? we will pass <b>two ints</b> to our function, and its return type will be <b>int</b>. check out our sum function below:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            but how about if we wanted to calculate the sum of <b>two doubles</b>, not of two ints? well guess what?! because of <b>overloading</b>, we can write two functions, both of them called <b>sum</b>, where one takes in two <b>ints</b> and the other takes in two <b>doubles</b>. of course, this is only possible because <b>the types of the parameters differ</b>. check out our overloaded sum functions below: \n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two doubles</div>\n\t            <br/>\n\t            public static double sum(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            very fun! very fresh!\n\t            <h3>how do you call overloaded functions? cause rnt their names the same?</h3>\n\t            it is true that the names of overloaded functions are identical; however, their <b>parameters are different</b>, and that's how we can distinguish them. using our overloaded sum functions that we made earlier, let's <b>call</b> them in our main method:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \t<div className=\"comment\">//this sum function call invokes the sum function that takes in two doubles, since 1.3 and 6.4 are integers</div>\n\t            \t<br/>\n\t            \tdouble myDouble = sum(1.3, 6.4); <div className=\"comment\">//myDouble = 7.7</div>\n\t            \t<br/>\n\t            \t<div className=\"comment\">//this sum function call invokes the sum function that takes in two ints, since 1 and 6 are integers</div>\n\t            \t<br/>\n\t            \tint myInt = sum(1, 6); <div className=\"comment\">//myInt = 7</div>\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two integers</div>\n\t            <br/>\n\t            public static int sum(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this sum function returns the sum of two doubles</div>\n\t            <br/>\n\t            public static double sum(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            sweeeet!\n\t            <h3>overloading by number of parameters</h3>\n\t            now that we've learned how to overload by changing the type of parameters, let's learn how to overload by changing the number of parameters. say we wanted to make a function that <b>returns the absolute value of the maximum number between two integers</b>. do you remember the easy way to get the absolute value of a number and the maximum number between two numbers? (<b className=\"note\">hint:</b> it starts with an <b>\"m\"</b> and ends in <b>\"ath\"</b>.) omg wow! you guessed it! we need to use <b>Math</b>! (<b className=\"note\">psst. need a reminder</b> on how to use the Math.max and Math.abs functions? check out the <b className=\"pageName\">math page</b>!) once you have an idea on what you need to do, check out our absMax function below:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            how about if we wanted to return the absolute value of the maximum number between <b>not just two</b>, but <b>three integers</b>? woooooo is it getting <b>hot</b> in here? cause we're getting <b>kinda spicyyy</b>. anyways, even though both absMax functions take in int parameters, our first function takes in <b>two ints</b>, while our second function will take in <b>three ints</b>. so, we can name our second method absMax as well. of course, this is only possible because <b>the number of the parameters differ</b>. check out our overloaded absMax functions below: \n\t            <div className=\"code\">\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between three integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b, int c) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(Math.max(a,b), c));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            finally, let's <b>call</b> both of our functions in the main method (<b className=\"note\">btw:</b> gotta love dem main method variable names):\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \t<div className=\"comment\">//this absMax function call invokes the absMax function that takes in two ints, since we provide two arguments</div>\n\t            \t<br/>\n\t            \tint bloop = absMax(-1, -3); <div className=\"comment\">//bloop = 1</div>\n\t            \t<br/>\n\t            \t<div className=\"comment\">//this absMax function call invokes the absMax function that takes in three ints, since we provide three arguments</div>\n\t            \t<br/>\n\t            \tint bloopBloop = absMax(-1, -3, 2); <div className=\"comment\">//bloopBloop = 2</div>\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between two integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(a,b));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            <br/><br/>\n\t            <div className=\"comment\">//this absMax function returns the absolute value of the maximum integer between three integers</div>\n\t            <br/>\n\t            public static int absMax(int a, int b, int c) &#123;\n\t           \t<br/>\n\t           \t<p>\n\t           \t\treturn Math.abs(Math.max(Math.max(a,b), c));\n\t           \t</p>\n\t           \t<br/>\n\t            &#125;\n\t            </div>\n\t            bloop.\n\t            <h3>what's the point of overloading anyway?!</h3>\n\t            it may seem like a pointless nuance rn, but let's see what life would be like <b>without overloading</b>. check out the code below, which creates two sum methods that are called in the main method:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;\n\t            <br/>\n\t            <p>\n\t            \tdouble myDouble = sumWithDoubles(1.3, 6.4);\n\t            \t<br/>\n\t            \tint myInt = sumWithInts(1, 6);\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            public static int sumWithInts(int a, int b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            <br/><br/>\n\t            public static double sumWithDoubles(double a, double b) &#123;\n\t            <br/>\n\t            <p>\n\t            \treturn a + b;\n\t            </p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            it's pretty irritating to have to remember what you named your two different sum functions: <b>sumWithInts</b> and <b>sumWithDoubles</b>. if you had even more sum functions, imagine having to remember the difference between <b>sum1</b>, <b>sum2</b>, <b>sum3</b>, <b>sum4</b>, <b>sum5</b>, <b>sum6</b>... hopefully you get the point by now.\n\t            <br/>\n\t            overloading allows functions that perform <b>similar or identical tasks</b> – but for whatever reason have <b>different parameters</b>, whether they differ by number or type – to have the <b>same name</b>, which not only makes your life easier and more convenient as a programmer, but also <b>improves the readability of your program</b>.\n\t            <h3>have you realized that you've worked with overloaded functions before?</h3>\n\t            just like we revealed to you on the <b className=\"pageName\">functions page</b> that you've been working with functions all along, turns out that <b>you've already worked with overloaded functions before!!!</b> now the question becomes: which ones?!?! can you guess? (<b className=\"note\">hint:</b> which functions that we've worked with can take in a different parameters, by number and/or type?) \n\t            <br/>here's a couple: <b>substring</b> is overloaded by a different <b>number</b> of parameters. (<b className=\"note\">psst. need a reminder</b> on what substring does? check out the <b className=\"pageName\">strings page</b>!) substring can take in one int parameter r– the start index – or two int parameters – the start index and end index. on the other hand, <b>printing functions</b> are overloaded by different <b>types</b> of parameters. just take a look at the code snippet below illustrating how print and println are overloaded:\n\t            <div className=\"code\">\n\t            System.out.println(2); <div className=\"comment\">//one int argument</div>\n\t            <br/>\n\t            System.out.println(1.99); <div className=\"comment\">//one double argument</div>\n\t            <br/>\n\t            System.out.println('+'); <div className=\"comment\">//one char argument</div>\n\t            <br/>\n\t            System.out.println(\"we love functions\"); <div className=\"comment\">//one String argument</div>\n\t            <br/>\n\t            System.out.println(false); <div className=\"comment\">//one boolean argument</div>\n\t            </div>\n\t            the best overloaded function imo is <b>indexOf</b>, since it has <b>four different sets of parameters</b>: 1 char, 1 String, 1 char and 1 int, and 1 String and 1 int. pretty fancy, eh? (<b className=\"note\">psst. need a reminder</b> on what indexOf does? check out the <b className=\"pageName\">strings page</b>!)\n\t            <h3>feelin' overloaded with info? time to recap!!</h3>\n\t            <b>dang!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\t<b>overloading</b> allows multiple functions to have the <b>same name</b> as long as one or both of the following conditions are true:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>the <b>type of parameters</b> differ between the functions</li>\n\t            \t<li>the <b>number of parameters</b> differ between the functions</li>\n\t\t\t\t</ul>\n\t\t\t\twhen you <b>call</b> a function that is overloaded, the computer knows which function to pick, despite them having the same name, because of the <b>number and/or type of the arguments</b> you provide in your function call. the <b>benefit</b> of overloading is that functions that perform the <b>same tasks</b> but take in <b>different parameters</b> can still have the <b>same name</b>. overloading is convenient and makes your program more <b>readable</b>.\n\t\t\t\t<br/><br/>\n\t\t\t\thopefully you don't feel overloaded anymore :)\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">triangles:</b><br/><br/>\n\t\t\t\t\tcan you calculate the area of a triangle? your <b>goal</b> is to use <b>overloading</b> to <b>create overloaded functions that calculate the area of a triangle for both int and double parameters</b>. this will require three steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a function that calculates the area of a triangle using the appropriate integer parameters</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>the formula for the area of a triangle is A = base * height / 2</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>create an overloaded function that calculates the area of a triangle using the appropriate double parameters</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>this function should have the same name as the function you created in step 1 since it's overloaded</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>call both of your overloaded functions and print the areas</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for step 1, your function should take in two integer parameters: the base of the triangle and the height\",\n\t\t\t\t\t\t\t\"for step 1, your function should return the area of a triangle as an integer\",\n\t\t\t\t\t\t\t\"for step 2, your function should take in two double parameters: the base of the triangle and the height\",\n\t\t\t\t\t\t\t\"for step 2, your function should return the area of a triangle as a double\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"overloading-triangles\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-triangles?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-triangles-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">pets galore:</b><br/><br/>\n\t\t\t\t\tdo you have pets? your <b>goal</b> is to use <b>overloading</b> to <b>create overloaded functions that print what type of pet you have and its name</b>. this will require four steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a function that takes in </li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>the formula for the area of a triangle is A = base * height / 2</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>create an overloaded function that calculates the area of a triangle using the appropriate double parameters</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>this function should have the same name as the function you created in step 1 since it's overloaded</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>call both of your overloaded functions and print the areas</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for step 1, your function should take in two integer parameters: the base of the triangle and the height\",\n\t\t\t\t\t\t\t\"for step 1, your function should return the area of a triangle as an integer\",\n\t\t\t\t\t\t\t\"for step 2, your function should take in two double parameters: the base of the triangle and the height\",\n\t\t\t\t\t\t\t\"for step 2, your function should return the area of a triangle as a double\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"overloading-triangles\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-triangles?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-triangles-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Overloading;"]},"metadata":{},"sourceType":"module"}