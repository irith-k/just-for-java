{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Nesting.js\";\nimport React from 'react';\n\nclass Nesting extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"in programming, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 21\n      }\n    }, \"nesting\"), \" simply means \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 49\n      }\n    }, \"putting code blocks inside each other\"), \", such as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 103\n      }\n    }, \"if statements\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 125\n      }\n    }, \"for loops\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 147\n      }\n    }, \"while loops\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 168\n      }\n    }, \"psst. need a reminder\"), \" on how these three code blocks work? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 265\n      }\n    }, \"if statement page\"), \", the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 316\n      }\n    }, \"for loop page\"), \", and the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 367\n      }\n    }, \"while loop page\"), \"!) now, you might be thinking, what's the point of putting an if statement inside a while loop inside a for loop? nesting allows our programs to become \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 562\n      }\n    }, \"more complex in their functionality\"), \"!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"don't believe us?\"), \"let's take a look at the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 30\n      }\n    }, \"classic example\"), \" we used to demonstrate how for loops and while loops work: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 112\n      }\n    }, \"print the numbers 1-5\"), \". just to refresh you, here is the classic example coded out using a for loop:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i \\u2264 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 6\n      }\n    }, \"System.out.print(i + \\\" \\\");\"), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }\n    })), \"and using a while loop:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), \"now, let's change things up a bit. say we wanted to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 57\n      }\n    }, \"print the numbers 1-5, except for the number 4\"), \". how can we do this? well, we already have the code to print the numbers 1-5, so all we need to do is not print the number if it is equal to 4! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 256\n      }\n    }, \"btw:\"), \" did you notice the word \\\"if\\\" in that sentence?). let's add an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 347\n      }\n    }, \"if statement inside our loop\"), \" that checks if the number is not equal to 4, and if so, prints the number. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 459\n      }\n    }, \"hint:\"), \" you can use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 501\n      }\n    }, \"!=\"), \" to check if the number is not equal 4.) take a look at the code below!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i \\u2264 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 6\n      }\n    }, \"if(i != 4) { \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 27\n      }\n    }, \"//if i does not equal 4, print i\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 94\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"indent1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, \"System.out.print(i + \\\" \\\");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 60\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 6\n      }\n    }, \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 19\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    })), \"wow! that's a lot of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 26\n      }\n    }, \"curly braces\"), \"! when you are nesting, it's super important to keep track of which curly brace defines what code block. for the code above, the opening curly brace at the very top and the closing curly brace at the very bottom define our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 268\n      }\n    }, \"for loop\"), \", whereas the opening and closing curly braces inside the for loop curly braces define our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 374\n      }\n    }, \"if statement\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }), \"before we move on, let's quickly see what our example would look like with a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 82\n      }\n    }, \"while loop\"), \" instead of a for loop:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }), \"finally, let's take a look at what got printed in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, \"1 2 3 5\"), \"sweet!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"hmu with another example\"), \"for sure! let's say you're hungry and want some pizza. you order some boxes of pizza, and each box has a fixed number of slices in it.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 6\n      }\n    }, \"loopity loopity loop:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 56\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 33\n      }\n    }, \"nesting\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 51\n      }\n    }, \"make a for loop that keeps printing \\\"loopity\\\" until the last iteration, when you print \\\"loop\\\"\"), \"; for example, if your for loop iterates 3 times, then you should print \\\"loopity loopity loop\\\". this will require three steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 277\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"create a variable that stores how many times you want your for loop to iterate\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, \"construct a for loop that iterates the correct number of times\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, \"inside your for loop, check if you have reached the last iteration or not\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 8\n      }\n    }, \"if you have reached the last iteration, then print out \\\"loop\\\"\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 8\n      }\n    }, \"otherwise, then print out \\\"loopity \\\"\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 8\n      }\n    }, \"note that there's a space at the end of loopity so that there is space between the words\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your initialize component should be int i = 1, your condition component should be i <= \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 146\n      }\n    }, \"num\"), \", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 164\n      }\n    }, \"num\"), \" is the variable you created in step 1, and your iterate component should be i++\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 254\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 259\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", you will need an if statement as well as an else statement\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 114\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 119\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", you know that you have reached the last iteration if your iterator variable i is equal to \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 146\n      }\n    }, \"num\"), \", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 164\n      }\n    }, \"num\"), \" is the variable you created in step 1\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 212\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 217\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", make sure you use System.out.print() so that all the words are printed on the same line\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 143\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 148\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/nesting-loopity-loopity-loop-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }\n    }, \"hll wrld:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 39\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 44\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 33\n      }\n    }, \"nesting\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 51\n      }\n    }, \"remove the vowels from a String\"), \"; for example, if the original String is \\\"hello world\\\", the new String would be \\\"hll wrld\\\". this will require five steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 210\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, \"create two String variables, one that stores the original String and one that will store the vowels-removed String\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }\n    }, \"you can set the original String variable to any text you want\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 8\n      }\n    }, \"the vowels-removed String variable can be initialized to an empty String \\\"\\\"\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }\n    }, \"use a for loop to iterate through each character in the String using indexing\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 8\n      }\n    }, \"think about what the three components\\xA0\\u2013\\xA0initialze, condition, and iterate \\u2013\\xA0of your for loop are going to be\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, \"get the current character that you are on in the String using its index\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, \"if the current character is not a vowel, then concatenate it to the vowels-removed String\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }\n    }, \"remember that vowels can be lowercase or uppercase\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }\n    }, \"there are numerous ways to do this step: one uses boolean logic and one creates a String of all the vowels\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, \"print out the vowels-removed String variable\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }\n    }, \"this step should be performed after the for loop is done\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your initialize component should be int i = 0 because indexing starts at 0\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 130\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 135\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your condition component should be i < str.length() the last index in the String is at the length of the String - 1\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 179\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", your iterate component should be i++ since each time we loop, we want to go to the next index in the String\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 163\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 168\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }\n    }, \"step 3\"), \", you will need to use charAt to get the character at a specified index in the String \\u2013\\xA0check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 156\n      }\n    }, \"Strings page\"), \" for more details\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 213\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 218\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", if you want to use boolean logic, make one giant if statement that checks if the character doesn't equal any of the vowels, both uppercase and lowercase; remember, ! = not, && = and, || = or, () = do this first; refer to the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 281\n      }\n    }, \"boolean logic page\"), \" for the specifics\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 345\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 350\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", you can also create a String of all the vowels \\\"AEIOUaeiou\\\" \\u2013 notice that it includes both uppercase and lowercase vowels \\u2013 and check if the index of the current character in the vowels String is equal to -1, meaning that the current character does not appear in the vowels String, meaing that it isn't a vowel\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 366\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 371\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, \"hint:\"), \" for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", if the current character is not a vowel, then you can use += to concatenate, or add, that character to the end of the vowels-removed String\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 195\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 200\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/nesting-hll-wrld?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/nesting-hll-wrld-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, \"{ { recap } }\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, \"yo!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Nesting;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Nesting.js"],"names":["React","Nesting","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Nesting extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tin programming, <b>nesting</b> simply means <b>putting code blocks inside each other</b>, such as <b>if statements</b>, <b>for loops</b>, and <b>while loops</b>. (<b className=\"note\">psst. need a reminder</b> on how these three code blocks work? check out the <b className=\"pageName\">if statement page</b>, the <b className=\"pageName\">for loop page</b>, and the <b className=\"pageName\">while loop page</b>!) now, you might be thinking, what's the point of putting an if statement inside a while loop inside a for loop? nesting allows our programs to become <b>more complex in their functionality</b>!\n\t\t\t\t<h3>don't believe us?</h3>\n\t\t\t\tlet's take a look at the <b>classic example</b> we used to demonstrate how for loops and while loops work: <b>print the numbers 1-5</b>. just to refresh you, here is the classic example coded out using a for loop:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tfor(int i = 1; i &le; 5; i++) &#123; <br/>\n\t\t\t\t\t<p>System.out.print(i + \" \");</p>\n\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\tand using a while loop:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tnow, let's change things up a bit. say we wanted to <b>print the numbers 1-5, except for the number 4</b>. how can we do this? well, we already have the code to print the numbers 1-5, so all we need to do is not print the number if it is equal to 4! (<b className=\"note\">btw:</b> did you notice the word \"if\" in that sentence?). let's add an <b>if statement inside our loop</b> that checks if the number is not equal to 4, and if so, prints the number. (<b className=\"note\">hint:</b> you can use <b>!=</b> to check if the number is not equal 4.) take a look at the code below!\n\t\t\t\t<div className=\"code\">\n\t\t\t\tfor(int i = 1; i &le; 5; i++) &#123; <br/>\n\t\t\t\t\t<p>if(i != 4) &#123; <div className=\"comment\">//if i does not equal 4, print i</div></p><br/>\n\t\t\t\t\t\t<p className=\"indent1\">System.out.print(i + \" \");</p><br/>\n\t\t\t\t\t<p>&#125;</p><br/>\n\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\twow! that's a lot of <b>curly braces</b>! when you are nesting, it's super important to keep track of which curly brace defines what code block. for the code above, the opening curly brace at the very top and the closing curly brace at the very bottom define our <b>for loop</b>, whereas the opening and closing curly braces inside the for loop curly braces define our <b>if statement</b>.\n\t\t\t\t<br/>\n\t\t\t\tbefore we move on, let's quickly see what our example would look like with a <b>while loop</b> instead of a for loop:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t</div>\n\t\t\t\tfinally, let's take a look at what got printed in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t1 2 3 5\n\t\t\t\t</div>\n\t\t\t\tsweet!\n\t\t\t\t<h3>hmu with another example</h3>\n\t\t\t\tfor sure! let's say you're hungry and want some pizza. you order some boxes of pizza, and each box has a fixed number of slices in it. \n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">loopity loopity loop:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>nesting</b> to <b>make a for loop that keeps printing \"loopity\" until the last iteration, when you print \"loop\"</b>; for example, if your for loop iterates 3 times, then you should print \"loopity loopity loop\". this will require three steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a variable that stores how many times you want your for loop to iterate</li>\n\t\t\t\t\t\t<li>construct a for loop that iterates the correct number of times</li>\n\t\t\t\t\t\t<li>inside your for loop, check if you have reached the last iteration or not</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>if you have reached the last iteration, then print out \"loop\"</li>\n\t\t\t\t\t\t\t<li>otherwise, then print out \"loopity \"</li>\n\t\t\t\t\t\t\t<li>note that there's a space at the end of loopity so that there is space between the words</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your initialize component should be int i = 1, your condition component should be i &lt;= <i>num</i>, where <i>num</i> is the variable you created in step 1, and your iterate component should be i++<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, you will need an if statement as well as an else statement<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, you know that you have reached the last iteration if your iterator variable i is equal to <i>num</i>, where <i>num</i> is the variable you created in step 1<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, make sure you use System.out.print() so that all the words are printed on the same line<br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/nesting-loopity-loopity-loop-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">hll wrld:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>nesting</b> to <b>remove the vowels from a String</b>; for example, if the original String is \"hello world\", the new String would be \"hll wrld\". this will require five steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create two String variables, one that stores the original String and one that will store the vowels-removed String</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>you can set the original String variable to any text you want</li>\n\t\t\t\t\t\t\t<li>the vowels-removed String variable can be initialized to an empty String \"\"</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>use a for loop to iterate through each character in the String using indexing</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>think about what the three components – initialze, condition, and iterate – of your for loop are going to be</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>get the current character that you are on in the String using its index</li>\n\t\t\t\t\t\t<li>if the current character is not a vowel, then concatenate it to the vowels-removed String</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>remember that vowels can be lowercase or uppercase</li>\n\t\t\t\t\t\t\t<li>there are numerous ways to do this step: one uses boolean logic and one creates a String of all the vowels</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>print out the vowels-removed String variable</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>this step should be performed after the for loop is done</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your initialize component should be int i = 0 because indexing starts at 0<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your condition component should be i &lt; str.length() the last index in the String is at the length of the String - 1<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 2</b>, your iterate component should be i++ since each time we loop, we want to go to the next index in the String<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 3</b>, you will need to use charAt to get the character at a specified index in the String – check out the <b className=\"pageName\">Strings page</b> for more details<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, if you want to use boolean logic, make one giant if statement that checks if the character doesn't equal any of the vowels, both uppercase and lowercase; remember, ! = not, && = and, || = or, () = do this first; refer to the <b className=\"pageName\">boolean logic page</b> for the specifics<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, you can also create a String of all the vowels \"AEIOUaeiou\" – notice that it includes both uppercase and lowercase vowels – and check if the index of the current character in the vowels String is equal to -1, meaning that the current character does not appear in the vowels String, meaing that it isn't a vowel<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint:</b> for <b>step 4</b>, if the current character is not a vowel, then you can use += to concatenate, or add, that character to the end of the vowels-removed String<br/><br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/nesting-hll-wrld?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/nesting-hll-wrld-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<h3>&#123; &#123; recap &#125; &#125;</h3>\n\t\t\t\t<b>yo!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Nesting;"]},"metadata":{},"sourceType":"module"}