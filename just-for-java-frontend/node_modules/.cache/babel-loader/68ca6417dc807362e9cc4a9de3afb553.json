{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Array.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Array extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, \"<name>\"), \"[\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 34\n      }\n    }, \"<index>\"), \"]\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, \"btw:\"), \" when you access an element from an array, you can store the value in a variable, or print it out.)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 19\n      }\n    }), \"time to try these blueprints out in code! let's make an array that holds three Strings in this order: \\\"just\\\", \\\"for\\\", \\\"java\\\". after creating the array, create a variable that stores the third element in the array. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 228\n      }\n    }, \"hint:\"), \" at what indexes are \\\"just\\\", \\\"for\\\", and \\\"java\\\" located in our array? and at what index is the third element located?) check out the code below that makes this program:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }\n    }, \"//we create an array of 3 Strings called jfj\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }\n    }), \"String[] jfj = new String[3];\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }\n    }, \"//we set the value at index 0 to \\\"just\\\", the value at index 1 to \\\"for\\\", and the value at index 2 to \\\"java\\\"\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 14\n      }\n    }), \"jfj[0] = \\\"just\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }\n    }), \"jfj[1] = \\\"for\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }), \"jfj[2] = \\\"java\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }, \"//we create a variable to store the third element, which is at the second index, in our array\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }\n    }), \"String java = jfj[2];\"), \"for a more visual explanation of the code above, check out the table below that maps each value in our jfj array to its appropriate index. the highlighted index and value represents the third element in the array, which is stored in the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 251\n      }\n    }, \"java\"), \" variable we initialized above.\", /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, \"\\\"just\\\"\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, \"\\\"for\\\"\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"\\\"java\\\"\"))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, \"2\")))), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 14\n      }\n    }, \"is it just me or is it really tedious to fill your array like we did above?\"), \"you're right; it's very tedious. however, instead of having to fill each of the slots in our array with the values we want after we initialize our array, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 168\n      }\n    }, \"we can fill our array right when we initialize it\"), \"! here is the blueprint for filling your array with values right when you initialize your array:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }\n    }, \"<type of values in array>\"), \"[] \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 55\n      }\n    }, \"<name>\"), \" = {\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 83\n      }\n    }, \"<list of values>\"), \"};\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    }), \"though we don't specify the number of values inside our array, it is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 83\n      }\n    }, \"implicitly defined by the number of values in between our curly braces\"), \" \\u2013 and the length of the array once again \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 202\n      }\n    }, \"cannot change\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 14\n      }\n    }, \"speaking of the length of the array, is there a way to get that value?\"), \"you bet! here is the blueprint on getting the length of an array:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 14\n      }\n    }, \"<name>\"), \".length\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 14\n      }\n    }, \"beware, young jedi!\"), \" to get the length of a String, you use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 80\n      }\n    }, \"str.length()\"), \" with parentheses. to get the length of an array, you use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 157\n      }\n    }, \"arr.length\"), \" with no parentheses.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }), \"time to try these blueprints out in code! since we are \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 69\n      }\n    }, \"huge star wars fans\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 97\n      }\n    }, \"btw:\"), \" if you haven't seen star wars, watch it. right now. we'll wait), let's create an array that stores all the star wars movies in the original series. then, let's print out the length of the array. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 322\n      }\n    }, \"hint:\"), \" there are 9 movies in the original star wars series.) check out the code below that creates this array and prints out its length:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 14\n      }\n    }, \"//we create a String array called starWars using the shortcut method we talked about earlier; the different String values are separated by commas\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 14\n      }\n    }), \"String[] starWars = {\\\"The Phantom Menace\\\", \\\"Attack of the Clones\\\", \\\"Revenge of the Sith\\\", \\\"A New Hope\\\", \\\"The Empire Strikes Back\\\", \\\"Return of the Jedi\\\", \\\"The Force Awakens\\\", \\\"The Last Jedi\\\", \\\"The Rise of Skywalker\\\"};\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }\n    }, \"//we print out the length of starWars, which is 9; we also use String concatenation here just to be extra fancy hehe\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 14\n      }\n    }), \"System.out.print(\\\"star wars has \\\" + starWars.length + \\\" episodes\\\");\"), \"check out the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 14\n      }\n    }, \"star wars has 9 episodes\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }\n    }, \"[\\\"hip\\\", \\\"hip\\\"] \\u2013\\xA0hip hip array! recap time!\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 14\n      }\n    }, \"hip hip hooray!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 14\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }\n    }, \"one up:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 42\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 33\n      }\n    }, \"arrays\"), \" to create a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 59\n      }\n    }, \"function\"), \" that takes in an int array and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 106\n      }\n    }, \"returns a new array where every value is incremented, or one up\"), \". this will require six steps:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 206\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, \"create a function header that takes in an int array and returns an int array\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, \"inside this function, initialize a new array that is the same length as the original array\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, \"next, fill this new array with every element in the original array incremented, or one up\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 8\n      }\n    }, \"to steer you in the right direction, you'll need to make a for loop\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, \"finally, return the new array\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, \"in the main method, create an int array and call this function by passing this array as an argument\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, \"set your array variable equal to the value that is returned from the function call\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 8\n      }\n    }, \"thus, your array variable is essentially updated to the one up array returned from your function\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, \"print your array variable after the function call\")), /*#__PURE__*/React.createElement(Hint, {\n      hints: [\"for step 1, your function's return type is int[] and your function takes in one parameter, which has an int[] type as well\", \"for step 2, when you create your new array, define it's length to be the length of the array parameter\", \"for step 3, use a for loop to iterate through every index in the array; it doesn't matter which array's length you use in the condition component of the for loop because both of them are the same length\", \"for step 3, inside your for loop, change the value at the current index, the iterator variable in your for loop, in the new array to be equal to the value at the current index in the original array + 1\", \"for step 5, you can use the shortcut method with curly braces to create the array in the main method\", \"for step 5, set the array you just created equal to your function call, and also put the array you just created in the parentheses of the function call to pass it as an argument to the function\", \"for step 6, remember that you can't simply print an array in one print statement – you have to print out each element of the array individually\", \"for step 6, to print your array, you will need to use a for loop to iterate through each index, and print the value at each index in the array\"],\n      id: \"array-one-up\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-pets-galore?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/overloading-pets-galore-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Array;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Array.js"],"names":["React","ProgressUpdater","Hint","Array","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAmC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACVC,MAAAA,QAAQ,EAAE;AADA,KAAX;AAGA;;AAEDC,EAAAA,mBAAmB,CAACD,QAAD,EAAU;AAC5B,SAAKE,QAAL,CAAc;AACbF,MAAAA,QAAQ,EAAEA;AADG,KAAd;AAGA;;AAEDG,EAAAA,MAAM,GAAE;AACP,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,eAAD;AACW,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWM,IAD5B;AAEW,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IAF5B;AAGW,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAHhC;AAIW,MAAA,MAAM,EAAGA,QAAD,IAAY,KAAKC,mBAAL,CAAyBD,QAAzB,CAJ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAQU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,oBACoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADpB,MARV,eAWU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXV,eAWe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXf,oBAYW;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZX,sHAaU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbV,eAae;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbf,+OAcgO;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAdhO,gMAeU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,gDAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJL,eAKA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0HALA,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,qCAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARA,oCAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVA,qCAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAYK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZL,eAaA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uGAbA,eAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdA,0BAfV,gQAgCuP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCvP,kDAiCU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,CAHD,CADE,eAMF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAJ,CAHD,CANE,CAjCV,eA6CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qFA7CV,6KA8CoK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DA9CpK,mHA+CU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/CV,eAgDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADA,sBACyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADzC,uBACqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADrE,OAhDV,eAmDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDV,eAmDe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDf,wFAoD+E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFApD/E,kEAoDsM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBApDtM,oBAqDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gFArDV,oFAuDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvDV,eAwDU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,YAxDV,eA2DU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3DV,eA2De;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3Df,eA4DU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA5DV,2DA4D4E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBA5D5E,6EA4DyJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA5DzJ,wCA6DU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7DV,eA6De;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7Df,0EA8DiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA9DjE,qBA8D6F;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9D7F,wNA8D8T;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eA9D9T,qJA+DU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2JADA,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,6PAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,eAKA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8HALA,eAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANA,4EA/DV,yCAyEU;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAzEV,eA4EU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5EV,eA6EU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iEA7EV,eA8EU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBA9EV,yCA+EU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/EV,eA+Ee;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA/Ef,eAgFU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhFV,eAiFU;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACR;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADQ,eACuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADvB,eAC4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD5B,wBAEH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFG,8BAEmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFnB,gCAE6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAF7C,mDAE4F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yEAF5F,iDAEgM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFhM,eAGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sFADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oGAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mGAHD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADD,CAJD,eAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAPD,eAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6GARD,eASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4FADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0GAFD,CATD,eAaC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAbD,CAHQ,eAkBR,oBAAC,IAAD;AACC,MAAA,KAAK,EAAE,CACN,4HADM,EAEN,wGAFM,EAGN,4MAHM,EAIN,2MAJM,EAKN,sGALM,EAMN,mMANM,EAON,iJAPM,EAQN,gJARM,CADR;AAWC,MAAA,EAAE,EAAC,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBQ,eA+BR;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,MAAM,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAoC,MAAA,GAAG,EAAC,gEAAxC;AAAyG,MAAA,SAAS,EAAC,IAAnH;AAAwH,MAAA,WAAW,EAAC,IAApI;AAAyI,MAAA,iBAAiB,EAAC,MAA3J;AAAkK,MAAA,eAAe,EAAC,MAAlL;AAAyL,MAAA,OAAO,EAAC,0FAAjM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CA/BQ,CAjFV,eAoHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApHD,eAqHC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADA,eACqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrC,eAC0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD1C,4BAES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFT,+CAEwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFxD,sGAE0J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF1J,oBAEoK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFpK,eAEyK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFzK,eAGC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAQ,MAAA,MAAM,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAC,MAA7B;AAAoC,MAAA,GAAG,EAAC,yEAAxC;AAAkH,MAAA,SAAS,EAAC,IAA5H;AAAiI,MAAA,WAAW,EAAC,IAA7I;AAAkJ,MAAA,iBAAiB,EAAC,MAApK;AAA2K,MAAA,eAAe,EAAC,MAA3L;AAAkM,MAAA,OAAO,EAAC,0FAA1M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CAHD,CArHD,eA4HC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5HD,eA6HU,oBAAC,eAAD;AACE,MAAA,IAAI,EAAE,KAAKF,KAAL,CAAWM,IADnB;AAEE,MAAA,IAAI,EAAE,KAAKN,KAAL,CAAWO,IAFnB;AAGE,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWC,QAHvB;AAIE,MAAA,MAAM,EAAGA,QAAD,IAAY,KAAKC,mBAAL,CAAyBD,QAAzB,CAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7HV,8BAmIqB;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAnIrB,0BAmIiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAnIjE,8EAmI4I;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAnI5I,CADD;AAuIA;;AAtJiC;;AAyJnC,eAAeL,KAAf","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Array extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            \n\t            <b>\n\t            <i>&lt;name&gt;</i>[<i>&lt;index&gt;</i>]\n\t            </b>\n\t            <br/><br/>\n\t            (<b className=\"note\">btw:</b> when you access an element from an array, you can store the value in a variable, or print it out.)\n\t            <br/><br/>\n\t            time to try these blueprints out in code! let's make an array that holds three Strings in this order: \"just\", \"for\", \"java\". after creating the array, create a variable that stores the third element in the array. (<b className=\"note\">hint:</b> at what indexes are \"just\", \"for\", and \"java\" located in our array? and at what index is the third element located?) check out the code below that makes this program:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//we create an array of 3 Strings called jfj</div>\n\t            <br/>\n\t            String[] jfj = new String[3];\n\t            <br/><br/>\n\t            <div className=\"comment\">//we set the value at index 0 to \"just\", the value at index 1 to \"for\", and the value at index 2 to \"java\"</div>\n\t            <br/>\n\t            jfj[0] = \"just\";\n\t            <br/>\n\t            jfj[1] = \"for\";\n\t            <br/>\n\t            jfj[2] = \"java\";\n\t            <br/><br/>\n\t            <div className=\"comment\">//we create a variable to store the third element, which is at the second index, in our array</div>\n\t            <br/>\n\t            String java = jfj[2];\n\t            </div>\n\t            for a more visual explanation of the code above, check out the table below that maps each value in our jfj array to its appropriate index. the highlighted index and value represents the third element in the array, which is stored in the <i>java</i> variable we initialized above.\n\t            <table>\n\t        \t\t<tr>\n\t        \t\t\t<td>\"just\"</td>\n\t        \t\t\t<td>\"for\"</td>\n\t        \t\t\t<td><b>\"java\"</b></td>\n\t        \t\t</tr>\n\t        \t\t<tr>\n\t        \t\t\t<td>0</td>\n\t        \t\t\t<td>1</td>\n\t        \t\t\t<td><b>2</b></td>\n\t        \t\t</tr>\n\t        \t</table>\n\t            <h3>is it just me or is it really tedious to fill your array like we did above?</h3>\n\t            you're right; it's very tedious. however, instead of having to fill each of the slots in our array with the values we want after we initialize our array, <b>we can fill our array right when we initialize it</b>! here is the blueprint for filling your array with values right when you initialize your array:\n\t            <br/>\n\t            <b>\n\t            <i>&lt;type of values in array&gt;</i>[] <i>&lt;name&gt;</i> = &#123;<i>&lt;list of values&gt;</i>&#125;;\n\t            </b>\n\t            <br/><br/>\n\t            though we don't specify the number of values inside our array, it is <b>implicitly defined by the number of values in between our curly braces</b> – and the length of the array once again <b>cannot change</b>.\n\t            <h3>speaking of the length of the array, is there a way to get that value?</h3>\n\t            you bet! here is the blueprint on getting the length of an array:\n\t            <br/>\n\t            <b>\n\t            <i>&lt;name&gt;</i>.length\n\t            </b>\n\t            <br/><br/>\n\t            <b>beware, young jedi!</b> to get the length of a String, you use <b>str.length()</b> with parentheses. to get the length of an array, you use <b>arr.length</b> with no parentheses.\n\t            <br/><br/>\n\t            time to try these blueprints out in code! since we are <b>huge star wars fans</b> (<b className=\"note\">btw:</b> if you haven't seen star wars, watch it. right now. we'll wait), let's create an array that stores all the star wars movies in the original series. then, let's print out the length of the array. (<b className=\"note\">hint:</b> there are 9 movies in the original star wars series.) check out the code below that creates this array and prints out its length:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//we create a String array called starWars using the shortcut method we talked about earlier; the different String values are separated by commas</div>\n\t            <br/>\n\t            String[] starWars = &#123;\"The Phantom Menace\", \"Attack of the Clones\", \"Revenge of the Sith\", \"A New Hope\", \"The Empire Strikes Back\", \"Return of the Jedi\", \"The Force Awakens\", \"The Last Jedi\", \"The Rise of Skywalker\"&#125;;\n\t            <br/>\n\t            <div className=\"comment\">//we print out the length of starWars, which is 9; we also use String concatenation here just to be extra fancy hehe</div>\n\t            <br/>\n\t            System.out.print(\"star wars has \" + starWars.length + \" episodes\");\n\t            </div>\n\t            check out the console:\n\t            <div className=\"code\">\n\t            star wars has 9 episodes\n\t            </div>\n\t            <h3></h3>\n\t            <h3>[\"hip\", \"hip\"] – hip hip array! recap time!</h3>\n\t            <b>hip hip hooray!</b> you made it to recap!\n\t            <br/><br/>\n\t            <h3>pit stop</h3>\n\t            <div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">one up:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>arrays</b> to create a <b>function</b> that takes in an int array and <b>returns a new array where every value is incremented, or one up</b>. this will require six steps:<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>create a function header that takes in an int array and returns an int array</li>\n\t\t\t\t\t\t<li>inside this function, initialize a new array that is the same length as the original array</li>\n\t\t\t\t\t\t<li>next, fill this new array with every element in the original array incremented, or one up</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>to steer you in the right direction, you'll need to make a for loop</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>finally, return the new array</li>\n\t\t\t\t\t\t<li>in the main method, create an int array and call this function by passing this array as an argument</li>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>set your array variable equal to the value that is returned from the function call</li>\n\t\t\t\t\t\t\t<li>thus, your array variable is essentially updated to the one up array returned from your function</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<li>print your array variable after the function call</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\t<Hint\n\t\t\t\t\t\thints={[\n\t\t\t\t\t\t\t\"for step 1, your function's return type is int[] and your function takes in one parameter, which has an int[] type as well\",\n\t\t\t\t\t\t\t\"for step 2, when you create your new array, define it's length to be the length of the array parameter\",\n\t\t\t\t\t\t\t\"for step 3, use a for loop to iterate through every index in the array; it doesn't matter which array's length you use in the condition component of the for loop because both of them are the same length\",\n\t\t\t\t\t\t\t\"for step 3, inside your for loop, change the value at the current index, the iterator variable in your for loop, in the new array to be equal to the value at the current index in the original array + 1\",\n\t\t\t\t\t\t\t\"for step 5, you can use the shortcut method with curly braces to create the array in the main method\",\n\t\t\t\t\t\t\t\"for step 5, set the array you just created equal to your function call, and also put the array you just created in the parentheses of the function call to pass it as an argument to the function\",\n\t\t\t\t\t\t\t\"for step 6, remember that you can't simply print an array in one print statement – you have to print out each element of the array individually\",\n\t\t\t\t\t\t\t\"for step 6, to print your array, you will need to use a for loop to iterate through each index, and print the value at each index in the array\"\n\t\t\t\t\t\t]}\n\t\t\t\t\t\tid=\"array-one-up\"\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-pets-galore?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/overloading-pets-galore-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Array;"]},"metadata":{},"sourceType":"module"}