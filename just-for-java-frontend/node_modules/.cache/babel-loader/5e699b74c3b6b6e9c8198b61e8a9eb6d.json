{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Constants.js\";\nimport React from 'react';\n\nclass Constants extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"throwback to the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 22\n      }\n    }, \"variables page\"), \" when you learned how to initialize a variable and change its value. now, we are going to learn about a special type of variable called a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 202\n      }\n    }, \"constant\"), \". in java, a constant is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 242\n      }\n    }, \"a variable whose value cannot be changed once it has been initialized\"), \". a constant is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 337\n      }\n    }, \"immutable\"), \" variable, or unable to be changed. on the other hand, the variables you have been creating so far have all been \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 466\n      }\n    }, \"mutable\"), \", or able to be changed. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 506\n      }\n    }, \"btw:\"), \" from here on out, whenever we say \\\"constant\\\", we are referencing an immutable variable, and whenever we say \\\"variable\\\", you can assume that we are referencing a mutable variable, the ones that you've been creating so far.)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"so how do you make this so-called \\\"special variable\\\"?\"), \"in order to create a constant, we can use the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 51\n      }\n    }, \"final\"), \" keyword. you can remember that the keyword is final because you are essentially initializing the constant variable to its \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 186\n      }\n    }, \"final value\"), \", since it can't be changed. here is the blueprint for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 259\n      }\n    }, \"creating a constant\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 286\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \"final \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 14\n      }\n    }, \"<type> <name> = <immutable_value>;\")), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"but what happens if i do try to change the value of a constant?\"), \"if you ever attempt changing the value of a constant in your program, you will get an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 91\n      }\n    }, \"error\"), \". and remember, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 119\n      }\n    }, \"red text in your console = no no\"), \". so don't change the value of a constant. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 201\n      }\n    }, \"just. don't. do. it.\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, \"just some \\\"super exciting\\\" naming conventions that i have to talk about\"), \"when you name your variables and constants, there are some naming conventions that coders tend to use.\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 6\n      }\n    }, \"for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 14\n      }\n    }, \"variables\"), \", use camelCase\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, \"for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 14\n      }\n    }, \"constants\"), \", use UPPERCASE_WITH_UNDERSCORES\")), \"compare the two lines of code below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }, \"String justForJava = \\\"the best website to learn java from\\\";\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }\n    }, \"final String JUST_FOR_JAVA = \\\"the best website to learn java from\\\";\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, \"ok enough blabbering about naming conventions. let's get to coding\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, \"final(ly), it's recap\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }\n    }, \"awesome!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 10\n      }\n    }), \"to kick off our recap, here's a nice little \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 49\n      }\n    }, \"vocab dump\"), \" for you:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 10\n      }\n    }, \"constant\"), \" \\u2013\\xA0a special type of variable whose value cannot be changed once it has been initialized\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }\n    }, \"immutable\"), \" \\u2013\\xA0unable to be changed\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }\n    }, \"mutable\"), \" \\u2013\\xA0able to be changed\")), \"and here is the blueprint for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 35\n      }\n    }, \"creating a constant\"), \":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, \"final \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }, \"<type> <name> = <immutable_value>;\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 10\n      }\n    }), \"and last but not least, remember that if you ever attempt to change the value of a constant in your program, you will get an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 130\n      }\n    }, \"error\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Constants;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Constants.js"],"names":["React","Constants","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Constants extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tthrowback to the <b className=\"pageName\">variables page</b> when you learned how to initialize a variable and change its value. now, we are going to learn about a special type of variable called a <b>constant</b>. in java, a constant is <b>a variable whose value cannot be changed once it has been initialized</b>. a constant is an <b>immutable</b> variable, or unable to be changed. on the other hand, the variables you have been creating so far have all been <b>mutable</b>, or able to be changed. (<b className=\"note\">btw:</b> from here on out, whenever we say \"constant\", we are referencing an immutable variable, and whenever we say \"variable\", you can assume that we are referencing a mutable variable, the ones that you've been creating so far.)\n\t\t\t\t<h3>so how do you make this so-called \"special variable\"?</h3>\n\t\t\t\tin order to create a constant, we can use the <b>final</b> keyword. you can remember that the keyword is final because you are essentially initializing the constant variable to its <b>final value</b>, since it can't be changed. here is the blueprint for <b>creating a constant</b>:<br/>\n\t\t\t\t<b>final <i>&lt;type&gt; &lt;name&gt; = &lt;immutable_value&gt;;</i></b>\n\t\t\t\t<h3>but what happens if i do try to change the value of a constant?</h3>\n\t\t\t\tif you ever attempt changing the value of a constant in your program, you will get an <b>error</b>. and remember, <b>red text in your console = no no</b>. so don't change the value of a constant. <b>just. don't. do. it.</b>\n\t\t\t\t<h3>just some \"super exciting\" naming conventions that i have to talk about</h3>\n\t\t\t\twhen you name your variables and constants, there are some naming conventions that coders tend to use.\n\t\t\t\t<ul>\n\t\t\t\t\t<li>for <b>variables</b>, use camelCase</li>\n\t\t\t\t\t<li>for <b>constants</b>, use UPPERCASE_WITH_UNDERSCORES</li> \n\t\t\t\t</ul>\n\t\t\t\tcompare the two lines of code below:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString justForJava = \"the best website to learn java from\";\n\t\t\t\t</div>\n\t\t\t\t<div className=\"code\">\n\t\t\t\tfinal String JUST_FOR_JAVA = \"the best website to learn java from\";\n\t\t\t\t</div>\n\t\t\t\t<h3>ok enough blabbering about naming conventions. let's get to coding</h3>\n\n\t\t\t\t<h3>final(ly), it's recap</h3>\n\t\t\t\t<b>awesome!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\t\t\t\tto kick off our recap, here's a nice little <b>vocab dump</b> for you:\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>constant</b> – a special type of variable whose value cannot be changed once it has been initialized</li>\n\t\t\t\t\t<li><b>immutable</b> – unable to be changed</li>\n\t\t\t\t\t<li><b>mutable</b> – able to be changed</li>\n\t\t\t\t</ul>\n\t\t\t\tand here is the blueprint for <b>creating a constant</b>:<br/>\n\t\t\t\t<b>final <i>&lt;type&gt; &lt;name&gt; = &lt;immutable_value&gt;;</i></b>\n\t\t\t\t<br/><br/>\n\t\t\t\tand last but not least, remember that if you ever attempt to change the value of a constant in your program, you will get an <b>error</b>.\n\t\t\t\t<br/><br/>\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Constants;"]},"metadata":{},"sourceType":"module"}