{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Strings.js\";\nimport React from 'react';\n\nclass Strings extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 4\n      }\n    }, \"As we learned on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 26\n      }\n    }, \"variables page\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 70\n      }\n    }, \"Strings\"), \" are used to store text and are denoted using double quotation marks. Strings are different from the other variable types that we have learned about so far \\u2013 integers, doubles, characters, booleans. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 284\n      }\n    }, \"btw:\"), \" the difference you may have noticed is that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 357\n      }\n    }, \"String\"), \" has a capital first letter whereas \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 406\n      }\n    }, \"int\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 418\n      }\n    }, \"double\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 433\n      }\n    }, \"char\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 450\n      }\n    }, \"boolean\"), \" are all lowercase.) Strings are special, and that's why we've dedicated a whole page to them!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    }, \"\\\"hello world\\\"\"), \"why can Strings have a whole page dedicated to them? what makes them so special from the other variable types?\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 115\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }\n    }, \"int\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }, \"double\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 32\n      }\n    }, \"char\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 49\n      }\n    }, \"boolean\"), \" are examples of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 80\n      }\n    }, \"primitive types\"), \". a primitive type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 124\n      }\n    }, \"already defined in, or built into, java\"), \" and have one job: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 189\n      }\n    }, \"contain a simple value\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 219\n      }\n    }), \"on the other hand, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 24\n      }\n    }, \"String\"), \" is an example of an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 58\n      }\n    }, \"object\"), \", or a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 78\n      }\n    }, \"non-primitive type\"), \". for now, just know that an object is much more \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 152\n      }\n    }, \"complex\"), \" than a primitive type, with \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 195\n      }\n    }, \"a lot more functionality\"), \". because of this increased functionality, and the fact that Strings are used so often by programmers like you, the rest of this page will introduce various String-related topics.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"h e l l o w o r l d\"), \"let's redefine what a String is: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 38\n      }\n    }, \"a String is just a bunch of characters\"), \". this means that we can extract specific characters in a String.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }), \"we can access characters in a String through their \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 56\n      }\n    }, \"indexes\"), \". indexing is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 86\n      }\n    }, \"numbering system that starts at 0\"), \". not at 1. at 0. we cannot emphasize that enough. each character in a String has an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 211\n      }\n    }, \"index\"), \", or a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 230\n      }\n    }, \"number describing its position in the String\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }), \"here are the indexes of each character in the classic String \\\"hello world\\\":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"'h'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, \"'e'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"'w'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, \"'r'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, \"'d'\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }\n    }, \"10\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }\n    }), \"the index of 'h' is 0, the index of 'e' is 1, the index of the first 'l' is 2, the index of the second 'l' is 3, and so on... (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 132\n      }\n    }, \"btw:\"), \" characters have single quotes around them while Strings have double quotes around them.)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, \"h\"), \"now that you understand \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }, \"indexing\"), \" \\u2013 a fundamental concept that will become important again in later topics \\u2013 let's take a look at the blueprint explaining how to access characters in a String using their indexes (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 224\n      }\n    }, \"btw:\"), \" let's assume that we have already created a String variable called \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 320\n      }\n    }, \"str\"), \" from which we will extract a character):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }, \"str.charAt(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, \"<index>\"), \")\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 10\n      }\n    }), \"let's see \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"charAt()\"), \" in action!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 5\n      }\n    }, \"String bestWebsite = \\\"just for java\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }), \"char u = bestWebsite.charAt(1);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }), \"char t = bestWebsite.charAt(3);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }), \"char r = bestWebsite.charAt(7);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }\n    }), \"char v = bestWebsite.charAt(11);\"), \"still confused? don't worry! let's take a look at the indexes of each character in \\\"just for java\\\":\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"'j'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, \"'u'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"'s'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, \"'t'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, \"'f'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"'r'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"'j'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"'a'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, \"'v'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \"'a'\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"10\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"11\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, \"12\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }\n    }), \"the index of 'u' is 1, the index of 't' is 3, the index of 'r' is 7, and the index of 'v' is 11. by putting the proper index between the parentheses in \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 157\n      }\n    }, \"charAt()\"), \", we can extract the character in \\\"just for java\\\" at that index.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }\n    }, \"pretty cool, eh?\"), \" but things get cooler when you can extract more than just a character from a String... \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 116\n      }\n    }, \"onward!\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }\n    }, \"hello wo\"), \"what if we want to not simply get a single character from a String, but a whole portion of the String? for example, let's say we wanted to get \\\"hello\\\" from the String \\\"hello world\\\". we can do this using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 208\n      }\n    }, \"substring()\"), \", which will retrieve a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 250\n      }\n    }, \"substring\"), \", or a smaller portion of a String, based on the start and end indexes of that substring. let's hop over to the blueprint (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 389\n      }\n    }, \"btw:\"), \" let's assume that we have already created a String variable called \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 485\n      }\n    }, \"str\"), \" from which we will extract a substring):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }\n    }, \"str.substring(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 22\n      }\n    }, \"<start_index>\"), \", \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 50\n      }\n    }, \"<end_index>\"), \")\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 10\n      }\n    }), \"the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, \"start_index\"), \" is the index where the substring begins, and is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 76\n      }\n    }, \"inclusive\"), \", meaning that the character at the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 128\n      }\n    }, \"start_index\"), \" is included in the substring. the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 181\n      }\n    }, \"end_index\"), \" is the index where the substring ends, and is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 244\n      }\n    }, \"exclusive\"), \", meaning that the character at the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 296\n      }\n    }, \"end_index\"), \" is excluded from the substring. it is crucial to remember that the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 380\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 402\n      }\n    }, \"inclusive\"), \" whereas the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 431\n      }\n    }, \"end_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 451\n      }\n    }, \"exclusive\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 10\n      }\n    }), \"there is also another way to get a substring, where you only provide the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 78\n      }\n    }, \"start_index\"), \" and the substring from the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 124\n      }\n    }, \"start_index\"), \" till the end of the String is retrieved. let's hop over to the blueprint (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 217\n      }\n    }, \"btw:\"), \" let's assume that we have already created a String variable called \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 313\n      }\n    }, \"str\"), \" from which we will extract a substring):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }\n    }, \"str.substring(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 22\n      }\n    }, \"<start_index>\"), \")\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 10\n      }\n    }), \"once again, the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 43\n      }\n    }, \"inclusive\"), \". the substring includes the character at the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 105\n      }\n    }, \"start_index\"), \" and includes the rest of the String, since no \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 170\n      }\n    }, \"end_index\"), \" is given here.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 10\n      }\n    }), \"below, we have some in-depth examples illustrating both ways to get a substring:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }\n    }, \"using a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 18\n      }\n    }, \"start_index\"), \" and an \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 44\n      }\n    }, \"end_index\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }, \"using just a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 23\n      }\n    }, \"start_index\"))), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }\n    }, \"example 1: using a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 27\n      }\n    }, \"start_index\"), \" and an \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 53\n      }\n    }, \"end_index\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }\n    }), \"our goal is to try to retrieve the String \\\"hello\\\" from \\\"hello world\\\".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }), \"first, let's take a look at the indexes of each character in \\\"hello world\\\" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 81\n      }\n    }, \"btw:\"), \" the substring we want to retrieve is highlighted):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    }, \"'h'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, \"'e'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }, \"'l'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \"'l'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, \"'o'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, \"'w'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }\n    }, \"'r'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }\n    }, \"'d'\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, \"0\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }\n    }, \"1\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, \"2\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, \"3\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, \"4\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }, \"6\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, \"7\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }, \"8\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }\n    }, \"9\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }\n    }, \"10\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 5\n      }\n    }), \"in order to get the substring, we need a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 46\n      }\n    }, \"start_index\"), \" and an \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 72\n      }\n    }, \"end_index\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 91\n      }\n    }, \"hint:\"), \" what index does our substring start at? what index does our substring end at? remember that the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 217\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 239\n      }\n    }, \"included\"), \" in the substring whereas the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 284\n      }\n    }, \"end_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 304\n      }\n    }, \"excluded\"), \".)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }\n    }), \"our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 31\n      }\n    }, \"0\"), \" because our substring starts at 'h', which is at index 0. since the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 108\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 130\n      }\n    }, \"inclusive\"), \", that means that the 'h' will be included in the substring, which is exactly what we want. so our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 245\n      }\n    }, \"start_index\"), \" is 0.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 5\n      }\n    }), \"our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, \"end_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }, \"5\"), \" because our substring ends at 'o', which is at index 4. since the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 104\n      }\n    }, \"end_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 124\n      }\n    }, \"exclusive\"), \", that means that the 'o' will be excluded from the substring, which is not what we want. we want 'o' to be included, not excluded, so our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 279\n      }\n    }, \"end_index\"), \" has to be one greater than the index of the last character of our substring, so that the character after 'o' is excluded while 'o' is included. so our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 447\n      }\n    }, \"end_index\"), \" is 4 + 1, or 5.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 5\n      }\n    }, \"ready to code?\"), \" let's go!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }\n    }, \"String str = \\\"hello world\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 5\n      }\n    }), \"String hello = str.substring(0, 5);\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 5\n      }\n    }, \"example 2: using just a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 32\n      }\n    }, \"start_index\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 5\n      }\n    }), \"our goal is to try to retrieve the String \\\"world\\\" from \\\"hello world\\\".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }\n    }), \"first, let's take a look at the indexes of each character in \\\"hello world\\\" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 81\n      }\n    }, \"btw:\"), \" the substring we want to retrieve is highlighted):\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, \"'h'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, \"'e'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }, \"'l'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, \"'o'\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }, \"' '\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \"'w'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }, \"'o'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, \"'r'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, \"'l'\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }, \"'d'\"))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }\n    }, \"0\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, \"1\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }\n    }, \"2\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, \"3\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, \"4\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, \"5\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, \"6\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, \"7\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, \"8\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, \"9\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }\n    }, \"10\")))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 5\n      }\n    }), \"in order to get the substring, we need just a \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 51\n      }\n    }, \"start_index\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 72\n      }\n    }, \"hint:\"), \" what index does our substring start at? remember that the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 160\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 182\n      }\n    }, \"included\"), \" in the substring and that our substring includes the rest of the String since there is no \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 288\n      }\n    }, \"end_index\"), \".)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 5\n      }\n    }), \"our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 31\n      }\n    }, \"6\"), \" because our substring starts at 'w', which is at index 6. since the \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 108\n      }\n    }, \"start_index\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 130\n      }\n    }, \"inclusive\"), \", that means that the 'w' will be included in the substring, which is exactly what we want. so our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 245\n      }\n    }, \"start_index\"), \" is 6.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 5\n      }\n    }, \"ready to code?\"), \" let's go!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 5\n      }\n    }, \"String str = \\\"hello world\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }\n    }), \"String world = str.substring(6);\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 5\n      }\n    }), \"that was a huge info dump: you learned about indexing, accessing a character by index, and extracting a substring. but... erm... there may still be another load of information to be dumped... \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 197\n      }\n    }, \"oof. good luck.\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 5\n      }\n    }, \"0 1 2 3 4 5 6 7 8 9 10\"), \"four constructions of indexOf(); str, fromIndex, char; example code snippets of each blueprint\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 5\n      }\n    }, \"11\"), \"all Strings have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 22\n      }\n    }, \"length\"), \", which is an integer, and their length is equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 91\n      }\n    }, \"number of characters\"), \" in the String. for example, \\\"hello world\\\" has a length of 11 (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 181\n      }\n    }, \"btw:\"), \" spaces count as characters). an empty String \\u2013 \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 257\n      }\n    }, \"\\\"\\\"\"), \" \\u2013 has a length of 0. but rather than counting how many characters are in a String, we can just use the following syntax to get the length of a String:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 5\n      }\n    }, \"String funFact = \\\"did you know that squash is a sport?\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 5\n      }\n    }, \"//get the length of the fun fact using length()\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 5\n      }\n    }), \"int funFactLength = funFact.length(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 43\n      }\n    }, \"//funFactLength is initialized to 36\")), \"not too bad, right? now you know how to get the length of a String using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 78\n      }\n    }, \"length()\"), \"!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 5\n      }\n    }, \"HELLO world\"), \"next, let's learn how to make \\\"heLlO woRlD\\\" into \\\"hello world\\\" or \\\"HELLO WORLD\\\". in other words, let's learn how to make a String all \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 139\n      }\n    }, \"lowercase\"), \" or all \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 163\n      }\n    }, \"UPPERCASE\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 5\n      }\n    }), \"You can use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }\n    }, \"toLowerCase()\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 42\n      }\n    }, \"toUpperCase()\"), \" to make a String all lowercase or all UPPERCASE, respectively:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 5\n      }\n    }, \"String myStr = \\\"we LOVE Strings!\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 5\n      }\n    }), \"String myLowerCaseStr = myStr.toLowerCase(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 50\n      }\n    }, \"//make myStr all lowercase\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }\n    }), \"String myUpperCaseStr = myStr.toUpperCase(); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 50\n      }\n    }, \"//make myStr all uppercase\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 5\n      }\n    }, \"//print out the lowercase and uppercase versions of myStr\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 5\n      }\n    }), \"System.out.println(myLowerCaseStr);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 5\n      }\n    }), \"System.out.println(myUpperCaseStr);\"), \"the code above prints out the following in the console (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 61\n      }\n    }, \"psst. need a reminder\"), \" on why \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 114\n      }\n    }, \"System.out.println()\"), \" outputs something to the console? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 190\n      }\n    }, \"printing page\"), \"!):\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 5\n      }\n    }, \"we love strings!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 5\n      }\n    }), \"WE LOVE STRINGS!\"), \"awesome! (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, \"btw:\"), \" numbers and symbols, like the exclamation mark above, do not get affected by \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 121\n      }\n    }, \"toLowerCase()\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 146\n      }\n    }, \"toUpperCase()\"), \".)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 5\n      }\n    }, \"\\\"\\\"\"), \"you can also check if a String is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 39\n      }\n    }, \"empty\"), \", meaning that it doesn't contain any text (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 95\n      }\n    }, \"btw:\"), \" to make an empty string, set a String variable equal to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 180\n      }\n    }, \"\\\"\\\"\"), \"). another way you can think about an empty String is that it is a String with a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 270\n      }\n    }, \"length of 0\"), \". let's take a look at the following sample code to see how we can utilize \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 363\n      }\n    }, \"isEmpty()\"), \":\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 5\n      }\n    }, \"String feelingEmpty = \\\"\\\"; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 31\n      }\n    }, \"//create an empty String\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 5\n      }\n    }), \"System.out.println(feelingEmpty.isEmpty());\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 5\n      }\n    }), \"String wowzers = \\\"WOW! :o\\\"; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    }, \"//create a String that isn't empty\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 5\n      }\n    }), \"System.out.println(wowzers.isEmpty());\"), \"now let's see what prints in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 5\n      }\n    }, \"true\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 5\n      }\n    }), \"false\"), \"if a String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }\n    }, \"str\"), \" is empty, then \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 43\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 46\n      }\n    }, \"str\"), \".isEmpty()\"), \" will be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 79\n      }\n    }, \"true\"), \". if a String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 104\n      }\n    }, \"str\"), \" is not empty, then \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 134\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 137\n      }\n    }, \"str\"), \".isEmpty()\"), \" will be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 170\n      }\n    }, \"false\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 5\n      }\n    }, \"hello + world\"), \"we saw how the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 20\n      }\n    }, \"+\"), \" operator was used between integers and doubles in addition (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 89\n      }\n    }, \"psst. need a reminder\"), \" on how you can do addition, as well as other arithmetic operations, in java? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 226\n      }\n    }, \"arithmetics page\"), \"!), but how about the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 292\n      }\n    }, \"+\"), \" being used between \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 320\n      }\n    }, \"Strings\"), \"? when we have a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 351\n      }\n    }, \"+\"), \" between two Strings, we \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 384\n      }\n    }, \"concatenate\"), \", which is a fancy word for add, the two Strings together. what does this look like?\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 6\n      }\n    }, \"if we have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }\n    }, \"\\\"hello\\\" + \\\"world\\\"\"), \", the resulting String would be \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 77\n      }\n    }, \"\\\"helloworld\\\"\"), \". see how \\\"world\\\" was concatenated to the end of \\\"hello\\\"?\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 6\n      }\n    }, \"this is fun! let's see another example: how about we add \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 67\n      }\n    }, \"\\\"just\\\" + \\\" \\\" + \\\"for\\\" + \\\" \\\" + \\\"java\\\"\"), \". we get \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 118\n      }\n    }, \"\\\"just for java\\\"\"), \"!\")), \"woah, hold your horses! we aren't done yet! String concatenation can be more powerful that just adding Strings together. you can add \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 138\n      }\n    }, \"integers\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 155\n      }\n    }, \"doubles\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 175\n      }\n    }, \"characters\"), \" to Strings as well! exciting, right? let's see some examples:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 10\n      }\n    }, \"\\\"my favorite jeans cost $\\\" + 99.99\"), \" becomes \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 60\n      }\n    }, \"\\\"my favorite jeans cost $99.99\\\"\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 100\n      }\n    }, \"btw:\"), \" those jeans rly do be expensive $$$$ cha ching).\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 10\n      }\n    }, \"\\\"i am \\\" + 18 + \\\" years old\\\"\"), \" becomes \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 53\n      }\n    }, \"\\\"i am 18 years old\\\"\"), \". first 18 is concatenated to \\\"i am \\\" and then \\\" years old\\\" is concatenated to \\\"i am 18\\\".\")), \"getting the hang of this? let's look at some more complicated examples:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 6\n      }\n    }, \"what do you think \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 28\n      }\n    }, \"\\\"hey\\\" + 1 + 2\"), \" would be equal to? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 69\n      }\n    }, \"hint:\"), \" it isn't \\\"hey3\\\".) if you guessed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 132\n      }\n    }, \"\\\"hey12\\\"\"), \", you're correct! yay! it isn't equal to \\\"hey3\\\" because first the 1 gets concatenated to \\\"hey\\\", so now we have \\\"hey1\\\" + 2, which becomes \\\"hey12\\\".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 6\n      }\n    }, \"however, let's change things up a bit. what if we have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 65\n      }\n    }, \"\\\"hey\\\" + (1 + 2)\"), \"? what is that equal to? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 113\n      }\n    }, \"hint:\"), \" notice that 1 + 2 is in parentheses now.) if you guessed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 200\n      }\n    }, \"\\\"hey3\\\"\"), \", you're correct! yay! because 1 + 2 is in parentheses, they get summed together first before getting concatenated to \\\"hey\\\", so \\\"hey\\\" + (1 + 2) becomes \\\"hey\\\" + 3 which becomes \\\"hey3\\\".\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 6\n      }\n    }, \"ok, last example: what is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 36\n      }\n    }, \"1 + 2 + \\\"hey\\\"\"), \" equal to? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 68\n      }\n    }, \"hint:\"), \" pay attention to the order; order matters.) if you guessed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 157\n      }\n    }, \"\\\"3hey\\\"\"), \", you're correct! yay! order does matter, so the first thing we are doing here is 1 + 2. there are no Strings, so 1 + 2 is simply 3. it's normal addition. now we have 3 + \\\"hey\\\", which is equal to \\\"3hey\\\".\")), \"now that you've seen tons of examples of String concatenation, let's break it down into some simple blueprints:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 5\n      }\n    }, \"\\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }\n    }, \"<String>\"), \"\\\" + \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 34\n      }\n    }, \"<variable>\"), \" = \\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 61\n      }\n    }, \"<String><variable>\"), \"\\\"\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 103\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 8\n      }\n    }, \"<variable>\"), \" + \\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 35\n      }\n    }, \"<String>\"), \"\\\" = \\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 61\n      }\n    }, \"<variable><String>\"), \"\\\"\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 103\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 5\n      }\n    }, \"\\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }\n    }, \"<String>\"), \"\\\" + \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 34\n      }\n    }, \"<variable>\"), \" + \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 60\n      }\n    }, \"<variable>\"), \" = \\\"\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 87\n      }\n    }, \"<String><variable><variable>\"), \"\\\"\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 145\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 5\n      }\n    }), \"and finally, remember to keep in mind that operations occur from \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 70\n      }\n    }, \"left to right\"), \", and if there are \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 109\n      }\n    }, \"parentheses\"), \", then whatever is in the parentheses happens first.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 10\n      }\n    }), \"to end with, here is some code combining all the String-related topics we learned about. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 94\n      }\n    }, \"can you guess what gets printed to the console?\"), \" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 150\n      }\n    }, \"hint:\"), \" get stuck? review each of the String-related topics above to help you.)\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 5\n      }\n    }, \"String folks = \\\"that's it folks\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 5\n      }\n    }), \"String myString = folks.substring(0, 6);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 5\n      }\n    }), \"String learningLesson = \\\"Strings are special!\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 5\n      }\n    }), \"String bestLanguage = \\\"java\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 5\n      }\n    }), \"char mysteryChar = bestLanguage.charAt(learningLesson.indexOf('i'));\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 5\n      }\n    }), \"String wrap = \\\"wRaP\\\";\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 5\n      }\n    }), \"char anotherMysteryChar = learningLesson.charAt(learningLesson.length() - 1);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 5\n      }\n    }), \"System.out.println(myString + \\\" \\\" + mysteryChar + \\\" \\\" + wrap.toLowerCase() + anotherMysteryChar);\"), \"let's see if your guess on what prints to the console is correct:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 5\n      }\n    }, \"that's a wrap!\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 5\n      }\n    }, \"hello world... more like hello recap\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 5\n      }\n    }, \"YASSS!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 10\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Strings;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Strings.js"],"names":["React","Strings","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass Strings extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\tAs we learned on the <b className=\"pageName\">variables page</b>, <b>Strings</b> are used to store text and are denoted using double quotation marks. Strings are different from the other variable types that we have learned about so far – integers, doubles, characters, booleans. (<b className=\"note\">btw:</b> the difference you may have noticed is that <b>String</b> has a capital first letter whereas <b>int</b>, <b>double</b>, <b>char</b>, and <b>boolean</b> are all lowercase.) Strings are special, and that's why we've dedicated a whole page to them!\n\t\t\t\t<h3>\"hello world\"</h3>\n\t\t\t\twhy can Strings have a whole page dedicated to them? what makes them so special from the other variable types?<br/> \n\t\t\t\t<b>int</b>, <b>double</b>, <b>char</b>, and <b>boolean</b> are examples of <b>primitive types</b>. a primitive type is <b>already defined in, or built into, java</b> and have one job: <b>contain a simple value</b>.<br/> \n\t\t\t\ton the other hand, <b>String</b> is an example of an <b>object</b>, or a <b>non-primitive type</b>. for now, just know that an object is much more <b>complex</b> than a primitive type, with <b>a lot more functionality</b>. because of this increased functionality, and the fact that Strings are used so often by programmers like you, the rest of this page will introduce various String-related topics.\n\t\t\t\t<h3>h e l l o w o r l d</h3>\n\t\t\t\tlet's redefine what a String is: <b>a String is just a bunch of characters</b>. this means that we can extract specific characters in a String.\n\t\t\t\t<br/>\n\t\t\t\twe can access characters in a String through their <b>indexes</b>. indexing is a <b>numbering system that starts at 0</b>. not at 1. at 0. we cannot emphasize that enough. each character in a String has an <b>index</b>, or a <b>number describing its position in the String</b>. \n\t\t\t\t<br/>\n\t\t\t\there are the indexes of each character in the classic String \"hello world\":\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>'h'</td>\n\t\t\t\t    <td>'e'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'w'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>'r'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'d'</td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>0</td>\n\t\t\t\t    <td>1</td>\n\t\t\t\t    <td>2</td>\n\t\t\t\t    <td>3</td>\n\t\t\t\t    <td>4</td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td>6</td>\n\t\t\t\t    <td>7</td>\n\t\t\t\t    <td>8</td>\n\t\t\t\t    <td>9</td>\n\t\t\t\t    <td>10</td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br />\n\t\t\t\tthe index of 'h' is 0, the index of 'e' is 1, the index of the first 'l' is 2, the index of the second 'l' is 3, and so on... (<b className=\"note\">btw:</b> characters have single quotes around them while Strings have double quotes around them.)\n\t\t\t\t<h3>h</h3>\n\t\t\t\tnow that you understand <b>indexing</b> – a fundamental concept that will become important again in later topics – let's take a look at the blueprint explaining how to access characters in a String using their indexes (<b className=\"note\">btw:</b> let's assume that we have already created a String variable called <i>str</i> from which we will extract a character):\n\t\t\t\t<br/>\n\t\t\t\t<b>str.charAt(<i>&lt;index&gt;</i>)</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tlet's see <b>charAt()</b> in action!\n\t\t\t\t<div className=\"code\"> \n\t\t\t\tString bestWebsite = \"just for java\";\n\t\t\t\t<br/>\n\t\t\t\tchar u = bestWebsite.charAt(1);\n\t\t\t\t<br/>\n\t\t\t\tchar t = bestWebsite.charAt(3);\n\t\t\t\t<br/>\n\t\t\t\tchar r = bestWebsite.charAt(7);\n\t\t\t\t<br/>\n\t\t\t\tchar v = bestWebsite.charAt(11);\n\t\t\t\t</div>\n\t\t\t\tstill confused? don't worry! let's take a look at the indexes of each character in \"just for java\":\n\t\t\t\t<br/><br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>'j'</td>\n\t\t\t\t    <td>'u'</td>\n\t\t\t\t    <td>'s'</td>\n\t\t\t\t    <td>'t'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'f'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>'r'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'j'</td>\n\t\t\t\t    <td>'a'</td>\n\t\t\t\t    <td>'v'</td>\n\t\t\t\t    <td>'a'</td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>0</td>\n\t\t\t\t    <td>1</td>\n\t\t\t\t    <td>2</td>\n\t\t\t\t    <td>3</td>\n\t\t\t\t    <td>4</td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td>6</td>\n\t\t\t\t    <td>7</td>\n\t\t\t\t    <td>8</td>\n\t\t\t\t    <td>9</td>\n\t\t\t\t    <td>10</td>\n\t\t\t\t    <td>11</td>\n\t\t\t\t    <td>12</td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br/>\n\t\t\t\tthe index of 'u' is 1, the index of 't' is 3, the index of 'r' is 7, and the index of 'v' is 11. by putting the proper index between the parentheses in <b>charAt()</b>, we can extract the character in \"just for java\" at that index. \n\t\t\t\t<br/><br/>\n\t\t\t\t<b>pretty cool, eh?</b> but things get cooler when you can extract more than just a character from a String... <b>onward!</b>\n\t\t\t\t<h3>hello wo</h3>\n\t\t\t\twhat if we want to not simply get a single character from a String, but a whole portion of the String? for example, let's say we wanted to get \"hello\" from the String \"hello world\". we can do this using <b>substring()</b>, which will retrieve a <b>substring</b>, or a smaller portion of a String, based on the start and end indexes of that substring. let's hop over to the blueprint (<b className=\"note\">btw:</b> let's assume that we have already created a String variable called <i>str</i> from which we will extract a substring):\n\t\t\t\t<br/>\n\t\t\t\t<b>str.substring(<i>&lt;start_index&gt;</i>, <i>&lt;end_index&gt;</i>)</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tthe <i>start_index</i> is the index where the substring begins, and is <b>inclusive</b>, meaning that the character at the <i>start_index</i> is included in the substring. the <i>end_index</i> is the index where the substring ends, and is <b>exclusive</b>, meaning that the character at the <i>end_index</i> is excluded from the substring. it is crucial to remember that the <i>start_index</i> is <b>inclusive</b> whereas the <i>end_index</i> is <b>exclusive</b>.\n\t\t\t\t<br/><br/>\n\t\t\t\tthere is also another way to get a substring, where you only provide the <i>start_index</i> and the substring from the <i>start_index</i> till the end of the String is retrieved. let's hop over to the blueprint (<b className=\"note\">btw:</b> let's assume that we have already created a String variable called <i>str</i> from which we will extract a substring):\n\t\t\t\t<br/>\n\t\t\t\t<b>str.substring(<i>&lt;start_index&gt;</i>)</b>\n\t\t\t\t<br/><br/>\n\t\t\t\tonce again, the <i>start_index</i> is <b>inclusive</b>. the substring includes the character at the <i>start_index</i> and includes the rest of the String, since no <i>end_index</i> is given here.\n\t\t\t\t<br/><br/>\n\t\t\t\tbelow, we have some in-depth examples illustrating both ways to get a substring:\n\t\t\t\t<ol>\n\t\t\t\t\t<li>using a <i>start_index</i> and an <i>end_index</i></li>\n\t\t\t\t\t<li>using just a <i>start_index</i></li>\n\t\t\t\t</ol>\n\t\t\t\t<b>example 1: using a <i>start_index</i> and an <i>end_index</i></b>\n\t\t\t\t<br/>\n\t\t\t\tour goal is to try to retrieve the String \"hello\" from \"hello world\".\n\t\t\t\t<br/>\n\t\t\t\tfirst, let's take a look at the indexes of each character in \"hello world\" (<b className=\"note\">btw:</b> the substring we want to retrieve is highlighted):\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td><b>'h'</b></td>\n\t\t\t\t    <td><b>'e'</b></td>\n\t\t\t\t    <td><b>'l'</b></td>\n\t\t\t\t    <td><b>'l'</b></td>\n\t\t\t\t    <td><b>'o'</b></td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td>'w'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>'r'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'d'</td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td><b>0</b></td>\n\t\t\t\t    <td><b>1</b></td>\n\t\t\t\t    <td><b>2</b></td>\n\t\t\t\t    <td><b>3</b></td>\n\t\t\t\t    <td><b>4</b></td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td>6</td>\n\t\t\t\t    <td>7</td>\n\t\t\t\t    <td>8</td>\n\t\t\t\t    <td>9</td>\n\t\t\t\t    <td>10</td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br/>\n\t\t\t\tin order to get the substring, we need a <i>start_index</i> and an <i>end_index</i>. (<b className=\"note\">hint:</b> what index does our substring start at? what index does our substring end at? remember that the <i>start_index</i> is <b>included</b> in the substring whereas the <i>end_index</i> is <b>excluded</b>.)\n\t\t\t\t<br/>\n\t\t\t\tour <i>start_index</i> is <b>0</b> because our substring starts at 'h', which is at index 0. since the <i>start_index</i> is <b>inclusive</b>, that means that the 'h' will be included in the substring, which is exactly what we want. so our <i>start_index</i> is 0.\n\t\t\t\t<br/>\n\t\t\t\tour <i>end_index</i> is <b>5</b> because our substring ends at 'o', which is at index 4. since the <i>end_index</i> is <b>exclusive</b>, that means that the 'o' will be excluded from the substring, which is not what we want. we want 'o' to be included, not excluded, so our <i>end_index</i> has to be one greater than the index of the last character of our substring, so that the character after 'o' is excluded while 'o' is included. so our <i>end_index</i> is 4 + 1, or 5.\n\t\t\t\t<br/>\n\t\t\t\t<b>ready to code?</b> let's go!\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString str = \"hello world\";\n\t\t\t\t<br/>\n\t\t\t\tString hello = str.substring(0, 5);\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<b>example 2: using just a <i>start_index</i></b>\n\t\t\t\t<br/>\n\t\t\t\tour goal is to try to retrieve the String \"world\" from \"hello world\". \n\t\t\t\t<br/>\n\t\t\t\tfirst, let's take a look at the indexes of each character in \"hello world\" (<b className=\"note\">btw:</b> the substring we want to retrieve is highlighted):\n\t\t\t\t<br/>\n\t\t\t\t<br/>\n\t\t\t\t<table>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>'h'</td>\n\t\t\t\t    <td>'e'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'l'</td>\n\t\t\t\t    <td>'o'</td>\n\t\t\t\t    <td>' '</td>\n\t\t\t\t    <td><b>'w'</b></td>\n\t\t\t\t    <td><b>'o'</b></td>\n\t\t\t\t    <td><b>'r'</b></td>\n\t\t\t\t    <td><b>'l'</b></td>\n\t\t\t\t    <td><b>'d'</b></td>\n\t\t\t\t  </tr>\n\t\t\t\t  <tr>\n\t\t\t\t    <td>0</td>\n\t\t\t\t    <td>1</td>\n\t\t\t\t    <td>2</td>\n\t\t\t\t    <td>3</td>\n\t\t\t\t    <td>4</td>\n\t\t\t\t    <td>5</td>\n\t\t\t\t    <td><b>6</b></td>\n\t\t\t\t    <td><b>7</b></td>\n\t\t\t\t    <td><b>8</b></td>\n\t\t\t\t    <td><b>9</b></td>\n\t\t\t\t    <td><b>10</b></td>\n\t\t\t\t  </tr>\n\t\t\t\t</table>\n\t\t\t\t<br/>\n\t\t\t\tin order to get the substring, we need just a <i>start_index</i>. (<b className=\"note\">hint:</b> what index does our substring start at? remember that the <i>start_index</i> is <b>included</b> in the substring and that our substring includes the rest of the String since there is no <i>end_index</i>.)\n\t\t\t\t<br/>\n\t\t\t\tour <i>start_index</i> is <b>6</b> because our substring starts at 'w', which is at index 6. since the <i>start_index</i> is <b>inclusive</b>, that means that the 'w' will be included in the substring, which is exactly what we want. so our <i>start_index</i> is 6.\n\t\t\t\t<br/>\n\t\t\t\t<b>ready to code?</b> let's go!\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString str = \"hello world\";\n\t\t\t\t<br/>\n\t\t\t\tString world = str.substring(6);\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\tthat was a huge info dump: you learned about indexing, accessing a character by index, and extracting a substring. but... erm... there may still be another load of information to be dumped... <b>oof. good luck.</b>\n\t\t\t\t<h3>0 1 2 3 4 5 6 7 8 9 10</h3>\n\t\t\t\tfour constructions of indexOf(); str, fromIndex, char; example code snippets of each blueprint\n\t\t\t\t<h3>11</h3>\n\t\t\t\tall Strings have <b>length</b>, which is an integer, and their length is equal to the <b>number of characters</b> in the String. for example, \"hello world\" has a length of 11 (<b className=\"note\">btw:</b> spaces count as characters). an empty String – <b>\"\"</b> – has a length of 0. but rather than counting how many characters are in a String, we can just use the following syntax to get the length of a String:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString funFact = \"did you know that squash is a sport?\";\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//get the length of the fun fact using length()</div>\n\t\t\t\t<br/>\n\t\t\t\tint funFactLength = funFact.length(); <div className=\"comment\">//funFactLength is initialized to 36</div>\n\t\t\t\t</div>\n\t\t\t\tnot too bad, right? now you know how to get the length of a String using <b>length()</b>!\n\t\t\t\t<h3>HELLO world</h3>\n\t\t\t\tnext, let's learn how to make \"heLlO woRlD\" into \"hello world\" or \"HELLO WORLD\". in other words, let's learn how to make a String all <b>lowercase</b> or all <b>UPPERCASE</b>.\n\t\t\t\t<br/>\n\t\t\t\tYou can use <b>toLowerCase()</b> and <b>toUpperCase()</b> to make a String all lowercase or all UPPERCASE, respectively:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString myStr = \"we LOVE Strings!\";\n\t\t\t\t<br/>\n\t\t\t\tString myLowerCaseStr = myStr.toLowerCase(); <div className=\"comment\">//make myStr all lowercase</div>\n\t\t\t\t<br/>\n\t\t\t\tString myUpperCaseStr = myStr.toUpperCase(); <div className=\"comment\">//make myStr all uppercase</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"comment\">//print out the lowercase and uppercase versions of myStr</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(myLowerCaseStr);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(myUpperCaseStr);\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console (<b className=\"note\">psst. need a reminder</b> on why <b>System.out.println()</b> outputs something to the console? check out the <b className=\"pageName\">printing page</b>!):\n\t\t\t\t<div className=\"code\">\n\t\t\t\twe love strings!\n\t\t\t\t<br/>\n\t\t\t\tWE LOVE STRINGS!\n\t\t\t\t</div>\n\t\t\t\tawesome! (<b className=\"note\">btw:</b> numbers and symbols, like the exclamation mark above, do not get affected by <b>toLowerCase()</b> and <b>toUpperCase()</b>.)\n\t\t\t\t<h3>\"\"</h3>\n\t\t\t\tyou can also check if a String is <b>empty</b>, meaning that it doesn't contain any text (<b className=\"note\">btw:</b> to make an empty string, set a String variable equal to <b>\"\"</b>). another way you can think about an empty String is that it is a String with a <b>length of 0</b>. let's take a look at the following sample code to see how we can utilize <b>isEmpty()</b>:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString feelingEmpty = \"\"; <div className=\"comment\">//create an empty String</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(feelingEmpty.isEmpty());\n\t\t\t\t<br/>\n\t\t\t\tString wowzers = \"WOW! :o\"; <div className=\"comment\">//create a String that isn't empty</div>\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(wowzers.isEmpty());\n\t\t\t\t</div>\n\t\t\t\tnow let's see what prints in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\ttrue\n\t\t\t\t<br/>\n\t\t\t\tfalse\n\t\t\t\t</div>\n\t\t\t\tif a String <i>str</i> is empty, then <b><i>str</i>.isEmpty()</b> will be <b>true</b>. if a String <i>str</i> is not empty, then <b><i>str</i>.isEmpty()</b> will be <b>false</b>.\n\t\t\t\t<h3>hello + world</h3>\n\t\t\t\twe saw how the <b>+</b> operator was used between integers and doubles in addition (<b className=\"note\">psst. need a reminder</b> on how you can do addition, as well as other arithmetic operations, in java? check out the <b className=\"pageName\">arithmetics page</b>!), but how about the <b>+</b> being used between <b>Strings</b>? when we have a <b>+</b> between two Strings, we <b>concatenate</b>, which is a fancy word for add, the two Strings together. what does this look like? \n\t\t\t\t<ul>\n\t\t\t\t\t<li>if we have <b>\"hello\" + \"world\"</b>, the resulting String would be <b>\"helloworld\"</b>. see how \"world\" was concatenated to the end of \"hello\"?</li>\n\t\t\t\t\t<li>this is fun! let's see another example: how about we add <b>\"just\" + \" \" + \"for\" + \" \" + \"java\"</b>. we get <b>\"just for java\"</b>!</li>\n\t\t\t\t</ul>\n\t\t\t\twoah, hold your horses! we aren't done yet! String concatenation can be more powerful that just adding Strings together. you can add <b>integers</b>, <b>doubles</b>, and <b>characters</b> to Strings as well! exciting, right? let's see some examples: \n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>\"my favorite jeans cost $\" + 99.99</b> becomes <b>\"my favorite jeans cost $99.99\"</b> (<b className=\"note\">btw:</b> those jeans rly do be expensive $$$$ cha ching).</li>\n\t\t\t\t\t<li><b>\"i am \" + 18 + \" years old\"</b> becomes <b>\"i am 18 years old\"</b>. first 18 is concatenated to \"i am \" and then \" years old\" is concatenated to \"i am 18\".</li>\n\t\t\t\t</ul>\n\t\t\t\tgetting the hang of this? let's look at some more complicated examples: \n\t\t\t\t<ul>\n\t\t\t\t\t<li>what do you think <b>\"hey\" + 1 + 2</b> would be equal to? (<b className=\"note\">hint:</b> it isn't \"hey3\".) if you guessed <b>\"hey12\"</b>, you're correct! yay! it isn't equal to \"hey3\" because first the 1 gets concatenated to \"hey\", so now we have \"hey1\" + 2, which becomes \"hey12\".</li>\n\t\t\t\t\t<li>however, let's change things up a bit. what if we have <b>\"hey\" + (1 + 2)</b>? what is that equal to? (<b className=\"note\">hint:</b> notice that 1 + 2 is in parentheses now.) if you guessed <b>\"hey3\"</b>, you're correct! yay! because 1 + 2 is in parentheses, they get summed together first before getting concatenated to \"hey\", so \"hey\" + (1 + 2) becomes \"hey\" + 3 which becomes \"hey3\".</li>\n\t\t\t\t\t<li>ok, last example: what is <b>1 + 2 + \"hey\"</b> equal to? (<b className=\"note\">hint:</b> pay attention to the order; order matters.) if you guessed <b>\"3hey\"</b>, you're correct! yay! order does matter, so the first thing we are doing here is 1 + 2. there are no Strings, so 1 + 2 is simply 3. it's normal addition. now we have 3 + \"hey\", which is equal to \"3hey\".</li>\n\t\t\t\t</ul>\n\t\t\t\tnow that you've seen tons of examples of String concatenation, let's break it down into some simple blueprints:\n\t\t\t\t<br/>\n\t\t\t\t<b>\"<i>&lt;String&gt;</i>\" + <i>&lt;variable&gt;</i> = \"<i>&lt;String&gt;&lt;variable&gt;</i>\"</b><br/>\n\t\t\t\t<b><i>&lt;variable&gt;</i> + \"<i>&lt;String&gt;</i>\" = \"<i>&lt;variable&gt;&lt;String&gt;</i>\"</b><br/>\n\t\t\t\t<b>\"<i>&lt;String&gt;</i>\" + <i>&lt;variable&gt;</i> + <i>&lt;variable&gt;</i> = \"<i>&lt;String&gt;&lt;variable&gt;&lt;variable&gt;</i>\"</b><br/>\n\t\t\t\t<br/>\n\t\t\t\tand finally, remember to keep in mind that operations occur from <b>left to right</b>, and if there are <b>parentheses</b>, then whatever is in the parentheses happens first. \n\t\t\t\t<br/><br/>\n\t\t\t\tto end with, here is some code combining all the String-related topics we learned about. <b>can you guess what gets printed to the console?</b> (<b className=\"note\">hint:</b> get stuck? review each of the String-related topics above to help you.)\n\t\t\t\t<div className=\"code\">\n\t\t\t\tString folks = \"that's it folks\";\n\t\t\t\t<br/>\n\t\t\t\tString myString = folks.substring(0, 6);\n\t\t\t\t<br/>\n\t\t\t\tString learningLesson = \"Strings are special!\";\n\t\t\t\t<br/>\n\t\t\t\tString bestLanguage = \"java\";\n\t\t\t\t<br/>\n\t\t\t\tchar mysteryChar = bestLanguage.charAt(learningLesson.indexOf('i'));\n\t\t\t\t<br/>\n\t\t\t\tString wrap = \"wRaP\";\n\t\t\t\t<br/>\n\t\t\t\tchar anotherMysteryChar = learningLesson.charAt(learningLesson.length() - 1);\n\t\t\t\t<br/>\n\t\t\t\tSystem.out.println(myString + \" \" + mysteryChar + \" \" + wrap.toLowerCase() + anotherMysteryChar);\n\t\t\t\t</div>\n\t\t\t\tlet's see if your guess on what prints to the console is correct:\n\t\t\t\t<div className=\"code\">\n\t\t\t\tthat's a wrap!\n\t\t\t\t</div>\n\t\t\t\t<h3>hello world... more like hello recap</h3>\n\t\t\t\t<b>YASSS!</b> you made it to recap!\n\t\t\t\t<br/><br/>\n\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Strings;"]},"metadata":{},"sourceType":"module"}