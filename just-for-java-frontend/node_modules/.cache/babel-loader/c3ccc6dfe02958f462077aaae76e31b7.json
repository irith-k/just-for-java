{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/WhileLoop.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\n\nclass WhileLoop extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, \"while loop\"), \" is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 30\n      }\n    }, \"type of loop\"), \" that is used to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 66\n      }\n    }, \"perform a block of code \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 93\n      }\n    }, \"while\"), \" a specific condition is met\"), \". once it is not met, or is false, then the code block will stop being run and the code will move onto the next block of code outside of the while loop.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you make a while loop?\"), \"here is the blue print for a while loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, \"while(<\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 18\n      }\n    }, \"condition\"), \">){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 5\n      }\n    }, \"*code*\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 18\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, \"makes sense, but what's with the condition?\"), \"good question! just like the condition that we use in our if statements, this condition should have a value of either \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 123\n      }\n    }, \"true\"), \" or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 138\n      }\n    }, \"false\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 6\n      }\n    }, \"psst.\"), \" need a reminder on the condition from if statements? check out our \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 103\n      }\n    }, \"if statement page\"), \"!) if the condition is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }\n    }, \"true\"), \", the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 42\n      }\n    }, \"code block will be run\"), \". however, if the condition is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 102\n      }\n    }, \"false\"), \", the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 120\n      }\n    }, \"code block won't be run\"), \". unlike if statements, however, while loops will \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 200\n      }\n    }, \"continuously loop\"), \" through the code block \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 248\n      }\n    }, \"until the condition becomes false\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, \"hmm... ok but can i get an example?\"), \"yea, definitely! let's say you want to print out the numbers 1-5. here's how we can do that using a while loop:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, \"int count = 1; \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, \"//this is the variable we will use to keep track of our #\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 109\n      }\n    }), \"while(count \\u2264 5){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 6\n      }\n    }, \"System.out.print(count + \\\" \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 39\n      }\n    }), \"count ++;\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 19\n      }\n    }), \"}\"), \"our program above will print the following into the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"1 2 3 4 5\"), \"ok, that might seem confusing now, but let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 50\n      }\n    }, \"break down our code\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 77\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 82\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }, \"first\"), \", we start out by making an integer \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 53\n      }\n    }, \"count\"), \", which stores the number we are currently printing. pretty straightforward...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 143\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 148\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"next\"), \", we create a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 30\n      }\n    }, \"while loop\"), \" with the condition of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 70\n      }\n    }, \"count \\u2264 5\"), \". this means that, as long as our variable \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 132\n      }\n    }, \"count\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 148\n      }\n    }, \"less than or equal to 5\"), \", the code within the curly braces \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 213\n      }\n    }, \"will run\"), \". this is exactly what we want, as we wanted to print out every number starting from 1 that is less than 5! great!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 117\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 122\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }\n    }, \"lastly\"), \", inside our while loop, we want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 54\n      }\n    }, \"print out the number we are currently on\"), \", and then \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 112\n      }\n    }, \"increase \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 124\n      }\n    }, \"count\"), \" by 1\"), \". great! now time for some practice!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 181\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, \"hey...wait a minute, that  example looks familiar\"), \"omg! you caught us! this example is just like the example in for loops (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 77\n      }\n    }, \"psst. need a reminder\"), \" on what we're referring to? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 165\n      }\n    }, \"for loops page\"), \"!) as you notice from the example above, you can use while loops to do \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 73\n      }\n    }, \"similar things as what for loops do\"), \". thinking back to for loops, remember there were \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 165\n      }\n    }, \"three components\"), \" needed. so where are those components while loops? well, let's \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 252\n      }\n    }, \"break this down:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 275\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }\n    }, \"initialize\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, \"in while loops, we initialize when we create the varibale and define it's value\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, \"in this example, we initialized our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 47\n      }\n    }, \"count\"), \" varibale right before the loop with the statement \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 110\n      }\n    }, \"int count = 1;\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 10\n      }\n    }, \"condition\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, \"in while loops, the condition is what we put in the parentheses of the while loop\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, \"in the example above, our condition was \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 51\n      }\n    }, \"count \\u2264 5\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 10\n      }\n    }, \"iterate\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, \"in while loops, we iterate within the while loop\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, \"in the example above, we iterate our \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 48\n      }\n    }, \"count\"), \" variable within the while loop with the statement \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 111\n      }\n    }, \"count ++;\")))), \"but, unlike for loops, we can also use while loops when we don't know how many times we want to iterate through the code. in other words, we don't know how many times it will take until the condition is false.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }, \"let's take a look at an example\"), \"let's say we want to make a program that prompts the user to answer the question \\\"do you like chocolate?\\\" normally, the user will either type in yes or no, but what if the user types in \\\"idk\\\" or \\\"sometimes\\\" (cuz i mean sometimes chocolate is good, and sometimes it's not so good u kno?). we can use a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 18\n      }\n    }, \"while loop\"), \" to check if the user's answer is valid. let's break down the steps we need to go through...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 127\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 132\n      }\n    }), \"to do this, we will first need to get the user input, prompting the user to answer the question \\\"do you like chocolate?\\\" (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 127\n      }\n    }, \"psst. need a reminder\"), \" on how to get user input? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 213\n      }\n    }, \"user input page\"), \"!)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 258\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 263\n      }\n    }), \"next, we will need to make a while loop to check if the user input isn't valid (meaning if they didn't write \\\"yes\\\" and they didn't write \\\"no\\\"). if they didn't have the correct answer, we will need ask the user the question again.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 234\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 239\n      }\n    }), \"ok, got it? let's take a look at all of that in code!\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 6\n      }\n    }, \"//let's assume that we've already imported the Scanner\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 91\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 96\n      }\n    }), \"Scanner in = new Scanner(System.in);\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 42\n      }\n    }), \"System.out.print(\\\"do you like chocolate? \\\"); \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 51\n      }\n    }, \"//this is asking the user our question\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 120\n      }\n    }), \"String answer = in.nextLine();\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 36\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 6\n      }\n    }, \"//for Strings, we need to use .equals() to check for equality\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 98\n      }\n    }), \"while(!answer.equals(\\\"yes\\\") && !answer.equals(\\\"no\\\")){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 64\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, \"System.out.println(\\\"you didn't enter yes or no.\\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 60\n      }\n    }), \"System.out.print(\\\"do you like chocolate? \\\");\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 51\n      }\n    }), \"answer = in.nextLine();\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 34\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }\n    }), \"in.close();\"), \"great! nice job!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 5\n      }\n    }, \"while(recap == true){\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }\n    }, \"!!\"), \" yess recap time.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 31\n      }\n    }), \"so, to review, a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 22\n      }\n    }, \"while loop\"), \" loops through a block of code as long as a specific condition is true, and is written:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 126\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }, \"while(<\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 18\n      }\n    }, \"condition\"), \">){\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 5\n      }\n    }, \"*code*\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 18\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 20\n      }\n    }), \"and that's pretty much it!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"problem\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, \"even:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 35\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 40\n      }\n    }), \"your \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, \"goal\"), \" is to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 33\n      }\n    }, \"while loops\"), \" to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 55\n      }\n    }, \"print out all even numbers between 1 and 20\"), \". this will require six steps\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 134\n      }\n    }), /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, \"first, you will need to create a varibale to store the value that you are currently on\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, \"next, you will need to create a while loop with a condition to make sure that you are looking through the specific range of numbers of 1-20\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }\n    }, \"after that, you will need to print out the number\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, \"and finally, you will want to increment your variable to move onto the next even number\")), \"you got this!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 24\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hints\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, \"hint: \"), \"for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 41\n      }\n    }, \"step 2\"), \", we only want to look at 1-20. assuming our lower bound is taken care of by what we define our variable to be, what condition would we want to make sure that our variable doesn't go beyond 20? maybe something that checks if our variable is less than or equal to 20 (\\u2264 20)!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 330\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 335\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 7\n      }\n    }, \"hint: \"), \"for \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 41\n      }\n    }, \"step 4\"), \", if we want to only check even numbers, values that come in increments of two, how should we increment our variable to make sure it is only the even numbers? by 2 of course! reminder that a shortcut to use is +=.\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/while-loop-even?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"solution\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }\n    }, \"our solution:\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 42\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 47\n      }\n    }), \"below is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 14\n      }\n    }, \"our solution\"), \" for the problem above. the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 61\n      }\n    }, \"comments\"), \" help to explain how to code each step. hopefully your code looks somewhat similar \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 159\n      }\n    }, \":)\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 169\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 174\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"repl\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(\"iframe\", {\n      height: \"400px\",\n      width: \"100%\",\n      src: \"https://repl.it/@justforjava/while-loop-even-solution?lite=true\",\n      scrolling: \"no\",\n      frameborder: \"no\",\n      allowtransparency: \"true\",\n      allowfullscreen: \"true\",\n      sandbox: \"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 16\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 60\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 135\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default WhileLoop;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/WhileLoop.js"],"names":["React","ProgressUpdater","WhileLoop","Component","constructor","props","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\n\nclass WhileLoop extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater \n\t              page={this.props.page} \n\t              user={this.props.user}\n\t            />\n\t\t\t\ta <b>while loop</b> is a <b>type of loop</b> that is used to <b>perform a block of code <i>while</i> a specific condition is met</b>. once it is not met, or is false, then the code block will stop being run and the code will move onto the next block of code outside of the while loop.\n\t\t\t\t<h3>wait, so how do you make a while loop?</h3>\n\t\t\t\there is the blue print for a while loop:<br/>\n\t\t\t\t<b>while(&lt;<i>condition</i>&gt;)&#123;<br/>\n\t\t\t\t<p>*code*</p><br/>\n\t\t\t\t&#125;</b>\n\t\t\t\t<h3>makes sense, but what's with the condition?</h3>\n\t\t\t\tgood question! just like the condition that we use in our if statements, this condition should have a value of either <b>true</b> or <b>false</b>. \n\t\t\t\t(<b className=\"note\">psst.</b> need a reminder on the condition from if statements? check out our <b className=\"pageName\">if statement page</b>!) \n\t\t\t\tif the condition is <b>true</b>, the <b>code block will be run</b>. however, if the condition is <b>false</b>, the <b>code block won't be run</b>. unlike if statements, however, while loops will <b>continuously loop</b> through the code block <b>until the condition becomes false</b>.\n\t\t\t\t<h3>hmm... ok but can i get an example?</h3>\n\t\t\t\tyea, definitely! let's say you want to print out the numbers 1-5. here's how we can do that using a while loop:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tint count = 1; <div className=\"comment\">//this is the variable we will use to keep track of our #</div><br/>\n\t\t\t\t\twhile(count &le; 5)&#123;<br/>\n\t\t\t\t\t<p>System.out.print(count + \" \");<br/>\n\t\t\t\t\tcount ++;</p><br/>\n\t\t\t\t\t&#125;\n\t\t\t\t</div>\n\t\t\t\tour program above will print the following into the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t1 2 3 4 5\n\t\t\t\t</div>\n\t\t\t\tok, that might seem confusing now, but let's <b>break down our code</b>.<br/><br/>\n\t\t\t\t<b>first</b>, we start out by making an integer <i>count</i>, which stores the number we are currently printing. pretty straightforward...<br/><br/>\n\t\t\t\t<b>next</b>, we create a <b>while loop</b> with the condition of <b>count &le; 5</b>. this means that, as long as our variable <i>count</i> is <b>less than or equal to 5</b>, the code within the curly braces <b>will run</b>.\n\t\t\t\tthis is exactly what we want, as we wanted to print out every number starting from 1 that is less than 5! great!<br/><br/>\n\t\t\t\t<b>lastly</b>, inside our while loop, we want to <b>print out the number we are currently on</b>, and then <b>increase <i>count</i> by 1</b>. great! now time for some practice!<br/>\n\t\t\t\t<h3>hey...wait a minute, that  example looks familiar</h3>\n\t\t\t\tomg! you caught us! this example is just like the example in for loops (<b className=\"note\">psst. need a reminder</b> on what we're referring to? check out the <b className=\"pageName\">for loops page</b>!) \n\t\t\t\tas you notice from the example above, you can use while loops to do <b>similar things as what for loops do</b>. thinking back to for loops, remember there were <b>three components</b> needed. so where are those components while loops? well, let's <b>break this down:</b><br/>\n\t\t\t\t<ul>\n\t\t\t\t\t<li><b>initialize</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>in while loops, we initialize when we create the varibale and define it's value</li>\n\t\t\t\t\t\t<li>in this example, we initialized our <i>count</i> varibale right before the loop with the statement <b>int count = 1;</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>condition</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>in while loops, the condition is what we put in the parentheses of the while loop</li>\n\t\t\t\t\t\t<li>in the example above, our condition was <b>count &le; 5</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<li><b>iterate</b></li>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>in while loops, we iterate within the while loop</li>\n\t\t\t\t\t\t<li>in the example above, we iterate our <i>count</i> variable within the while loop with the statement <b>count ++;</b></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</ul>\n\t\t\t\tbut, unlike for loops, we can also use while loops when we don't know how many times we want to iterate through the code. in other words, we don't know how many times it will take until the condition is false.\n\t\t\t\t<h3>let's take a look at an example</h3>\n\t\t\t\tlet's say we want to make a program that prompts the user to answer the question \"do you like chocolate?\" normally, the user will either type in yes or no, but what if the user types in \"idk\" or \"sometimes\" (cuz i mean sometimes chocolate is good, and sometimes it's not so good u kno?).\n\t\t\t\twe can use a <b>while loop</b> to check if the user's answer is valid. let's break down the steps we need to go through...<br/><br/>\n\t\t\t\tto do this, we will first need to get the user input, prompting the user to answer the question \"do you like chocolate?\" (<b className=\"note\">psst. need a reminder</b> on how to get user input? check out the <b className=\"pageName\">user input page</b>!)<br/><br/>\n\t\t\t\tnext, we will need to make a while loop to check if the user input isn't valid (meaning if they didn't write \"yes\" and they didn't write \"no\"). if they didn't have the correct answer, we will need ask the user the question again.<br/><br/>\n\t\t\t\tok, got it? let's take a look at all of that in code!\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t<div className=\"comment\">//let's assume that we've already imported the Scanner</div><br/><br/>\n\t\t\t\t\tScanner in = new Scanner(System.in);<br/>\n\t\t\t\t\tSystem.out.print(\"do you like chocolate? \"); <div className=\"comment\">//this is asking the user our question</div><br/>\n\t\t\t\t\tString answer = in.nextLine();<br/>\n\t\t\t\t\t<div className=\"comment\">//for Strings, we need to use .equals() to check for equality</div><br/>\n\t\t\t\t\twhile(!answer.equals(\"yes\") && !answer.equals(\"no\"))&#123;<br/>\n\t\t\t\t\t\t<p>System.out.println(\"you didn't enter yes or no.\");<br/>\n\t\t\t\t\t\tSystem.out.print(\"do you like chocolate? \");<br/>\n\t\t\t\t\t\tanswer = in.nextLine();</p><br/>\n\t\t\t\t\t&#125;<br/>\n\t\t\t\t\tin.close();\n\t\t\t\t</div>\n\t\t\t\tgreat! nice job!\n\t\t\t\t<h3>while(recap == true)&#123;</h3>\n\t\t\t\t<b>!!</b> yess recap time.<br/>\n\t\t\t\tso, to review, a <b>while loop</b> loops through a block of code as long as a specific condition is true, and is written:<br/>\n\t\t\t\t<b>while(&lt;<i>condition</i>&gt;)&#123;<br/>\n\t\t\t\t<p>*code*</p><br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tand that's pretty much it!\n\t\t\t\t<h3>pit stop</h3>\n\t\t\t\t<div className=\"problem\">\n\t\t\t\t\t<b className=\"note\">even:</b><br/><br/>\n\t\t\t\t\tyour <b>goal</b> is to use <b>while loops</b> to <b>print out all even numbers between 1 and 20</b>. this will require six steps<br/>\n\t\t\t\t\t<ol>\n\t\t\t\t\t\t<li>first, you will need to create a varibale to store the value that you are currently on</li>\n\t\t\t\t\t\t<li>next, you will need to create a while loop with a condition to make sure that you are looking through the specific range of numbers of 1-20</li>\n\t\t\t\t\t\t<li>after that, you will need to print out the number</li>\n\t\t\t\t\t\t<li>and finally, you will want to increment your variable to move onto the next even number</li>\n\t\t\t\t\t</ol>\n\t\t\t\t\tyou got this!<br/><br/>\n\t\t\t\t\t<div className=\"hints\">\n\t\t\t\t\t\t<b className=\"note\">hint: </b>for <b>step 2</b>, we only want to look at 1-20. assuming our lower bound is taken care of by what we define our variable to be, what condition would we want to make sure that our variable doesn't go beyond 20? maybe something that checks if our variable is less than or equal to 20 (&le; 20)!<br/><br/>\n\t\t\t\t\t\t<b className=\"note\">hint: </b>for <b>step 4</b>, if we want to only check even numbers, values that come in increments of two, how should we increment our variable to make sure it is only the even numbers? by 2 of course! reminder that a shortcut to use is +=.\n\t\t\t\t\t</div>\n\t\t\t\t\t<br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/while-loop-even?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<div className=\"solution\">\n\t\t\t\t<b className=\"note\">our solution:</b><br/><br/>\n\t\t\t\tbelow is <b>our solution</b> for the problem above. the <b>comments</b> help to explain how to code each step. hopefully your code looks somewhat similar <b>:)</b> <br/><br/>\n\t\t\t\t\t<div className=\"repl\">\n\t\t\t\t\t\t<iframe height=\"400px\" width=\"100%\" src=\"https://repl.it/@justforjava/while-loop-even-solution?lite=true\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" sandbox=\"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\"></iframe>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<br/>\n\t\t\t\t<ProgressUpdater \n\t              page={this.props.page} \n\t              user={this.props.user}\n\t            />\n\t\t\t\t...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default WhileLoop;"]},"metadata":{},"sourceType":"module"}