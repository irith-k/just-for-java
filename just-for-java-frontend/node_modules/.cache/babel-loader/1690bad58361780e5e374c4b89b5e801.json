{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js\";\nimport React from 'react';\n\nclass ForLoop extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, \"loop\"), \" is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 22\n      }\n    }, \"a repeating block of code\"), \". here, we will focus on \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 79\n      }\n    }, \"for loops\"), \", a type of loop that iterates through your block of code a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 155\n      }\n    }, \"specific number of times\"), \".\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"wait, so how do you create a for loop?\"), \"here is the blueprint for creating a for loop:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 51\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }\n    }, \"for(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"initialize\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 32\n      }\n    }, \"condition\"), \" ; \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 51\n      }\n    }, \"iterate\"), \"){ \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"*code*\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 19\n      }\n    }), \"}\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }\n    }), \"as you can see from the blueprint above, there are three main components to creating a for loop:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 6\n      }\n    }, \"initialize\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 6\n      }\n    }, \"condition\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 6\n      }\n    }, \"iterate\")), \"let's walk through each of these components...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 5\n      }\n    }, \"what in the world is initialize?\"), \"good question! initializing is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 40\n      }\n    }, \"first component\"), \" of your for loop. it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 93\n      }\n    }, \"create the variable\"), \" that you will use to go through your for loop. for initalizing, we always use an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 39\n      }\n    }, \"int variable\"), \", often denoted by the letter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 88\n      }\n    }, \"i\"), \". in the initialize section, we create i and set it equal to the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 68\n      }\n    }, \"start value\"), \". for example, if you want your for loop to print the numbers 1-5, you would \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 163\n      }\n    }, \"set i equal to 1\"), \", because that's the number you want to print first. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 6\n      }\n    }, \"psst. need a reminder\"), \" on how to create a variable? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 95\n      }\n    }, \"variables page\"), \"!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, \"and what's condition?\"), \"the condition is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 26\n      }\n    }, \"second component\"), \". it works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 63\n      }\n    }, \"determine when the loop should stop\"), \". you can denote this using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 133\n      }\n    }, \"<\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 146\n      }\n    }, \"\\u2264\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 159\n      }\n    }, \">\"), \", or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 175\n      }\n    }, \"\\u2265\"), \" depending on what you want your loop to do. going back to our example of printing out the numbers 1-5, we can make our condition in two ways: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 103\n      }\n    }, \"i < 6\"), \" or \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 122\n      }\n    }, \"i \\u2264 5\"), \". which one you choose is up to you.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, \"hey, wait! you still have to explain iterate!\"), \"don't worry, we didn't forget :). the iterate portion is our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 66\n      }\n    }, \"last component\"), \" and works to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 101\n      }\n    }, \"increment your integer variable\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 141\n      }\n    }, \"either adding one or subtracting one\"), \" depending on the direction you would like your loop to go in. if you want your integer to be incremented by +1 each time it loops, you type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 83\n      }\n    }, \"i++\"), \". if you want your integer to be incremented by -1 each time it loops, you type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 173\n      }\n    }, \"i--\"), \". going back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 158\n      }\n    }, \"i++\"), \".\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 169\n      }\n    }), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }\n    }, \"btw:\"), \" don't forget the semicolons between each of the three components)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }\n    }), \"here is our example fully coded out:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }\n    }, \"for(int i = 1; i \\u2264 5; i++) { \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 43\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, \"System.out.print(i + \\\" \\\")\"), \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 40\n      }\n    }, \"//the \\\" \\\" is to add a space between the numbers when printing\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 134\n      }\n    }), \"}\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    })), \"the code above prints out the following in the console:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, \"1 2 3 4 5\"), \"yay! now you know all about for loops!\");\n  }\n\n}\n\nexport default ForLoop;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/ForLoop.js"],"names":["React","ForLoop","Component","constructor","props","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass ForLoop extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\ta <b>loop</b> is <b>a repeating block of code</b>. here, we will focus on <b>for loops</b>, a type of loop that iterates through your block of code a <b>specific number of times</b>.\n\t\t\t\t<h3>wait, so how do you create a for loop?</h3>\n\t\t\t\there is the blueprint for creating a for loop:<br/>\n\t\t\t\t<b>for(<i>initialize</i> ; <i>condition</i> ; <i>iterate</i>)&#123; <br/>\n\t\t\t\t<p>*code*</p> <br/>\n\t\t\t\t&#125;</b><br/><br/>\n\t\t\t\tas you can see from the blueprint above, there are three main components to creating a for loop: \n\t\t\t\t<ul>\n\t\t\t\t\t<li>initialize</li>\n\t\t\t\t\t<li>condition</li>\n\t\t\t\t\t<li>iterate</li>\n\t\t\t\t</ul>\n\t\t\t\tlet's walk through each of these components...\n\t\t\t\t<br/>\n\t\t\t\t<h3>what in the world is initialize?</h3>\n\t\t\t\tgood question! initializing is the <b>first component</b> of your for loop. it works to <b>create the variable</b> that you will use to go through your for loop.\n\t\t\t\tfor initalizing, we always use an <b>int variable</b>, often denoted by the letter <b>i</b>.  \n\t\t\t\tin the initialize section, we create i and set it equal to the <b>start value</b>. for example, if you want your for loop to print the numbers 1-5, you would <b>set i equal to 1</b>, because that's the number you want to print first.\n\t\t\t\t(<b className=\"note\">psst. need a reminder</b> on how to create a variable? check out the <b className=\"pageName\">variables page</b>!)\n\n\t\t\t\t<h3>and what's condition?</h3>\n\t\t\t\tthe condition is the <b>second component</b>. it works to <b>determine when the loop should stop</b>. you can denote this using <b>&lt;</b>, <b>&le;</b>, <b>&gt;</b>, or <b>&ge;</b> depending on what you want your loop to do.\n\t\t\t\tgoing back to our example of printing out the numbers 1-5, we can make our condition in two ways: <b>i &lt; 6</b> or <b>i &le; 5</b>. which one you choose is up to you.\n\t\t\t\t\n\t\t\t\t<h3>hey, wait! you still have to explain iterate!</h3>\n\t\t\t\tdon't worry, we didn't forget :). the iterate portion is our <b>last component</b> and works to <b>increment your integer variable</b>, <b>either adding one or subtracting one</b> depending on the direction you would like your loop to go in. \n\t\t\t\tif you want your integer to be incremented by +1 each time it loops, you type <b>i++</b>. if you want your integer to be incremented by -1 each time it loops, you type <b>i--</b>.\n\t\t\t\tgoing back to our example of printing numbers 1-5, we would want to increase i by 1 each time. so, for our last component of the for loop, we would type <b>i++</b>.<br/>\n\t\t\t\t(<b className=\"note\">btw:</b> don't forget the semicolons between each of the three components)\n\t\t\t\t<br/><br/>here is our example fully coded out: \n\t\t\t\t<div className=\"code\">\n\t\t\t\t\tfor(int i = 1; i &le; 5; i++) &#123; <br/>\n\t\t\t\t\t\t<p>System.out.print(i + \" \")</p> <div className = \"comment\">//the \" \" is to add a space between the numbers when printing</div><br/>\n\t\t\t\t\t&#125;<br/>\n\t\t\t\t</div>\n\t\t\t\tthe code above prints out the following in the console:\n\t\t\t\t<div className=\"code\">\n\t\t\t\t\t1 2 3 4 5\n\t\t\t\t</div>\n\t\t\t\tyay! now you know all about for loops!\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default ForLoop;"]},"metadata":{},"sourceType":"module"}