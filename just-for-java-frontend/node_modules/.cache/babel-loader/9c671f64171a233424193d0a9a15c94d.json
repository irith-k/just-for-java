{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Functions.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Functions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }), \"so far, all of the code that we've been writing has been inside this thingy called the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 101\n      }\n    }, \"main method\"), \", which \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 127\n      }\n    }, \"automatically runs when you run your code\"), \":\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }\n    }, \"public static void main(String[] args) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 59\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }\n    }, \"//this is where we've always typed our code\")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }\n    }), \"}\"), \"but what does \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 28\n      }\n    }, \"public static void(String[] args)\"), \" even mean? it just seems like some funky technical jargon right now. \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 138\n      }\n    }, \"well it ain't.\"), \" and our goal on this page is for you to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 200\n      }\n    }, \"understand every single word in the main method header\"), \". ready for something fun and fresh? let's do this bro.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }\n    }, \"woah bro hold your horses;\\xA0what even is a method?\"), \"before we \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 24\n      }\n    }, \"giddy-up\"), \" into the details of functions, let's first understand what they are and why they are useful to us. a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 141\n      }\n    }, \"function\"), \" \\u2013 you can also interchangeably call this a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 200\n      }\n    }, \"method\"), \" \\u2013\\xA0is a block of code that \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 240\n      }\n    }, \"only runs when it is called\"), \". all functions have two parts:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, \"header\"), \" \\u2013\\xA0this defines a function and its input and output, if any\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }, \"body\"), \" \\u2013 whatever is inside the function, or in between the curly braces\")), \"so the main method is simply a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 45\n      }\n    }, \"function\"), \" that is automatically called when you click the run button! all the code we have been typing so far has been going into the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 185\n      }\n    }, \"body\"), \" of the main method, and public static void(String[] args) is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 262\n      }\n    }, \"header\"), \" of the main method!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }, \"what's the point of functions anyway bro?\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }\n    }, \"functions are useful because they allow you to reuse code.\"), \" what this means is that if you want a particular action to be run more than once, rather than copying the code in all the places you need it, you can simply put in into a function and call the function, or tell the computer to run whatever is in the body of that function!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, \"functions also make your code more organized.\"), \" you can put specific code into functions, even if you only call the function once, so that not everything is stuffed into the main method.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    }, \"is it time to code now bro?\"), \"yessir! we are first going to focus on the different components of a function header, as that is what defines a function. let's take a look at the blueprint of a function header:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }\n    }, \"public static \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 36\n      }\n    }, \"<return type>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 63\n      }\n    }, \"<function name>\"), \"(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 92\n      }\n    }, \"<parameters>\"), \") {\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 129\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 14\n      }\n    }, \"}\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }\n    }, \"bro, do i have to write \\\"public static\\\" in front of every function?\"), \"the short answer: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 32\n      }\n    }, \"yes, for now.\"), \" we will discuss what the keywords \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 87\n      }\n    }, \"public\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 105\n      }\n    }, \"static\"), \" mean in the future, but for now, include them in every function header.\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }, \"k thx bro. what's next?\"), \"function name. pretty self-explanatory. it's just the name that you give a function. and it's what you call a function by when you want to use it. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 162\n      }\n    }, \"btw:\"), \" we will talk in detail about how to call a function soon!!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }\n    }, \"ay that was a simple one bro. im guessing the next components are more complicated?\"), \"hehe you guessed right! but we'll break it down for you so it's easier to understand. here's the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 111\n      }\n    }, \"big picture\"), \": functions have \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 146\n      }\n    }, \"input\"), \" and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 163\n      }\n    }, \"output\"), \". input is what a function takes in and output is what a function spits out. now let's learn some \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 274\n      }\n    }, \"fancy function terminology\"), \" that we use to describe input and output:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, \"parameter\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, \"return\")), \"a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }\n    }, \"parameter\"), \" is a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 38\n      }\n    }, \"value that you pass into a function\"), \" \\u2013\\xA0anything that your function needs as an input. a function can have no parameters, one parameter, or multiple parameters \\u2013\\xA0it's up to you! you declare all of the parameters that are being passed into your function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 296\n      }\n    }, \"inside the parentheses after the function name\"), \". if you aren't passing any parameters, simply write \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 402\n      }\n    }, \"()\"), \". if you are passing multiple parameters, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 453\n      }\n    }, \"separate them by commas\"), \". each parameter has both a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 511\n      }\n    }, \"type\"), \", such as int, double, String, etc., and a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 565\n      }\n    }, \"name\"), \", which is what you will reference the parameter by when you use it in the body of your function.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 19\n      }\n    }), \"finally, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 24\n      }\n    }, \"return type\"), \" is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 50\n      }\n    }, \"type of the value that your function returns\"), \". just as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 111\n      }\n    }, \"passing a parameter into a function = input\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 163\n      }\n    }, \"returning a value in your function = output\"), \". the return type can be int, double, String, etc.; however, what if you don't want to return anything from your function? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 336\n      }\n    }, \"if you aren't returning anything from your function, then the return type is void\"), \". if you're return type isn't void, then you will need to return a value of the specified return type in the body of your function. it's pretty easy! here's the blueprint for using the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 609\n      }\n    }, \"return\"), \" keyword to return a value in the body of your function:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"return \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, \"<value>\"), \";\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }\n    }), \"we just dumped a bunch of new information about functions at you, some of which isn't the easiest to understand just by reading. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 144\n      }\n    }, \"btw:\"), \" if you're still confused, that's totally okay!) hopefully the following examples will help illustrate how to create different functions, how to pass parameters into functions, and how to return values from functions. after we go through examples of making functions, then we will discuss how to actually use the functions we made by calling them!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 14\n      }\n    }, \"howdy, partner! time for some examples!\"), \"whenever you are making a function, there are a couple questions that are helpful to think about in order to decide how to construct your function:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, \"will your function take in any \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 50\n      }\n    }, \"parameters\"), \"? in other words, does your function need any \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 113\n      }\n    }, \"input\"), \"?\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 16\n      }\n    }, \"if so, for each parameter you need, what is its \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 68\n      }\n    }, \"type\"), \"?\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, \"if not, just leave it as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 36\n      }\n    }, \"()\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 16\n      }\n    }, \"remember to separate multiple parameters using \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 67\n      }\n    }, \"commas\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 15\n      }\n    }, \"will your function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 38\n      }\n    }, \"return\"), \" a value? in other words, does your function \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 96\n      }\n    }, \"output\"), \" anything?\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 16\n      }\n    }, \"if so, what is the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 39\n      }\n    }, \"type\"), \" of the value you are returning?\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 16\n      }\n    }, \"if not, then your return type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 53\n      }\n    }, \"void\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, \"what will you do in the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 43\n      }\n    }, \"body\"), \" of your function? in other words, what is your function doing?\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 16\n      }\n    }, \"if you want to use \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 39\n      }\n    }, \"parameters\"), \" in your function, access them using their respective \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 110\n      }\n    }, \"names\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 16\n      }\n    }, \"use the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 28\n      }\n    }, \"return\"), \" keyword to return the value of the appropriate type that you specified\"))), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }\n    }, \"let's create a function called printHowdyPartner that prints \\\"howdy, partner!\\\"\"), \" before coding, let's do some planning using the list of questions above:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, \"will your function take in any parameters? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 62\n      }\n    }, \"nope!\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, \"will your function return a value? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 54\n      }\n    }, \"nope!\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 16\n      }\n    }, \"our return type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 39\n      }\n    }, \"void\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, \"what will you do in the body of your function? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 66\n      }\n    }, \"we will simply have a print statement that prints \\\"howdy, partner!\\\"\"))), \"can you figure out what our function header should be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 70\n      }\n    }, \"hint:\"), \" make sure to check out our answers to the questions above!) take a look at our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 179\n      }\n    }, \"printHowdyPartner\"), \" function header below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdyPartner() {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }\n    }), \"}\"), \"now for the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 26\n      }\n    }, \"body\"), \" of our function! as stated above, we need \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 80\n      }\n    }, \"a print statement that prints \\\"howdy, partner!\\\"\"), \" and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 298\n      }\n    }, \"printHowdyPartner\"), \" function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdyPartner() {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 14\n      }\n    }, \"System.out.println(\\\"howdy, partner!\\\");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 14\n      }\n    }), \"}\"), \"nice, bro!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 14\n      }\n    }, \"let's create a function called printHowdy that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 79\n      }\n    }, \"name\"), \"!\\\", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 100\n      }\n    }, \"name\"), \" is a person's name that is passed into the function.\"), \" before coding, let's do some planning using the list of questions above:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 15\n      }\n    }, \"will your function take in any parameters? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 62\n      }\n    }, \"yes!\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 16\n      }\n    }, \"we will pass a parameter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 45\n      }\n    }, \"String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 55\n      }\n    }, \"name\")), \" into our function\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    }, \"will your function return a value? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 54\n      }\n    }, \"nope!\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 16\n      }\n    }, \"our return type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 39\n      }\n    }, \"void\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, \"what will you do in the body of your function? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 66\n      }\n    }, \"we will have a print statement that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 120\n      }\n    }, \"name\"), \"!\\\"\"))), \"can you figure out what our function header should be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 70\n      }\n    }, \"hint:\"), \" make sure to check out our answers to the questions above!) take a look at our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 179\n      }\n    }, \"howdyPartner\"), \" function header below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdy(String name) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 14\n      }\n    }), \"}\"), \"now for the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 26\n      }\n    }, \"body\"), \" of our function! as stated above, we need \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 80\n      }\n    }, \"a print statement that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 121\n      }\n    }, \"name\"), \"!\\\"\"), \" and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 302\n      }\n    }, \"printHowdy\"), \" function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdy(String name) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 14\n      }\n    }, \"System.out.println(\\\"howdy, \\\" + name + \\\"!\\\");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 14\n      }\n    }), \"}\"), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 15\n      }\n    }, \"psst. need a reminder\"), \" of using the + operator in String concatenation? check out the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 124\n      }\n    }, \"strings page\"), \"!)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 14\n      }\n    }, \"let's create a function called printHowdy that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 79\n      }\n    }, \"name\"), \"!\\\", where \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 100\n      }\n    }, \"name\"), \" is a person's name that is passed into the function.\"), \" before coding, let's do some planning using the list of questions above:\", /*#__PURE__*/React.createElement(\"ol\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, \"will your function take in any parameters? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 62\n      }\n    }, \"yes!\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 16\n      }\n    }, \"we will pass a parameter \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 45\n      }\n    }, \"String \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 55\n      }\n    }, \"name\")), \" into our function\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 15\n      }\n    }, \"will your function return a value? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 54\n      }\n    }, \"nope!\")), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 16\n      }\n    }, \"our return type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 39\n      }\n    }, \"void\"))), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    }, \"what will you do in the body of your function? \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 66\n      }\n    }, \"we will have a print statement that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 120\n      }\n    }, \"name\"), \"!\\\"\"))), \"can you figure out what our function header should be? (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 70\n      }\n    }, \"hint:\"), \" make sure to check out our answers to the questions above!) take a look at our \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 179\n      }\n    }, \"howdyPartner\"), \" function header below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdy(String name) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 14\n      }\n    }), \"}\"), \"now for the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 26\n      }\n    }, \"body\"), \" of our function! as stated above, we need \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 80\n      }\n    }, \"a print statement that prints \\\"howdy, \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 121\n      }\n    }, \"name\"), \"!\\\"\"), \" and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 302\n      }\n    }, \"printHowdy\"), \" function below:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 14\n      }\n    }, \"public static void printHowdy(String name) {\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }\n    }, \"System.out.println(\\\"howdy, \\\" + name + \\\"!\\\");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 14\n      }\n    }), \"}\"), \"awesome, bro!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }), \"function that returns String \\\"howdy, [name]!\\\"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 14\n      }\n    }), \"function that returns String \\\"[greeting], [name]!\\\"\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 14\n      }\n    }, \"once you make a function bro, how do you call it?\"), \"to reiterate, \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 28\n      }\n    }, \"calling a function\"), \" means that you are \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 73\n      }\n    }, \"telling the computer to run whatever is in the body of that function\"), \". (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 151\n      }\n    }, \"btw:\"), \" you can call a function in the main method, or in another function!) let's take a look at the blueprint for how to call a function:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }\n    }, \"<function name>\"), \"(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 46\n      }\n    }, \"<arguments>\"), \");\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 19\n      }\n    }), \"if the function that you are calling is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 54\n      }\n    }, \"returning some value\"), \", then often you will want to \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 111\n      }\n    }, \"store the value returned by the function\"), \" in either a new or an existing \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 190\n      }\n    }, \"variable\"), \". in order to do this, simply \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 235\n      }\n    }, \"set the variable equal to the function call\"), \". here's the blueprint for how to create a new variable equal to the return of a function call:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }\n    }, \"<variable type>\"), \" \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 43\n      }\n    }, \"<variable name>\"), \" = \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 74\n      }\n    }, \"<function name>\"), \"(\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 103\n      }\n    }, \"<arguments>\"), \");\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 14\n      }\n    }, \"confused by the difference between parameters and arguments? bro we gotchu\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 14\n      }\n    }, \"so bro, is it time for the big reveal? what does the main method mean?\"), \"here are all the parts to the main method explained (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 67\n      }\n    }, \"btw:\"), \" remember, the main method is automatically called when you run your program):\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, \"the main method has \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 39\n      }\n    }, \"public static\"), \" at the start of its header\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    }, \"the name of the main method is conveniently called \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 70\n      }\n    }, \"main\")), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, \"the main method's return type is \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 52\n      }\n    }, \"void\"), \", which means that it doesn't return anything\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"the main method takes in one parameter, with a type of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 74\n      }\n    }, \"String[]\"), \" and a name of \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 104\n      }\n    }, \"args\"))), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }, \"btw:\"), \" you don't know yet what \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 68\n      }\n    }, \"String[]\"), \" means, but we will learn about it soon on the \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 130\n      }\n    }, \"array page\"), \"!)\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 14\n      }\n    }), \"(\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 15\n      }\n    }, \"btw:\"), \" you'll likely never use the parameter passed into the main method when you are coding, but now you know that it's there! we won't cover what the main method's parameter means here, but if you want to learn more, feel free to search it up online!)\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 14\n      }\n    }, \"public static void recap()\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 14\n      }\n    }, \"yeehaw bro!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 59\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 14\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Functions;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Functions.js"],"names":["React","ProgressUpdater","Hint","Functions","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Functions extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            so far, all of the code that we've been writing has been inside this thingy called the <b>main method</b>, which <b>automatically runs when you run your code</b>:\n\t            <div className=\"code\">\n\t            public static void main(String[] args) &#123;<br/>\n\t            <p><div className=\"comment\">//this is where we've always typed our code</div></p>\n\t            <br/>&#125;\n\t            </div>\n\t            but what does <b>public static void(String[] args)</b> even mean? it just seems like some funky technical jargon right now. <b>well it ain't.</b> and our goal on this page is for you to <b>understand every single word in the main method header</b>. ready for something fun and fresh? let's do this bro.\n\t            <h3>woah bro hold your horses; what even is a method?</h3>\n\t            before we <b>giddy-up</b> into the details of functions, let's first understand what they are and why they are useful to us. a <b>function</b> – you can also interchangeably call this a <b>method</b> – is a block of code that <b>only runs when it is called</b>. all functions have two parts:\n\t            <ol>\n\t            \t<li><b>header</b> – this defines a function and its input and output, if any</li>\n\t            \t<li><b>body</b> – whatever is inside the function, or in between the curly braces</li>\n\t            </ol>\n\t            so the main method is simply a <b>function</b> that is automatically called when you click the run button! all the code we have been typing so far has been going into the <b>body</b> of the main method, and public static void(String[] args) is the <b>header</b> of the main method!\n\t            <h3>what's the point of functions anyway bro?</h3>\n\t            <b>functions are useful because they allow you to reuse code.</b> what this means is that if you want a particular action to be run more than once, rather than copying the code in all the places you need it, you can simply put in into a function and call the function, or tell the computer to run whatever is in the body of that function!\n\t            <br/>\n\t            <b>functions also make your code more organized.</b> you can put specific code into functions, even if you only call the function once, so that not everything is stuffed into the main method.\n\t            <h3>is it time to code now bro?</h3>\n\t            yessir! we are first going to focus on the different components of a function header, as that is what defines a function. let's take a look at the blueprint of a function header:\n\t            <br/><b>public static <i>&lt;return type&gt;</i> <i>&lt;function name&gt;</i>(<i>&lt;parameters&gt;</i>) &#123;</b><br/>\n\t            <b>&#125;</b>\n\t            <h3>bro, do i have to write \"public static\" in front of every function?</h3>\n\t            the short answer: <b>yes, for now.</b> we will discuss what the keywords <b>public</b> and <b>static</b> mean in the future, but for now, include them in every function header.\n\t            <h3>k thx bro. what's next?</h3>\n\t            function name. pretty self-explanatory. it's just the name that you give a function. and it's what you call a function by when you want to use it. (<b className=\"note\">btw:</b> we will talk in detail about how to call a function soon!!)\n\t            <h3>ay that was a simple one bro. im guessing the next components are more complicated?</h3>\n\t            hehe you guessed right! but we'll break it down for you so it's easier to understand. here's the <b>big picture</b>: functions have <b>input</b> and <b>output</b>. input is what a function takes in and output is what a function spits out. now let's learn some <b>fancy function terminology</b> that we use to describe input and output:\n\t            <ul>\n\t            \t<li>parameter</li>\n\t            \t<li>return</li>\n\t            </ul>\n\t            a <b>parameter</b> is a <b>value that you pass into a function</b> – anything that your function needs as an input. a function can have no parameters, one parameter, or multiple parameters – it's up to you! you declare all of the parameters that are being passed into your function <b>inside the parentheses after the function name</b>. if you aren't passing any parameters, simply write <b>()</b>. if you are passing multiple parameters, <b>separate them by commas</b>. each parameter has both a <b>type</b>, such as int, double, String, etc., and a <b>name</b>, which is what you will reference the parameter by when you use it in the body of your function.\n\t            <br/><br/>\n\t        \tfinally, the <b>return type</b> is the <b>type of the value that your function returns</b>. just as <b>passing a parameter into a function = input</b>, <b>returning a value in your function = output</b>. the return type can be int, double, String, etc.; however, what if you don't want to return anything from your function? <b>if you aren't returning anything from your function, then the return type is void</b>. if you're return type isn't void, then you will need to return a value of the specified return type in the body of your function. it's pretty easy! here's the blueprint for using the <b>return</b> keyword to return a value in the body of your function:\n\t        \t<br/>\n\t        \t<b>return <i>&lt;value&gt;</i>;</b>\n\t        \t<br/><br/>\n\t            we just dumped a bunch of new information about functions at you, some of which isn't the easiest to understand just by reading. (<b className=\"note\">btw:</b> if you're still confused, that's totally okay!) hopefully the following examples will help illustrate how to create different functions, how to pass parameters into functions, and how to return values from functions. after we go through examples of making functions, then we will discuss how to actually use the functions we made by calling them!\n\t            <h3>howdy, partner! time for some examples!</h3>\n\t            whenever you are making a function, there are a couple questions that are helpful to think about in order to decide how to construct your function:\n\t            <ol>\n\t            \t<li>will your function take in any <b>parameters</b>? in other words, does your function need any <b>input</b>?</li>\n\t            \t<ul>\n\t            \t\t<li>if so, for each parameter you need, what is its <b>type</b>?</li>\n\t\t\t\t\t\t<li>if not, just leave it as <b>()</b></li>\n\t            \t\t<li>remember to separate multiple parameters using <b>commas</b></li>\n\t            \t</ul>\n\t            \t<li>will your function <b>return</b> a value? in other words, does your function <b>output</b> anything?</li>\n\t            \t<ul>\n\t            \t\t<li>if so, what is the <b>type</b> of the value you are returning?</li>\n\t            \t\t<li>if not, then your return type is <b>void</b></li>\n\t            \t</ul>\n\t            \t<li>what will you do in the <b>body</b> of your function? in other words, what is your function doing?</li>\n\t            \t<ul>\n\t            \t\t<li>if you want to use <b>parameters</b> in your function, access them using their respective <b>names</b></li>\n\t            \t\t<li>use the <b>return</b> keyword to return the value of the appropriate type that you specified</li>\n\t            \t</ul>\n\t            </ol>\n\t            <b>let's create a function called printHowdyPartner that prints \"howdy, partner!\"</b> before coding, let's do some planning using the list of questions above:\n\t            <ol>\n\t            \t<li>will your function take in any parameters? <b>nope!</b></li>\n\t            \t<li>will your function return a value? <b>nope!</b></li>\n\t            \t<ul>\n\t            \t\t<li>our return type is <b>void</b></li>\n\t            \t</ul>\n\t            \t<li>what will you do in the body of your function? <b>we will simply have a print statement that prints \"howdy, partner!\"</b></li>\n\t            </ol>\n\t            can you figure out what our function header should be? (<b className=\"note\">hint:</b> make sure to check out our answers to the questions above!) take a look at our <b>printHowdyPartner</b> function header below:\n\t            <div className=\"code\">\n\t            public static void printHowdyPartner() &#123;\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            now for the <b>body</b> of our function! as stated above, we need <b>a print statement that prints \"howdy, partner!\"</b> and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed <b>printHowdyPartner</b> function below:\n\t            <div className=\"code\">\n\t\t\t\tpublic static void printHowdyPartner() &#123;\n\t            <br/>\n\t            <p>System.out.println(\"howdy, partner!\");</p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            nice, bro!\n\t            <br/><br/>\n\t            <b>let's create a function called printHowdy that prints \"howdy, <i>name</i>!\", where <i>name</i> is a person's name that is passed into the function.</b> before coding, let's do some planning using the list of questions above:\n\t            <ol>\n\t            \t<li>will your function take in any parameters? <b>yes!</b></li>\n\t            \t<ul>\n\t            \t\t<li>we will pass a parameter <b>String <i>name</i></b> into our function</li>\n\t            \t</ul>\n\t            \t<li>will your function return a value? <b>nope!</b></li>\n\t            \t<ul>\n\t            \t\t<li>our return type is <b>void</b></li>\n\t            \t</ul>\n\t            \t<li>what will you do in the body of your function? <b>we will have a print statement that prints \"howdy, <i>name</i>!\"</b></li>\n\t            </ol>\n\t            can you figure out what our function header should be? (<b className=\"note\">hint:</b> make sure to check out our answers to the questions above!) take a look at our <b>howdyPartner</b> function header below:\n\t            <div className=\"code\">\n\t            public static void printHowdy(String name) &#123;\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            now for the <b>body</b> of our function! as stated above, we need <b>a print statement that prints \"howdy, <i>name</i>!\"</b> and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed <b>printHowdy</b> function below:\n\t            <div className=\"code\">\n\t\t\t\tpublic static void printHowdy(String name) &#123;\n\t            <br/>\n\t            <p>System.out.println(\"howdy, \" + name + \"!\");</p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            (<b className=\"note\">psst. need a reminder</b> of using the + operator in String concatenation? check out the <b className=\"pageName\">strings page</b>!)\n\t\t\t\t<br/><br/>\n\t            <b>let's create a function called printHowdy that prints \"howdy, <i>name</i>!\", where <i>name</i> is a person's name that is passed into the function.</b> before coding, let's do some planning using the list of questions above:\n\t            <ol>\n\t            \t<li>will your function take in any parameters? <b>yes!</b></li>\n\t            \t<ul>\n\t            \t\t<li>we will pass a parameter <b>String <i>name</i></b> into our function</li>\n\t            \t</ul>\n\t            \t<li>will your function return a value? <b>nope!</b></li>\n\t            \t<ul>\n\t            \t\t<li>our return type is <b>void</b></li>\n\t            \t</ul>\n\t            \t<li>what will you do in the body of your function? <b>we will have a print statement that prints \"howdy, <i>name</i>!\"</b></li>\n\t            </ol>\n\t            can you figure out what our function header should be? (<b className=\"note\">hint:</b> make sure to check out our answers to the questions above!) take a look at our <b>howdyPartner</b> function header below:\n\t            <div className=\"code\">\n\t            public static void printHowdy(String name) &#123;\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            now for the <b>body</b> of our function! as stated above, we need <b>a print statement that prints \"howdy, <i>name</i>!\"</b> and we don't need any return statement since our return type is void. have an idea on what the body of our function should look like? take a look at our completed <b>printHowdy</b> function below:\n\t            <div className=\"code\">\n\t\t\t\tpublic static void printHowdy(String name) &#123;\n\t            <br/>\n\t            <p>System.out.println(\"howdy, \" + name + \"!\");</p>\n\t            <br/>\n\t            &#125;\n\t            </div>\n\t            awesome, bro!\n\t            <br/><br/>\n\t            function that returns String \"howdy, [name]!\"\n\t            <br/>\n\t            function that returns String \"[greeting], [name]!\"\n\t            <h3>once you make a function bro, how do you call it?</h3>\n\t            to reiterate, <b>calling a function</b> means that you are <b>telling the computer to run whatever is in the body of that function</b>. (<b className=\"note\">btw:</b> you can call a function in the main method, or in another function!) let's take a look at the blueprint for how to call a function:\n\t            <br/>\n\t            <b><i>&lt;function name&gt;</i>(<i>&lt;arguments&gt;</i>);</b>\n\t            <br/><br/>\n\t            if the function that you are calling is <b>returning some value</b>, then often you will want to <b>store the value returned by the function</b> in either a new or an existing <b>variable</b>. in order to do this, simply <b>set the variable equal to the function call</b>. here's the blueprint for how to create a new variable equal to the return of a function call:\n\t            <br/>\n\t        \t<b><i>&lt;variable type&gt;</i> <i>&lt;variable name&gt;</i> = <i>&lt;function name&gt;</i>(<i>&lt;arguments&gt;</i>);</b>\n\t            \n\t            <h3>confused by the difference between parameters and arguments? bro we gotchu</h3>\n\t            \n\t            <h3>so bro, is it time for the big reveal? what does the main method mean?</h3>\n\t            here are all the parts to the main method explained (<b className=\"note\">btw:</b> remember, the main method is automatically called when you run your program):\n\t            <ul>\n\t            \t<li>the main method has <b>public static</b> at the start of its header</li>\n\t            \t<li>the name of the main method is conveniently called <b>main</b></li>\n\t            \t<li>the main method's return type is <b>void</b>, which means that it doesn't return anything</li>\n\t            \t<li>the main method takes in one parameter, with a type of <b>String[]</b> and a name of <b>args</b></li>\n\t            </ul>\n\t            (<b className=\"note\">btw:</b> you don't know yet what <b>String[]</b> means, but we will learn about it soon on the <b className=\"pageName\">array page</b>!)\n\t            <br/>\n\t            (<b className=\"note\">btw:</b> you'll likely never use the parameter passed into the main method when you are coding, but now you know that it's there! we won't cover what the main method's parameter means here, but if you want to learn more, feel free to search it up online!)\n\t            <h3>public static void recap()</h3>\n\t            <b>yeehaw bro!</b> you made it to recap!<br/><br/>\n\t            <h3>pit stop</h3>\n\t            <br/>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Functions;"]},"metadata":{},"sourceType":"module"}