{"ast":null,"code":"var _jsxFileName = \"/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Array.js\";\nimport React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Array extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      progress: \"todo\"\n    };\n  }\n\n  updateProgressState(progress) {\n    this.setState({\n      progress: progress\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }), \"today's the day we're gonna learn how to store a \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 63\n      }\n    }, \"list of values in a variable\"), \", called an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 110\n      }\n    }, \"array\"), \". oooh getting kinda spicy over here!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 14\n      }\n    }, \"so how do you make this so called spicy array?\"), \"here is the blueprint when creating an array:\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 14\n      }\n    }, \"<type of values in array>\"), \"[] \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 55\n      }\n    }, \"<name>\"), \" = new \", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 81\n      }\n    }, \"<type of values inside array>\"), \"[\", /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 124\n      }\n    }, \"<number of values in array>\"), \"];\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 14\n      }\n    }), \"we know it looks super hairy and complicated right now, so \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 73\n      }\n    }, \"let's break it down for you, eh?\"), \" to do so, we will focus on the three parts of a variable initialization: \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 186\n      }\n    }, \"type\"), \", \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 199\n      }\n    }, \"name\"), \", and \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 216\n      }\n    }, \"value\"), \".\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 19\n      }\n    }, \"type\"), \" \\u2013 the type of an array includes two things: first, the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 86\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 89\n      }\n    }, \"<type of values in array>\")), \", which can be int, String, etc.; second, we need to include square brackets \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 208\n      }\n    }, \"[]\"), \", which mean that our variable is an \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 254\n      }\n    }, \"array\"), \", or list, of the type of value we specified earlier\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 19\n      }\n    }, \"name\"), \" \\u2013 right after we declare the type of our array, we declare its \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 94\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 97\n      }\n    }, \"<name>\")), \", just like with any other variable\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 19\n      }\n    }, \"value\"), \" \\u2013 this component is the most complicated and different from what we've normally seen; right after the =, type the keyword \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 154\n      }\n    }, \"new\"), \", which you may recognize from when we created a Scanner variable; next, we include the whole type of our variable again; however, this time, inside the square brackets, we need to put an integer that specifies the \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 379\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 382\n      }\n    }, \"<number of values in array>\")))), \"it's important to note that after initializing an array, you \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 75\n      }\n    }, \"cannot change the number of values inside the array, nor the type of the values inside the array\"), \". you can't add or remove values from an array, and you cannot have an array with mixed types of values.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 19\n      }\n    }), \"time to try this blueprint out in code! let's make an array that will store 5 doubles. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 102\n      }\n    }, \"hint:\"), \" what is the type of the values in our array? how many values are we storing in our array?) check out the code below that initializes this array:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }\n    }, \"//we create an array of 5 doubles called list\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }\n    }), \"double[] list = new double[5];\"), \"wanna try one more? let's make an array that will store 3 booleans. (\", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 83\n      }\n    }, \"hint:\"), \" what is the type of the values in our array? how many values are we storing in our array?) check out the code below that initializes this array:\", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"code\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }\n    }, \"//we create an array of 3 booleans called myList\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }\n    }), \"boolean[] myList = new boolean[3];\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }\n    }, \"how can you change and get the values in an array?\"), \"great question!!\", /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 14\n      }\n    }, \"[\\\"hip\\\", \\\"hip\\\"] \\u2013\\xA0hip hip array! recap time!\"), /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 14\n      }\n    }, \"hip hip hooray!\"), \" you made it to recap!\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 14\n      }\n    }, \"pit stop\"), /*#__PURE__*/React.createElement(ProgressUpdater, {\n      page: this.props.page,\n      user: this.props.user,\n      progress: this.state.progress,\n      update: progress => this.updateProgressState(progress),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 14\n      }\n    }), \"...we know \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, \"just for java\"), \" is as \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 69\n      }\n    }, \"addicting\"), \" as the newest Netflix binge, so what are you waiting for? \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"pageName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 144\n      }\n    }, \"keep coding!\"));\n  }\n\n}\n\nexport default Array;","map":{"version":3,"sources":["/Users/irithkatiyar/Desktop/just-for-java-frontend/src/components/Array.js"],"names":["React","ProgressUpdater","Hint","Array","Component","constructor","props","state","progress","updateProgressState","setState","render","page","user"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ProgressUpdater from './ProgressUpdater';\nimport Hint from './Hint';\n\nclass Array extends React.Component{\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state={\n\t\t\tprogress: \"todo\"\n\t\t}\n\t}\n\n\tupdateProgressState(progress){\n\t\tthis.setState({\n\t\t\tprogress: progress\n\t\t});\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            today's the day we're gonna learn how to store a <b>list of values in a variable</b>, called an <b>array</b>. oooh getting kinda spicy over here! \n\t            <h3>so how do you make this so called spicy array?</h3>\n\t            here is the blueprint when creating an array:\n\t            <br/>\n\t            <b>\n\t            <i>&lt;type of values in array&gt;</i>[] <i>&lt;name&gt;</i> = new <i>&lt;type of values inside array&gt;</i>[<i>&lt;number of values in array&gt;</i>];\n\t            </b>\n\t            <br/>\n\t            we know it looks super hairy and complicated right now, so <b>let's break it down for you, eh?</b> to do so, we will focus on the three parts of a variable initialization: <b>type</b>, <b>name</b>, and <b>value</b>.\n\t            <ul>\n\t            \t<li><b>type</b> – the type of an array includes two things: first, the <b><i>&lt;type of values in array&gt;</i></b>, which can be int, String, etc.; second, we need to include square brackets <b>[]</b>, which mean that our variable is an <b>array</b>, or list, of the type of value we specified earlier</li>\n\t            \t<li><b>name</b> – right after we declare the type of our array, we declare its <b><i>&lt;name&gt;</i></b>, just like with any other variable</li>\n\t            \t<li><b>value</b> – this component is the most complicated and different from what we've normally seen; right after the =, type the keyword <b>new</b>, which you may recognize from when we created a Scanner variable; next, we include the whole type of our variable again; however, this time, inside the square brackets, we need to put an integer that specifies the <b><i>&lt;number of values in array&gt;</i></b></li>\n\t            </ul>\n\t            it's important to note that after initializing an array, you <b>cannot change the number of values inside the array, nor the type of the values inside the array</b>. you can't add or remove values from an array, and you cannot have an array with mixed types of values.\n\t            <br/><br/>\n\t            time to try this blueprint out in code! let's make an array that will store 5 doubles. (<b className=\"note\">hint:</b> what is the type of the values in our array? how many values are we storing in our array?) check out the code below that initializes this array:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//we create an array of 5 doubles called list</div>\n\t            <br/>\n\t            double[] list = new double[5];\n\t            </div>\n\t            wanna try one more? let's make an array that will store 3 booleans. (<b className=\"note\">hint:</b> what is the type of the values in our array? how many values are we storing in our array?) check out the code below that initializes this array:\n\t            <div className=\"code\">\n\t            <div className=\"comment\">//we create an array of 3 booleans called myList</div>\n\t            <br/>\n\t            boolean[] myList = new boolean[3];\n\t            </div>\n\t            <h3>how can you change and get the values in an array?</h3>\n\t            great question!! \n\t            <h3>[\"hip\", \"hip\"] – hip hip array! recap time!</h3>\n\t            <b>hip hip hooray!</b> you made it to recap!\n\t            <br/><br/>\n\t            <h3>pit stop</h3>\n\t            <ProgressUpdater\n\t              page={this.props.page} \n\t              user={this.props.user}\n\t              progress={this.state.progress}\n\t              update={(progress)=>this.updateProgressState(progress)}\n\t            />\n\t            ...we know <b className=\"note\">just for java</b> is as <b>addicting</b> as the newest Netflix binge, so what are you waiting for? <b className=\"pageName\">keep coding!</b>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Array;"]},"metadata":{},"sourceType":"module"}